import{_ as t,o as e,c as i,e as n}from"./app-B8gNu4K5.js";const a="/images/dynamictp/liveness.png",l="/images/dynamictp/capacity.png",o="/images/dynamictp/reject.png",r="/images/dynamictp/queue_timeout.png",c="/images/dynamictp/run_timeout.jpg",p={},s=n('<h3 id="告警类型" tabindex="-1"><a class="header-anchor" href="#告警类型"><span>告警类型</span></a></h3><p>框架目前提供以下告警功能，每一个告警项都可以独立配置是否开启、告警阈值、告警间隔时间、平台等，具体代码请看 core 模块 notifier 包， 告警信息同时会高亮与该告警项相关的字段。</p><ul><li>线程池活跃度告警</li></ul><div class="hint-container tip"><p class="hint-container-title">线程池活跃度告警</p><ul><li><p>活跃度 = (activeCount / maximumPoolSize) * 100</p></li><li><p>比如 threshold 阈值配置 80，表示活跃度达到 80% 时触发告警</p></li><li><p>服务启动后会开启一个定时监控任务，每隔一定时间（可配置）去计算线程池的活跃度，达到配置的 threshold 阈值后会触发一次告警，告警间隔内多次触发不会发送告警通知</p></li></ul><img src="'+a+'" width="50%" height="50%"></div><ul><li>队列容量告警</li></ul><div class="hint-container tip"><p class="hint-container-title">队列容量告警</p><ul><li><p>容量使用率 = (queueSize / queueCapacity) * 100</p></li><li><p>比如 threshold 阈值配置 80，表示队列容量使用率达到 80% 时触发告警</p></li><li><p>服务启动后会开启一个定时监控任务，每隔一定时间去计算任务队列的使用率，达到配置的 threshold 阈值后会触发一次告警，告警间隔内多次触发不会发送告警通知</p></li></ul><img src="'+l+'" width="50%" height="50%"></div><ul><li>拒绝策略告警</li></ul><div class="hint-container tip"><p class="hint-container-title">拒绝策略告警</p><ul><li><p>线程池线程数达到配置的最大线程数，且任务队列已满，再提交任务会触发拒绝策略</p></li><li><p>DtpExecutor 线程池用到的 RejectedExecutionHandler 是经过动态代理包装过的， 在执行具体的拒绝策略之前会执行 RejectedAware 类 beforeReject() 方法</p></li><li><p>beforeReject 方法会去做拒绝数量累加（总数值累加、周期值累加）。且判断如果周期累计值达到配置的阈值， 则会触发一次告警通知（同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知</p></li></ul><img src="'+o+'" width="50%" height="50%"></div><ul><li>任务排队超时告警</li></ul><div class="hint-container tip"><p class="hint-container-title">任务排队超时告警</p><ul><li><p>重写 ThreadPoolExecutor 的 execute() 方法和 beforeExecute() 方法，采用时间轮处理任务排队超时逻辑</p></li><li><p>任务提交时用 queueTimeout 开启一个处理排队超时的 TimerTask，排队超时后执行 TimerTask 的 run 方法，累加排队超时任务数量（总数值累加、周期值累加）。 且判断如果周期累计值达到配置的阈值， 则会触发一次告警通知（同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知</p></li></ul><img src="'+r+'" width="50%" height="50%"></div><ul><li>任务执行超时告警</li></ul><div class="hint-container tip"><p class="hint-container-title">任务执行超时告警</p><ul><li><p>重写 ThreadPoolExecutor 的 beforeExecute() 和 afterExecute() 方法，采用时间轮处理任务执行超时逻辑</p></li><li><p>beforeExecute() 阶段根据 runTimeout 开启一个处理执行超时的 TimerTask，超时后执行 TimerTask 的 run 方法， 累加执行超时任务数量（总数值累加、周期值累加）。且判断如果周期累计值达到配置的阈值，则会触发一次告警通知 （同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知</p></li></ul><img src="'+c+'" width="50%" height="50%"></div>',12),m=[s];function h(d,u){return e(),i("div",null,m)}const y=t(p,[["render",h],["__file","alarm.html.vue"]]),_=JSON.parse('{"path":"/guide/notice/alarm.html","title":"运行报警","lang":"zh-CN","frontmatter":{"title":"运行报警","icon":"alert","order":1,"author":"yanhom","date":"2022-06-11T00:00:00.000Z","tag":["运行报警","dynamictp"],"sticky":true,"star":true,"description":"告警类型 框架目前提供以下告警功能，每一个告警项都可以独立配置是否开启、告警阈值、告警间隔时间、平台等，具体代码请看 core 模块 notifier 包， 告警信息同时会高亮与该告警项相关的字段。 线程池活跃度告警 线程池活跃度告警 活跃度 = (activeCount / maximumPoolSize) * 100 比如 threshold 阈值...","head":[["meta",{"property":"og:url","content":"https://gitee.com/dromara/dynamic-tp/guide/notice/alarm.html"}],["meta",{"property":"og:site_name","content":"dynamictp"}],["meta",{"property":"og:title","content":"运行报警"}],["meta",{"property":"og:description","content":"告警类型 框架目前提供以下告警功能，每一个告警项都可以独立配置是否开启、告警阈值、告警间隔时间、平台等，具体代码请看 core 模块 notifier 包， 告警信息同时会高亮与该告警项相关的字段。 线程池活跃度告警 线程池活跃度告警 活跃度 = (activeCount / maximumPoolSize) * 100 比如 threshold 阈值..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T15:33:45.000Z"}],["meta",{"property":"article:author","content":"yanhom"}],["meta",{"property":"article:tag","content":"运行报警"}],["meta",{"property":"article:tag","content":"dynamictp"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T15:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运行报警\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T15:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yanhom\\"}]}"]]},"headers":[{"level":3,"title":"告警类型","slug":"告警类型","link":"#告警类型","children":[]}],"git":{"createdTime":1677489312000,"updatedTime":1742052825000,"contributors":[{"name":"yanhom","email":"yanhom1314@foxmail.com","commits":13}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"guide/notice/alarm.md","localizedDate":"2022年6月11日","autoDesc":true,"excerpt":"<h3>告警类型</h3>\\n<p>框架目前提供以下告警功能，每一个告警项都可以独立配置是否开启、告警阈值、告警间隔时间、平台等，具体代码请看 core 模块 notifier 包，\\n告警信息同时会高亮与该告警项相关的字段。</p>\\n<ul>\\n<li>线程池活跃度告警</li>\\n</ul>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">线程池活跃度告警</p>\\n<ul>\\n<li>\\n<p>活跃度 = (activeCount / maximumPoolSize) * 100</p>\\n</li>\\n<li>\\n<p>比如 threshold 阈值配置 80，表示活跃度达到 80% 时触发告警</p>\\n</li>\\n<li>\\n<p>服务启动后会开启一个定时监控任务，每隔一定时间（可配置）去计算线程池的活跃度，达到配置的 threshold 阈值后会触发一次告警，告警间隔内多次触发不会发送告警通知</p>\\n</li>\\n</ul>\\n<img src=\\"/images/dynamictp/liveness.png\\" width=\\"50%\\" height=\\"50%\\">\\n</div>"}');export{y as comp,_ as data};
