import{_ as p,r as e,o,c,b as n,d as s,a as u,e as a}from"./app-B8gNu4K5.js";const l={},i=a(`<h3 id="线程池定义" tabindex="-1"><a class="header-anchor" href="#线程池定义"><span>线程池定义</span></a></h3><p>建议直接配置在配置中心，但是如果想后期再添加到配置中心，可以先用 @Bean 编码式声明（方便 Spring 依赖注入）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfiguration</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DynamicTp</span></span><span class="token punctuation">}</span> 注解定义普通juc线程池，会享受到该框架增强能力，注解名称优先级高于方法名
   *
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@DynamicTp</span><span class="token punctuation">(</span><span class="token string">&quot;jucThreadPoolExecutor&quot;</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">jucThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DynamicTp</span></span><span class="token punctuation">}</span> 注解定义spring线程池，会享受到该框架增强能力，注解名称优先级高于方法名
   *
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@DynamicTp</span><span class="token punctuation">(</span><span class="token string">&quot;threadPoolTaskExecutor&quot;</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">threadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolCreator</span></span><span class="token punctuation">}</span> 快速创建一些简单配置的线程池，使用默认参数
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   *
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">DtpExecutor</span> <span class="token function">dtpExecutor0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolCreator</span><span class="token punctuation">.</span><span class="token function">createDynamicFast</span><span class="token punctuation">(</span><span class="token string">&quot;dtpExecutor0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolBuilder</span></span><span class="token punctuation">}</span> 设置详细参数创建动态线程池
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">dtpExecutor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadPoolName</span><span class="token punctuation">(</span><span class="token string">&quot;dtpExecutor1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;test-dtp-common&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">keepAliveTime</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">workQueue</span><span class="token punctuation">(</span><span class="token constant">MEMORY_SAFE_LINKED_BLOCKING_QUEUE</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">buildDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolBuilder</span></span><span class="token punctuation">}</span> 设置详细参数创建动态线程池
   * eager，参考tomcat线程池设计，适用于处理io密集型任务场景，具体参数可以看代码注释
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">DtpExecutor</span> <span class="token function">eagerDtpExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadPoolName</span><span class="token punctuation">(</span><span class="token string">&quot;eagerDtpExecutor&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;test-eager&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eager</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">buildDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolBuilder</span></span><span class="token punctuation">}</span> 设置详细参数创建动态线程池
   * ordered，适用于处理有序任务场景，任务要实现Ordered接口，具体参数可以看代码注释
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">OrderedDtpExecutor</span> <span class="token function">orderedDtpExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadPoolName</span><span class="token punctuation">(</span><span class="token string">&quot;orderedDtpExecutor&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;test-ordered&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">buildOrdered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolBuilder</span></span><span class="token punctuation">}</span> 设置详细参数创建线程池
   * scheduled，适用于处理定时任务场景，具体参数可以看代码注释
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">scheduledDtpExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadPoolName</span><span class="token punctuation">(</span><span class="token string">&quot;scheduledDtpExecutor&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;test-scheduled&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">rejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token constant">CALLER_RUNS_POLICY</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">buildScheduled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ThreadPoolBuilder</span></span><span class="token punctuation">}</span> 设置详细参数创建线程池
   * priority，适用于处理优先级任务场景，具体参数可以看代码注释
   * tips: 建议直接在配置中心配置就行，不用@Bean声明
   *
   * <span class="token keyword">@return</span> 线程池实例
   */</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">PriorityDtpExecutor</span> <span class="token function">priorityDtpExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ThreadPoolBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadPoolName</span><span class="token punctuation">(</span><span class="token string">&quot;priorityDtpExecutor&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">maximumPoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;test-priority&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">rejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token constant">CALLER_RUNS_POLICY</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">buildPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码引用" tabindex="-1"><a class="header-anchor" href="#代码引用"><span>代码引用</span></a></h3><p>从 DtpRegistry 中根据线程池名称获取，或者通过依赖注入方式（推荐，更优雅）</p>`,5),k=a(`<li><p>依赖注入方式使用，优先推荐依赖注入方式，不能使用依赖注入的场景可以使用方式2</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">ThreadPoolExecutor</span> dtpExecutor1<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   dtpExecutor1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从 DtpRegistry 注册器获取（接口场景可用）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">DtpExecutor</span> dtpExecutor <span class="token operator">=</span> <span class="token class-name">DtpRegistry</span><span class="token punctuation">.</span><span class="token function">getDtpExecutor</span><span class="token punctuation">(</span><span class="token string">&quot;dtpExecutor1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   dtpExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),r={href:"https://gitee.com/dromara/dynamic-tp/tree/master/example",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[i,n("ul",null,[k,n("li",null,[n("p",null,[s("更详细使用实例请参考 "),n("a",r,[s("example"),u(t)]),s(" 工程")])])])])}const y=p(l,[["render",d],["__file","code.html.vue"]]),f=JSON.parse('{"path":"/guide/use/code.html","title":"代码使用","lang":"zh-CN","frontmatter":{"title":"代码使用","icon":"code1","order":1,"author":"yanhom","date":"2022-06-11T00:00:00.000Z","tag":["代码使用","dynamictp"],"sticky":true,"star":true,"description":"线程池定义 建议直接配置在配置中心，但是如果想后期再添加到配置中心，可以先用 @Bean 编码式声明（方便 Spring 依赖注入） 代码引用 从 DtpRegistry 中根据线程池名称获取，或者通过依赖注入方式（推荐，更优雅） 依赖注入方式使用，优先推荐依赖注入方式，不能使用依赖注入的场景可以使用方式2 从 DtpRegistry 注册器获取（接口...","head":[["meta",{"property":"og:url","content":"https://gitee.com/dromara/dynamic-tp/guide/use/code.html"}],["meta",{"property":"og:site_name","content":"dynamictp"}],["meta",{"property":"og:title","content":"代码使用"}],["meta",{"property":"og:description","content":"线程池定义 建议直接配置在配置中心，但是如果想后期再添加到配置中心，可以先用 @Bean 编码式声明（方便 Spring 依赖注入） 代码引用 从 DtpRegistry 中根据线程池名称获取，或者通过依赖注入方式（推荐，更优雅） 依赖注入方式使用，优先推荐依赖注入方式，不能使用依赖注入的场景可以使用方式2 从 DtpRegistry 注册器获取（接口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T15:33:45.000Z"}],["meta",{"property":"article:author","content":"yanhom"}],["meta",{"property":"article:tag","content":"代码使用"}],["meta",{"property":"article:tag","content":"dynamictp"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T15:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T15:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yanhom\\"}]}"]]},"headers":[{"level":3,"title":"线程池定义","slug":"线程池定义","link":"#线程池定义","children":[]},{"level":3,"title":"代码引用","slug":"代码引用","link":"#代码引用","children":[]}],"git":{"createdTime":1677489312000,"updatedTime":1742052825000,"contributors":[{"name":"yanhom","email":"yanhom1314@foxmail.com","commits":8},{"name":"kamtohung","email":"kamtohung@gmail.com","commits":1}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"guide/use/code.md","localizedDate":"2022年6月11日","autoDesc":true,"excerpt":"<h3>线程池定义</h3>\\n<p>建议直接配置在配置中心，但是如果想后期再添加到配置中心，可以先用 @Bean 编码式声明（方便 Spring 依赖注入）</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ThreadPoolConfiguration</span> <span class=\\"token punctuation\\">{</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">DynamicTp</span></span><span class=\\"token punctuation\\">}</span> 注解定义普通juc线程池，会享受到该框架增强能力，注解名称优先级高于方法名\\n   *\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@DynamicTp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"jucThreadPoolExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span> <span class=\\"token function\\">jucThreadPoolExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ThreadPoolExecutor</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Executors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newFixedThreadPool</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">DynamicTp</span></span><span class=\\"token punctuation\\">}</span> 注解定义spring线程池，会享受到该框架增强能力，注解名称优先级高于方法名\\n   *\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@DynamicTp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"threadPoolTaskExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ThreadPoolTaskExecutor</span> <span class=\\"token function\\">threadPoolTaskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPoolTaskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolCreator</span></span><span class=\\"token punctuation\\">}</span> 快速创建一些简单配置的线程池，使用默认参数\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   *\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">DtpExecutor</span> <span class=\\"token function\\">dtpExecutor0</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolCreator</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createDynamicFast</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"dtpExecutor0\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolBuilder</span></span><span class=\\"token punctuation\\">}</span> 设置详细参数创建动态线程池\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ThreadPoolExecutor</span> <span class=\\"token function\\">dtpExecutor1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolBuilder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadPoolName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"dtpExecutor1\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test-dtp-common\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">corePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maximumPoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">15</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keepAliveTime</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">40</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">timeUnit</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">workQueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">MEMORY_SAFE_LINKED_BLOCKING_QUEUE</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildDynamic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolBuilder</span></span><span class=\\"token punctuation\\">}</span> 设置详细参数创建动态线程池\\n   * eager，参考tomcat线程池设计，适用于处理io密集型任务场景，具体参数可以看代码注释\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">DtpExecutor</span> <span class=\\"token function\\">eagerDtpExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolBuilder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadPoolName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"eagerDtpExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test-eager\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">corePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maximumPoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queueCapacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">eager</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildDynamic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolBuilder</span></span><span class=\\"token punctuation\\">}</span> 设置详细参数创建动态线程池\\n   * ordered，适用于处理有序任务场景，任务要实现Ordered接口，具体参数可以看代码注释\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">OrderedDtpExecutor</span> <span class=\\"token function\\">orderedDtpExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolBuilder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadPoolName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"orderedDtpExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test-ordered\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">corePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maximumPoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queueCapacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildOrdered</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolBuilder</span></span><span class=\\"token punctuation\\">}</span> 设置详细参数创建线程池\\n   * scheduled，适用于处理定时任务场景，具体参数可以看代码注释\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ScheduledExecutorService</span> <span class=\\"token function\\">scheduledDtpExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolBuilder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadPoolName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"scheduledDtpExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">corePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test-scheduled\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">rejectedExecutionHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">CALLER_RUNS_POLICY</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildScheduled</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token doc-comment comment\\">/**\\n   * 通过<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">ThreadPoolBuilder</span></span><span class=\\"token punctuation\\">}</span> 设置详细参数创建线程池\\n   * priority，适用于处理优先级任务场景，具体参数可以看代码注释\\n   * tips: 建议直接在配置中心配置就行，不用@Bean声明\\n   *\\n   * <span class=\\"token keyword\\">@return</span> 线程池实例\\n   */</span>\\n  <span class=\\"token annotation punctuation\\">@Bean</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">PriorityDtpExecutor</span> <span class=\\"token function\\">priorityDtpExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">ThreadPoolBuilder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadPoolName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"priorityDtpExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">corePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maximumPoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test-priority\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">rejectedExecutionHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">CALLER_RUNS_POLICY</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">buildPriority</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{y as comp,f as data};
