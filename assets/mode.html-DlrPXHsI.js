import{_ as e,o as n,c as t,e as a}from"./app-B8gNu4K5.js";const s={},o=a(`<h3 id="线程池模式" tabindex="-1"><a class="header-anchor" href="#线程池模式"><span>线程池模式</span></a></h3><p>目前框架提供如下 5 种线程池模式，可以根据业务场景选择合适的线程池模式</p><div class="hint-container tip"><p class="hint-container-title">线程池模式</p><ul><li><p>common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待</p></li><li><p>eager 模式：对应线程池 EagerDtpExecutor，eager 模式适用于 IO 密集型场景，在线程池没达到设置的最大值之前优先创建新线程执行任务而不是放入队列等待，比如 tomcat 线程池、dubbo 线程池都是采用这种模式</p></li><li><p>ordered 模式：对应线程池 OrderedDtpExecutor，适用于需要保证任务有序执行的场景，比如消费消息队列消息，需保证同一 uid 的消息按序消费</p></li><li><p>priority 模式：对应线程池 PriorityDtpExecutor，适用于需要根据任务优先级执行的场景，比如优先级高的任务先执行</p></li><li><p>scheduled 模式：对应线程池 ScheduledDtpExecutor，适用于定时任务场景</p></li></ul></div><h3 id="模式设定" tabindex="-1"><a class="header-anchor" href="#模式设定"><span>模式设定</span></a></h3><p>通过线程池配置中的 executorType 指定所用模式</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">dynamictp</span><span class="token punctuation">:</span>   
  <span class="token key atrule">executors</span><span class="token punctuation">:</span>                               <span class="token comment"># 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量</span>
    <span class="token punctuation">-</span> <span class="token key atrule">threadPoolName</span><span class="token punctuation">:</span> dtpExecutor1         <span class="token comment"># 线程池名称，必填</span>
      <span class="token key atrule">executorType</span><span class="token punctuation">:</span> common                 <span class="token comment"># 线程池类型 common、eager、ordered、scheduled、priority，默认 common</span>
      <span class="token key atrule">corePoolSize</span><span class="token punctuation">:</span> <span class="token number">10</span>                     <span class="token comment"># 核心线程数，默认1</span>
      <span class="token key atrule">maximumPoolSize</span><span class="token punctuation">:</span> <span class="token number">20</span>                  <span class="token comment"># 最大线程数，默认cpu核数</span>
      <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">4000</span>                  <span class="token comment"># 队列容量，默认1024</span>
      <span class="token key atrule">rejectedHandlerType</span><span class="token punctuation">:</span> CallerRunsPolicy          <span class="token comment"># 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy</span>
      <span class="token key atrule">keepAliveTime</span><span class="token punctuation">:</span> <span class="token number">60</span>                              <span class="token comment"># 空闲线程等待超时时间，默认60</span>
      <span class="token key atrule">threadNamePrefix</span><span class="token punctuation">:</span> test                         <span class="token comment"># 线程名前缀，默认dtp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),p=[o];function c(i,l){return n(),t("div",null,p)}const m=e(s,[["render",c],["__file","mode.html.vue"]]),d=JSON.parse('{"path":"/guide/use/mode.html","title":"线程池模式","lang":"zh-CN","frontmatter":{"title":"线程池模式","icon":"mode","order":1,"author":"yanhom","date":"2022-06-11T00:00:00.000Z","tag":["线程池模式","dynamictp"],"sticky":true,"star":true,"description":"线程池模式 目前框架提供如下 5 种线程池模式，可以根据业务场景选择合适的线程池模式 线程池模式 common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待 eager 模式：对应线程池 ...","head":[["meta",{"property":"og:url","content":"https://gitee.com/dromara/dynamic-tp/guide/use/mode.html"}],["meta",{"property":"og:site_name","content":"dynamictp"}],["meta",{"property":"og:title","content":"线程池模式"}],["meta",{"property":"og:description","content":"线程池模式 目前框架提供如下 5 种线程池模式，可以根据业务场景选择合适的线程池模式 线程池模式 common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待 eager 模式：对应线程池 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T15:33:45.000Z"}],["meta",{"property":"article:author","content":"yanhom"}],["meta",{"property":"article:tag","content":"线程池模式"}],["meta",{"property":"article:tag","content":"dynamictp"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T15:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T15:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yanhom\\"}]}"]]},"headers":[{"level":3,"title":"线程池模式","slug":"线程池模式","link":"#线程池模式","children":[]},{"level":3,"title":"模式设定","slug":"模式设定","link":"#模式设定","children":[]}],"git":{"createdTime":1712672180000,"updatedTime":1742052825000,"contributors":[{"name":"yanhom","email":"yanhom1314@foxmail.com","commits":4}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"guide/use/mode.md","localizedDate":"2022年6月11日","autoDesc":true,"excerpt":"<h3>线程池模式</h3>\\n<p>目前框架提供如下 5 种线程池模式，可以根据业务场景选择合适的线程池模式</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">线程池模式</p>\\n<ul>\\n<li>\\n<p>common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待</p>\\n</li>\\n<li>\\n<p>eager 模式：对应线程池 EagerDtpExecutor，eager 模式适用于 IO 密集型场景，在线程池没达到设置的最大值之前优先创建新线程执行任务而不是放入队列等待，比如 tomcat 线程池、dubbo 线程池都是采用这种模式</p>\\n</li>\\n<li>\\n<p>ordered 模式：对应线程池 OrderedDtpExecutor，适用于需要保证任务有序执行的场景，比如消费消息队列消息，需保证同一 uid 的消息按序消费</p>\\n</li>\\n<li>\\n<p>priority 模式：对应线程池 PriorityDtpExecutor，适用于需要根据任务优先级执行的场景，比如优先级高的任务先执行</p>\\n</li>\\n<li>\\n<p>scheduled 模式：对应线程池 ScheduledDtpExecutor，适用于定时任务场景</p>\\n</li>\\n</ul>\\n</div>"}');export{m as comp,d as data};
