import{_ as s}from"./prometheus-BrOwumHk.js";import{_ as o,r as p,o as i,c as r,b as a,d as n,a as c,e}from"./app-B8gNu4K5.js";const l="/images/dynamictp/monitor1.jpg",m="/images/dynamictp/monitor2.jpg",u="/images/dynamictp/monitor3.jpg",d="/images/dynamictp/grafana_datasource.png",g={},k=e(`<h3 id="集成步骤" tabindex="-1"><a class="header-anchor" href="#集成步骤"><span>集成步骤</span></a></h3><p>这块要讲的是集成 prometheus+grafana 做监控，事先你得安装好 prometheus+grafana，这个就不展开讲了，网上教程很多，测试使用可以直接用 docker 安装，非常简单，安装完之后接着往下看。</p><ol><li>首先线程池配置文件中开启 micrometer 数据采集</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>   <span class="token key atrule">enabledCollect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
   <span class="token key atrule">collectorTypes</span><span class="token punctuation">:</span> micrometer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>项目中引入 micrometer-prometheus 依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>开启 prometheus 指标采集端点</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">metrics</span><span class="token punctuation">:</span>
    <span class="token key atrule">export</span><span class="token punctuation">:</span>
      <span class="token key atrule">prometheus</span><span class="token punctuation">:</span> 
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>   <span class="token comment"># 测试使用，线上不要用*，按需开启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),y={start:"4"},h={href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;prometheus&#39;</span>
    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">&#39;/actuator/prometheus&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;192.168.2.104:9098&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>job 配置后 prometheus 管理台看到如下图所示，说明已经开始正常采集指标配置</p><figure><img src="`+s+'" alt="采集指标" tabindex="0" loading="lazy"><figcaption>采集指标</figcaption></figure><ol start="5"><li>然后就是配置 grafana 数据可视化，配置如下图，需要该 pannel 配置 Json 的可以加我发你，到这里监控就搭建起来了，其实也很简单，然后就可以实时监控线程池数据指标变动了</li></ol><p><img src="'+l+'" alt="监控数据1" loading="lazy"><img src="'+m+'" alt="监控数据2" loading="lazy"><img src="'+u+'" alt="监控数据3" loading="lazy"></p><ol start="6"><li>如果没显示监控数据，可以重新编辑下每个 pannel 的数据源</li></ol><figure><img src="'+d+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>',7);function f(_,b){const t=p("ExternalLinkIcon");return i(),r("div",null,[k,a("ol",y,[a("li",null,[n("配置 prometheus 数据采集 job，这块可以去了解下他的 SD 机制（Service Discovery），也就是自动到注册中心发现服务，看你所用的注册中心支不支持这种方式，"),a("a",h,[n("可以去官网查看"),c(t)]),n("，k8s，ZK，Eureka、Consul 等都是支持的。这里使用 static_configs 方式，简单的指定地址的静态配置")])]),v])}const j=o(g,[["render",f],["__file","prometheus_grafana.html.vue"]]),z=JSON.parse('{"path":"/guide/monitor/prometheus_grafana.html","title":"prometheus+grafana 接入流程","lang":"zh-CN","frontmatter":{"title":"prometheus+grafana 接入流程","icon":"grafana","order":1,"author":"yanhom","date":"2022-06-11T00:00:00.000Z","tag":["micrometer接入流程","prometheus+grafana 接入流程","dynamictp"],"sticky":true,"star":true,"description":"集成步骤 这块要讲的是集成 prometheus+grafana 做监控，事先你得安装好 prometheus+grafana，这个就不展开讲了，网上教程很多，测试使用可以直接用 docker 安装，非常简单，安装完之后接着往下看。 首先线程池配置文件中开启 micrometer 数据采集 项目中引入 micrometer-prometheus 依赖 ...","head":[["meta",{"property":"og:url","content":"https://gitee.com/dromara/dynamic-tp/guide/monitor/prometheus_grafana.html"}],["meta",{"property":"og:site_name","content":"dynamictp"}],["meta",{"property":"og:title","content":"prometheus+grafana 接入流程"}],["meta",{"property":"og:description","content":"集成步骤 这块要讲的是集成 prometheus+grafana 做监控，事先你得安装好 prometheus+grafana，这个就不展开讲了，网上教程很多，测试使用可以直接用 docker 安装，非常简单，安装完之后接着往下看。 首先线程池配置文件中开启 micrometer 数据采集 项目中引入 micrometer-prometheus 依赖 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitee.com/dromara/dynamic-tp/images/dynamictp/prometheus.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-15T15:33:45.000Z"}],["meta",{"property":"article:author","content":"yanhom"}],["meta",{"property":"article:tag","content":"micrometer接入流程"}],["meta",{"property":"article:tag","content":"prometheus+grafana 接入流程"}],["meta",{"property":"article:tag","content":"dynamictp"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T15:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"prometheus+grafana 接入流程\\",\\"image\\":[\\"https://gitee.com/dromara/dynamic-tp/images/dynamictp/prometheus.png\\",\\"https://gitee.com/dromara/dynamic-tp/images/dynamictp/monitor1.jpg\\",\\"https://gitee.com/dromara/dynamic-tp/images/dynamictp/monitor2.jpg\\",\\"https://gitee.com/dromara/dynamic-tp/images/dynamictp/monitor3.jpg\\",\\"https://gitee.com/dromara/dynamic-tp/images/dynamictp/grafana_datasource.png\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-15T15:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yanhom\\"}]}"]]},"headers":[{"level":3,"title":"集成步骤","slug":"集成步骤","link":"#集成步骤","children":[]}],"git":{"createdTime":1677489312000,"updatedTime":1742052825000,"contributors":[{"name":"yanhom","email":"yanhom1314@foxmail.com","commits":12}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"guide/monitor/prometheus_grafana.md","localizedDate":"2022年6月11日","autoDesc":true,"excerpt":"<h3>集成步骤</h3>\\n<p>这块要讲的是集成 prometheus+grafana 做监控，事先你得安装好 prometheus+grafana，这个就不展开讲了，网上教程很多，测试使用可以直接用 docker 安装，非常简单，安装完之后接着往下看。</p>\\n<ol>\\n<li>首先线程池配置文件中开启 micrometer 数据采集</li>\\n</ol>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code>   <span class=\\"token key atrule\\">enabledCollect</span><span class=\\"token punctuation\\">:</span> <span class=\\"token boolean important\\">true</span>\\n   <span class=\\"token key atrule\\">collectorTypes</span><span class=\\"token punctuation\\">:</span> micrometer\\n</code></pre></div>"}');export{j as comp,z as data};
