const f=(e,t)=>{const r=t>0?e.src.charAt(t-1):"",i=t+1<=e.posMax?e.src.charAt(t+1):"";return{canOpen:i!==" "&&i!=="	",canClose:!(r===" "||r==="	"||/[0-9]/u.exec(i))}},h=(e,t)=>{let r,i,s,l;if(e.src[e.pos]!=="$")return!1;if(s=f(e,e.pos),!s.canOpen)return t||(e.pending+="$"),e.pos+=1,!0;const c=e.pos+1;for(r=c;(r=e.src.indexOf("$",r))!==-1;){for(i=r-1;e.src[i]==="\\";)i-=1;if((r-i)%2===1)break;r+=1}return r===-1?(t||(e.pending+="$"),e.pos=c,!0):r-c===0?(t||(e.pending+="$$"),e.pos=c+1,!0):(s=f(e,r),s.canClose?(t||(l=e.push("math_inline","math",0),l.markup="$",l.content=e.src.slice(c,r)),e.pos=r+1,!0):(t||(e.pending+="$"),e.pos=c,!0))},$=(e,t,r,i)=>{let s,l,c,u,n=!1,o=e.bMarks[t]+e.tShift[t],a=e.eMarks[t];if(o+2>a||e.src.slice(o,o+2)!=="$$")return!1;if(o+=2,s=e.src.slice(o,a),i)return!0;for(s.trim().endsWith("$$")&&(s=s.trim().slice(0,-2),n=!0),c=t;!n&&(c+=1,!(c>=r||(o=e.bMarks[c]+e.tShift[c],a=e.eMarks[c],o<a&&e.tShift[c]<e.blkIndent)));)e.src.slice(o,a).trim().endsWith("$$")&&(u=e.src.slice(0,a).lastIndexOf("$$"),l=e.src.slice(o,u),n=!0);e.line=c+1;const p=e.push("math_block","math",0);return p.block=!0,p.content=(s!=null&&s.trim()?`
${s}
`:`
`)+e.getLines(t+1,c,e.tShift[t],!0)+(l!=null&&l.trim()?l:""),p.map=[t,e.line],p.markup="$$",!0},m=(e,t)=>{const{render:r}=t||{};if(typeof r!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');e.inline.ruler.after("escape","math_inline",h),e.block.ruler.after("blockquote","math_block",$,{alt:["paragraph","reference","blockquote","list"]}),e.renderer.rules.math_inline=(i,s)=>r(i[s].content,!1),e.renderer.rules.math_block=(i,s)=>r(i[s].content,!0)};export{m as tex};
//# sourceMappingURL=index.mjs.map
