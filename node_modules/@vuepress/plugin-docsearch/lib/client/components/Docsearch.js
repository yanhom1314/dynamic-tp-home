<<<<<<< HEAD
// @ts-ignore: docsearch type issue
import docsearch from '@docsearch/js';
import { usePageLang, useRouteLocale } from '@vuepress/client';
import { isArray } from '@vuepress/shared';
import { computed, defineComponent, h, onMounted, watch } from 'vue';
import { useDocsearchShim } from '../composables';
import '@docsearch/css';
export const Docsearch = defineComponent({
    name: 'Docsearch',
    props: {
        options: {
            type: Object,
            required: true,
        },
    },
    setup(props) {
        const routeLocale = useRouteLocale();
        const lang = usePageLang();
        const docsearchShim = useDocsearchShim();
        // resolve docsearch props for current locale
        const propsLocale = computed(() => {
            var _a;
            return ({
                ...props.options,
                ...(_a = props.options.locales) === null || _a === void 0 ? void 0 : _a[routeLocale.value],
            });
        });
        const facetFilters = [];
        const initialize = () => {
            var _a, _b;
            const rawFacetFilters = (_b = (_a = propsLocale.value.searchParameters) === null || _a === void 0 ? void 0 : _a.facetFilters) !== null && _b !== void 0 ? _b : [];
            facetFilters.splice(0, facetFilters.length, `lang:${lang.value}`, ...(isArray(rawFacetFilters) ? rawFacetFilters : [rawFacetFilters]));
            docsearch({
                ...docsearchShim,
                ...propsLocale.value,
                container: '#docsearch-container',
                searchParameters: {
                    ...propsLocale.value.searchParameters,
                    facetFilters,
                },
            });
        };
        onMounted(() => {
            initialize();
            // re-initialize if the options is changed
            watch([routeLocale, propsLocale], ([curRouteLocale, curPropsLocale], [prevRouteLocale, prevPropsLocale]) => {
                if (curRouteLocale === prevRouteLocale)
                    return;
                if (JSON.stringify(curPropsLocale) !== JSON.stringify(prevPropsLocale)) {
                    initialize();
                }
            });
            // modify the facetFilters in place to avoid re-initializing docsearch
            // when page lang is changed
            watch(lang, (curLang, prevLang) => {
                if (curLang !== prevLang) {
                    const prevIndex = facetFilters.findIndex((item) => item === `lang:${prevLang}`);
                    if (prevIndex > -1) {
                        facetFilters.splice(prevIndex, 1, `lang:${curLang}`);
                    }
                }
            });
        });
        return () => h('div', { id: 'docsearch-container' });
=======
import { usePageLang, useRouteLocale } from '@vuepress/client';
import { computed, defineComponent, h, onMounted, ref, watch, } from 'vue';
import { useDocsearchHotkeyListener, useDocsearchShim, } from '../composables/index.js';
import { getFacetFilters, getSearchButtonTemplate, pollToOpenDocsearch, preconnectToAlgolia, } from '../utils/index.js';
const optionsDefault = __DOCSEARCH_OPTIONS__;
if (__DOCSEARCH_INJECT_STYLES__) {
    import('@docsearch/css');
    import('../styles/docsearch.css');
}
export const Docsearch = defineComponent({
    name: 'Docsearch',
    props: {
        containerId: {
            type: String,
            required: false,
            default: 'docsearch-container',
        },
        options: {
            type: Object,
            required: false,
            default: () => optionsDefault,
        },
    },
    setup(props) {
        const docsearchShim = useDocsearchShim();
        const lang = usePageLang();
        const routeLocale = useRouteLocale();
        const hasInitialized = ref(false);
        const hasTriggered = ref(false);
        // resolve docsearch options for current locale
        const options = computed(() => ({
            ...props.options,
            ...props.options.locales?.[routeLocale.value],
        }));
        /**
         * Import docsearch js and initialize
         */
        const initialize = async () => {
            const { default: docsearch } = await import('@docsearch/js');
            // @ts-expect-error: https://github.com/microsoft/TypeScript/issues/50690
            docsearch({
                ...docsearchShim,
                ...options.value,
                container: `#${props.containerId}`,
                searchParameters: {
                    ...options.value.searchParameters,
                    facetFilters: getFacetFilters(options.value.searchParameters?.facetFilters, lang.value),
                },
            });
            // mark as initialized
            hasInitialized.value = true;
        };
        /**
         * Trigger docsearch initialization and open it
         */
        const trigger = () => {
            if (hasTriggered.value || hasInitialized.value)
                return;
            // mark as triggered
            hasTriggered.value = true;
            // initialize and open
            initialize();
            pollToOpenDocsearch();
            // re-initialize when route locale changes
            watch(routeLocale, initialize);
        };
        // trigger when hotkey is pressed
        useDocsearchHotkeyListener(trigger);
        // preconnect to algolia
        onMounted(() => preconnectToAlgolia(options.value.appId));
        return () => [
            h('div', {
                id: props.containerId,
                style: { display: hasInitialized.value ? 'block' : 'none' },
            }),
            hasInitialized.value
                ? null
                : h('div', {
                    onClick: trigger,
                    innerHTML: getSearchButtonTemplate(options.value.translations?.button),
                }),
        ];
>>>>>>> 03ef6cad3f93dc6257662fb281527b6317cecbc8
    },
});
