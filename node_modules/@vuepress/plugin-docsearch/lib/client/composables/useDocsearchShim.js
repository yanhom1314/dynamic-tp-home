<<<<<<< HEAD
import { useSiteData } from '@vuepress/client';
import { resolveRoutePathFromUrl } from '@vuepress/shared';
import { createElement } from 'preact';
=======
import { resolveRoutePathFromUrl } from '@vuepress/shared';
>>>>>>> 03ef6cad3f93dc6257662fb281527b6317cecbc8
import { debounce } from 'ts-debounce';
import { useRouter } from 'vue-router';
const isSpecialClick = (event) => event.button === 1 ||
    event.altKey ||
    event.ctrlKey ||
    event.metaKey ||
    event.shiftKey;
/**
 * Get docsearch options to be compatible with VuePress
 */
export const useDocsearchShim = () => {
    const router = useRouter();
<<<<<<< HEAD
    const site = useSiteData();
    return {
        // transform full url to route path
        transformItems: (items) => items.map((item) => ({
            ...item,
            // the `item.url` is full url with protocol and hostname
            // so we have to transform it to vue-router path
            url: resolveRoutePathFromUrl(item.url, site.value.base),
        })),
        // render the hit component with custom `onClick` handler
        hitComponent: ({ hit, children }) => createElement('a', {
            href: hit.url,
            // handle `onClick` by `router.push`
            onClick: (event) => {
                if (isSpecialClick(event)) {
                    return;
                }
                event.preventDefault();
                router.push(hit.url);
            },
        }, children),
=======
    return {
        // render the hit component with custom `onClick` handler
        hitComponent: ({ hit, children }) => ({
            type: 'a',
            ref: undefined,
            constructor: undefined,
            key: undefined,
            props: {
                href: hit.url,
                // handle `onClick` by `router.push`
                onClick: (event) => {
                    if (isSpecialClick(event)) {
                        return;
                    }
                    event.preventDefault();
                    router.push(resolveRoutePathFromUrl(hit.url, __DOCSEARCH_INDEX_BASE__));
                },
                children,
            },
            __v: null,
        }),
>>>>>>> 03ef6cad3f93dc6257662fb281527b6317cecbc8
        // navigation behavior triggered by `onKeyDown` internally
        navigator: {
            // when pressing Enter without metaKey
            navigate: ({ itemUrl }) => {
<<<<<<< HEAD
                router.push(itemUrl);
=======
                router.push(resolveRoutePathFromUrl(itemUrl, __DOCSEARCH_INDEX_BASE__));
>>>>>>> 03ef6cad3f93dc6257662fb281527b6317cecbc8
            },
        },
        // add search debounce
        transformSearchClient: (searchClient) => {
            const searchWithDebounce = debounce(searchClient.search, 500);
            return {
                ...searchClient,
                search: async (...args) => searchWithDebounce(...args),
            };
        },
    };
};
