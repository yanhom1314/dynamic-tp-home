import{getDirname as k,path as m,fs as A}from"@vuepress/utils";import{watch as b}from"chokidar";import{getBundlerName as F,mergeViteConfig as L,Logger as M,checkVersion as N}from"vuepress-shared/node";import{isString as x,isFunction as I}from"@vuepress/shared";const B=(t,s,e)=>{var a,l,f;const p=F(s);if(p==="vite"){const n=t,r=(f=(l=(a=n.viteOptions)==null?void 0:a.css)==null?void 0:l.preprocessorOptions)==null?void 0:f.scss.additionalData;n.viteOptions=L(n.viteOptions||{},{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(u,o)=>{const c=x(r)?`${r}${u}`:I(r)?await r(u,o):u;return c.match(new RegExp(`@use\\s+["']@sass-palette\\/${e}-config["'];`))?c:`@use "@sass-palette/${e}-config";
${c}`}}}}})}else if(p==="webpack"){const n=t;n.scss||(n.scss={});const{additionalData:r}=n.scss,u=(o,c)=>{const i=x(r)?`${r}${o}`:I(r)?r(o,c):o;return i.match(new RegExp(`@use\\s+(["'])@sass-palette\\/${e}-config\\1;`))?i:`@use "@sass-palette/${e}-config";
${i}`};n.scss.additionalData=u}},R=k(import.meta.url),V=m.resolve(R,"../../styles/empty.scss"),S="vuepress-plugin-sass-palette",$=new M(S),d=t=>A.pathExistsSync(t)?t:V,_=(t,s)=>t.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";
export default {};
`),z=(t,s)=>t.writeTemp(`sass-palette/${s}-inject.scss`,`@use "sass:meta";

@use "@sass-palette/helper";
@use "@sass-palette/${s}-palette";

$palette-variables: meta.module-variables("${s}-palette");
${t.env.isDebug?`
@debug "${s} palette variables: #{meta.inspect($palette-variables)}";
@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";
`:""}

@if meta.global-variable-exists("dark-selector", $module: "${s}-config") {
  @include helper.inject($palette-variables, ${s}-config.$dark-selector);
} @else {
  @include helper.inject($palette-variables);
}
`),w=(t,{id:s,defaultConfig:e,defaultPalette:a,generator:l,userConfig:f,userPalette:p})=>t.writeTemp(`sass-palette/${s}-config.scss`,`@import "file:///${d(a)}";
@import "file:///${d(e)}";
@import "file:///${d(p)}";
@import "file:///${d(f)}";
@import "file:///${d(l)}";
`),O=(t,{id:s,defaultPalette:e,generator:a,userPalette:l})=>t.writeTemp(`sass-palette/${s}-palette.scss`,`@import "file:///${d(e)}";
@import "file:///${d(l)}";
@import "file:///${d(a)}";
`),E=(t,{id:s,userStyle:e})=>e?t.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${d(e)}";
`):Promise.resolve(null),v=k(import.meta.url),T=t=>s=>{N(s,S,"2.0.0-beta.61"),s.env.isDebug&&$.info("Options:",t);const{id:e="hope",config:a=`.vuepress/styles/${e}-config.scss`,defaultConfig:l=m.resolve(v,"../../styles/default/config.scss"),palette:f=`.vuepress/styles/${e}-palette.scss`,defaultPalette:p=m.resolve(v,"../../styles/default/palette.scss"),generator:n=m.resolve(v,"../../styles/empty.scss"),style:r=""}=t,u=s.dir.source(a),o=s.dir.source(f),c=r?s.dir.source(r):null;return{name:S,multiple:!0,id:e,alias:{["@sass-palette/helper"]:m.resolve(v,"../../styles/helper.scss"),[`@sass-palette/${e}-config`]:s.dir.temp(`sass-palette/${e}-config.scss`),[`@sass-palette/${e}-inject`]:s.dir.temp(`sass-palette/${e}-inject.scss`),[`@sass-palette/${e}-palette`]:s.dir.temp(`sass-palette/${e}-palette.scss`),...r?{[`@sass-palette/${e}-style`]:s.dir.temp(`sass-palette/${e}-style.scss`)}:{}},extendsBundlerOptions:(i,g)=>{B(i,g,e)},onInitialized:()=>Promise.all([z(s,e),w(s,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:o}),O(s,{id:e,defaultPalette:p,generator:n,userPalette:o}),E(s,{id:e,userStyle:c})]).then(()=>{s.env.isDebug&&$.info(`Style file for ${e} generated`)}),onWatched:(i,g)=>{const P=b(u,{cwd:i.dir.source(),ignoreInitial:!0}),C=()=>w(i,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:o}).then(()=>{i.env.isDebug&&$.info(`Style file for ${e} updated`)});P.on("add",()=>{C()}),P.on("unlink",()=>{C()}),g.push(P);const y=b(o,{cwd:i.dir.source(),ignoreInitial:!0}),D=()=>Promise.all([w(i,{id:e,defaultConfig:l,defaultPalette:p,generator:n,userConfig:u,userPalette:o}),O(i,{id:e,defaultPalette:p,generator:n,userPalette:o})]).then(()=>{i.env.isDebug&&$.info(`Style file for ${e} updated`)});if(y.on("add",()=>{D()}),y.on("unlink",()=>{D()}),g.push(y),c){const h=b(c,{cwd:i.dir.source(),ignoreInitial:!0}),j=()=>E(i,{id:e,userStyle:c}).then(()=>{i.env.isDebug&&$.info(`Style file for ${e} updated`)});h.on("add",()=>{j()}),h.on("unlink",()=>{j()}),g.push(h)}},clientConfigFile:i=>_(i,e)}},G=(t,s)=>{const{plugins:e}=t.pluginApi;e.filter(a=>a.name==="vuepress-plugin-sass-palette").every(a=>a.id!==s.id)&&t.use(T(s))},U=(t,s)=>{const{plugins:e}=t.pluginApi,a=e.filter(l=>l.name==="vuepress-plugin-sass-palette").findIndex(l=>l.id===s);a!==-1&&t.pluginApi.plugins.splice(a,1)};export{U as removePalettePlugin,T as sassPalettePlugin,G as useSassPalettePlugin};
//# sourceMappingURL=index.js.map
