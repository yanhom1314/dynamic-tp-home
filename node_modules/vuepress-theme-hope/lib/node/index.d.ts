import { ThemeFunction, App, Plugin, Page, PluginObject, PluginConfig } from '@vuepress/core';
import { T as ThemeOptions, H as HopeThemeBehaviorOptions, a as ThemePageFrontmatter, N as NavbarOptions, S as SidebarOptions, b as SidebarArrayOptions, c as SidebarObjectOptions, E as EncryptOptions, d as EncryptConfig, e as ThemeData, B as BlogPluginOptions, f as ThemeNormalPageFrontmatter, A as ArticleInfo, g as ThemePageData, P as PluginsOptions, h as SidebarSorter, i as SidebarInfo, j as SidebarSorterFunction } from './index-9e4d6c76.js';
export { ad as AppearanceConfig, ab as AppearanceLocaleData, ac as AppearanceOptions, Z as ArticleInfoType, aT as AutoLinkOptions, ah as BlogLocaleConfig, ae as BlogLocaleData, ag as BlogLocaleOptions, a9 as DarkmodeOptions, ap as DocsRepoLocaleOptions, ai as EncryptLocaleData, an as FeatureConfig, al as FeatureLocaleConfig, aj as FeatureLocaleData, ak as FeatureLocaleOptions, am as FeatureOptions, ao as FooterLocaleOptions, aG as InfoOptions, aA as LayoutConfig, ay as LayoutLocaleConfig, aw as LayoutLocaleData, ax as LayoutLocaleOptions, az as LayoutOptions, ar as MetaLocaleOptions, aq as MetaLocateData, a6 as NavGroup, at as NavbarComponent, a8 as NavbarGroup, a7 as NavbarItem, au as NavbarLayoutOptions, as as NavbarLocaleData, av as NavbarLocaleOptions, aa as OutlookLocaleData, a5 as PageInfo, _ as PageType, af as PaginationLocaleData, aL as PrismjsDarkTheme, aK as PrismjsLightTheme, aN as PrismjsOptions, aM as PrismjsTheme, aB as RouteLocaleData, aD as SidebarDirInfo, aC as SidebarFileInfo, aQ as SidebarGroupItem, aR as SidebarItem, aF as SidebarLocaleOptions, aO as SidebarPageItem, aE as SidebarSorterKeyword, aP as SidebarStructureItem, aS as TextItemOptions, a0 as ThemeBlogHomePageFrontmatter, $ as ThemeBlogHomeProjectOptions, J as ThemeBlogPluginHelper, K as ThemeCommentPluginHelper, L as ThemeCopyCodePluginHelper, M as ThemeCopyrightPluginHelper, O as ThemeFeedPluginHelper, Q as ThemeGitPluginHelper, aJ as ThemeLocaleConfig, aH as ThemeLocaleData, aI as ThemeLocaleOptions, R as ThemeMdEnhancePluginHelper, D as ThemeNavbarHelper, V as ThemePWAPluginHelper, U as ThemePhotoSwipePluginHelper, a1 as ThemeProjectHomeActionOptions, a2 as ThemeProjectHomeFeatureItemOptions, a3 as ThemeProjectHomeFeatureOptions, a4 as ThemeProjectHomePageFrontmatter, W as ThemeReadingTimePluginHelper, X as ThemeSEOPluginHelper, G as ThemeSidebarArrayHelper, F as ThemeSidebarHelper, I as ThemeSidebarObjectHelper, Y as ThemeSitemapPluginHelper, k as arraySidebar, l as blog, m as comment, p as copyCode, q as copyright, r as feed, t as git, u as mdEnhance, n as navbar, o as objectSidebar, v as photoSwipe, w as pwa, x as readingTime, y as seo, s as sidebar, z as sitemap, C as themeLocalesData } from './index-9e4d6c76.js';
import { UserConfig } from '@vuepress/cli';
import { AutoCatalogOptions } from 'vuepress-plugin-auto-catalog';
import { GitData } from '@vuepress/plugin-git';
import { BlogCategoryOptions, BlogTypeOptions } from 'vuepress-plugin-blog2';
import { CommentOptions } from 'vuepress-plugin-comment2';
import { ComponentOptions } from 'vuepress-plugin-components';
import { CopyCodeOptions } from 'vuepress-plugin-copy-code2';
import { CopyrightOptions } from 'vuepress-plugin-copyright2';
import { FeedOptions } from 'vuepress-plugin-feed2';
import { MarkdownEnhanceOptions } from 'vuepress-plugin-md-enhance';
import { PhotoSwipeOptions } from 'vuepress-plugin-photo-swipe';
import { PWAOptions } from 'vuepress-plugin-pwa2';
import { SitemapOptions } from 'vuepress-plugin-sitemap2';
import 'vuepress-plugin-reading-time2';
import 'vuepress-shared';
import '@vuepress/plugin-theme-data';
import 'vuepress-plugin-seo2';
import '@vuepress/shared';

declare const hopeTheme: (options: ThemeOptions, behavior?: HopeThemeBehaviorOptions | boolean) => ThemeFunction;

/**
 * @deprecated You should use V2 standard frontmatter and avoid using it
 */
declare const convertFrontmatter: (frontmatter: Record<string, unknown>, filePathRelative?: string | null) => ThemePageFrontmatter & Record<string, unknown>;

/**
 * @deprecated use `import { navbar } from "vuepress-theme-hope";` instead
 */
declare const navbarConfig: (config: NavbarOptions) => NavbarOptions;
/**
 * @deprecated use `import { arraySidebar } from "vuepress-theme-hope";` instead
 */
declare const sidebarConfig: (config: SidebarOptions) => SidebarOptions;
/**
 * @deprecated use `import { hopeThemeLegacy } from "vuepress-theme-hope";` instead
 */
declare const themeConfig: (themeConfig: ThemeOptions) => ThemeOptions;
/**
 * @deprecated import and use `hopeTheme` instead
 */
declare const config: (userConfig: Record<string, unknown>) => UserConfig;

/**
 * @deprecated use `import { navbar } from "vuepress-theme-hope";` instead
 */
declare const defineNavbarConfig: (config: NavbarOptions) => NavbarOptions;
/**
 * @deprecated use `import { sidebar } from "vuepress-theme-hope";` instead
 */
declare const defineSidebarConfig: (config: SidebarOptions) => SidebarOptions;
/**
 * @deprecated use `import { arraySidebar } from "vuepress-theme-hope";` instead
 */
declare const defineSidebarArrayConfig: (config: SidebarArrayOptions) => SidebarArrayOptions;
/**
 * @deprecated use `import { objectSidebar } from "vuepress-theme-hope";` instead
 */
declare const defineSidebarObjectConfig: (config: SidebarObjectOptions) => SidebarObjectOptions;
/**
 * @deprecated use `import { hopeThemeLegacy } from "vuepress-theme-hope";` instead
 */
declare const defineThemeConfig: (themeConfig: ThemeOptions) => ThemeOptions;
/**
 * @deprecated import and use `hopeTheme` instead
 */
declare const defineHopeConfig: (config: UserConfig & Record<string, unknown>) => UserConfig;

/**
 * @deprecated You should use V2 standard navbar config and avoid using it
 */
declare const convertNavbarOptions: (config: NavbarOptions | unknown) => NavbarOptions | false;

/**
 * @deprecated You should use V2 standard sidebar config and avoid using it
 */
declare const convertSidebarOptions: (config: SidebarOptions | unknown) => SidebarOptions | false;

/**
 * @deprecated You should use scss style files in v2 and avoid using it
 */
declare const checkLegacyStyle: (app: App) => void;

/**
 * @deprecated You should use V2 standard options and avoid using it
 */
declare const convertThemeOptions: (themeOptions: Record<string, unknown>) => ThemeOptions;

/**
 * @private
 */
declare const getAlias: (isDebug: boolean) => Record<string, string>;

/**
 * Add tags as customElement
 *
 * @param bundlerOptions VuePress Bundler config
 * @param app VuePress Node App
 * @param customElements tags recognized as custom element
 */
declare const checkTag: (bundlerOptions: unknown, app: App) => void;
/**
 * @private
 */
declare const extendsBundlerOptions: (bundlerOptions: unknown, app: App) => void;

/** @private */
declare const getEncryptConfig: (encrypt?: EncryptOptions) => EncryptConfig;

/** @private */
declare const checkSocialMediaIcons: (themeData: ThemeData) => Record<string, string>;

interface ThemeStatus {
    enableBlog: boolean;
    enableEncrypt: boolean;
    enableSlide: boolean;
    enableReadingTime: boolean;
    blogType: {
        key: string;
        path: string;
    }[];
    hasMultipleLanguages: boolean;
    supportPageview: boolean;
}
/** @private */
declare const getStatus: (app: App, themeOptions: ThemeOptions) => ThemeStatus;

/**
 * @private
 *
 * Get client-side `themeData`
 */
declare const getThemeData: (app: App, themeOptions: ThemeOptions, { enableBlog }: ThemeStatus) => ThemeData;

/**
 * @private
 *
 * Resolve options for @vuepress/plugin-active-header-links
 */
declare const getActiveHeaderLinksPlugin: (activeHeaderLinks?: boolean) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-auto-catalog
 */
declare const getAutoCatalogPlugin: (autoCatalog?: AutoCatalogOptions | boolean) => Plugin | null;

/** @private */
declare const getBlogPlugin: (app: App, themeData: ThemeData, options?: BlogPluginOptions | boolean, hotReload?: boolean) => Plugin | null;

/** @private */
declare const getBlogCategoryCategory: (options: BlogPluginOptions, themeData: ThemeData) => BlogCategoryOptions<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>;
/** @private */
declare const getBlogTagCategory: (options: BlogPluginOptions, themeData: ThemeData) => BlogCategoryOptions<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>;

/** @private */
declare const blogFilter: ({ frontmatter, filePathRelative, }: Page<ThemePageData>) => boolean;

/** @private */
declare const injectBlogBasicInfo: (page: Page<ThemePageData>, info: Record<string, unknown>) => void;

/** @private */
declare const getBlogArticleType: (options: BlogPluginOptions, themeData: ThemeData) => BlogTypeOptions<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>;
/** @private */
declare const getBlogStarType: (options: BlogPluginOptions, themeData: ThemeData) => BlogTypeOptions<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>;
/** @private */
declare const getBlogTimelineType: (options: BlogPluginOptions, themeData: ThemeData) => BlogTypeOptions<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>;

/** @private */
declare const defaultPageSorter: (pageA: Page<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>, pageB: Page<{
    git: GitData;
}, ThemeNormalPageFrontmatter, {
    routeMeta: ArticleInfo;
}>) => number;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-comment2
 */
declare const getCommentPlugin: (options?: Partial<CommentOptions> | false, legacy?: boolean) => PluginObject | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-components
 */
declare const getComponentsPlugin: (options: Pick<ThemeOptions, "backToTop" | "hostname" | "hotReload" | "iconAssets" | "iconPrefix">, { components, componentOptions, rootComponents, }?: ComponentOptions, legacy?: boolean) => Plugin;

/**
 * @private
 *
 * Get theme plugins
 */
declare const getPluginConfig: (app: App, plugins: PluginsOptions, themeData: ThemeData, options: Pick<ThemeOptions, "backToTop" | "hostname" | "hotReload" | "iconAssets" | "iconPrefix" | "favicon">, legacy?: boolean) => PluginConfig;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-copy-code2
 */
declare const getCopyCodePlugin: (options?: CopyCodeOptions | false) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-copyright
 */
declare const getCopyrightPlugin: (themeData: ThemeData, options?: Partial<CopyrightOptions> | boolean, hostname?: string) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-feed2
 */
declare const getFeedPlugin: (themeData: ThemeData, options?: Omit<FeedOptions, "hostname">, hostname?: string, favicon?: string, legacy?: boolean) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-md-enhance
 */
declare const getMdEnhancePlugin: (options?: Partial<MarkdownEnhanceOptions> | false, legacy?: boolean) => Plugin | null;

/**
 * @private
 *
 * Inject basic page info
 */
declare const injectPageInfo: (page: Page<ThemePageData>) => void;
declare const extendsPagePlugin: (themeData: ThemeData, behavior: HopeThemeBehaviorOptions) => PluginObject;
declare const useExtendsPagePlugin: (app: App, themeData: ThemeData, behavior: HopeThemeBehaviorOptions) => void;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-photo-swipe
 */
declare const getPhotoSwipePlugin: (options?: PhotoSwipeOptions | boolean) => Plugin | null;

/**
 * @private
 *
 * Composition Api to use `@vuepress/plugin-prismjs`
 */
declare const usePrismPlugin: (app: App) => void;
/**
 * @private
 *
 * Composition Api to remove `@vuepress/plugin-prismjs`
 */
declare const removePrismPlugin: (app: App) => void;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-pwa2
 */
declare const getPWAPlugin: (options?: PWAOptions | boolean, favicon?: string, legacy?: boolean) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-rtl
 */
declare const getRtlPlugin: (themeData: ThemeData) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-seo2
 */
declare const getSEOPlugin: (themeData: ThemeData, { seo }: PluginsOptions, hostname?: string, legacy?: boolean) => Plugin | null;

/**
 * @private
 *
 * Resolve options for vuepress-plugin-sitemap2
 */
declare const getSitemapPlugin: (options?: Omit<SitemapOptions, "hostname"> | boolean, hostname?: string, legacy?: boolean) => Plugin | null;

/**
 * @private
 *
 * Use plugins to ensure they apply first
 */
declare const usePlugin: (app: App, themeData: ThemeData, plugins: PluginsOptions, hotReload: boolean, behavior: HopeThemeBehaviorOptions) => void;

/**
 * @private
 */
declare const prepareConfigFile: (app: App, { enableBlog, enableEncrypt, enableSlide }: ThemeStatus) => Promise<string>;

/**
 * @private
 */
declare const preparePerformanceConfigFile: (app: App, { enableBlog, enableEncrypt, enableSlide }: ThemeStatus) => Promise<string>;

/**
 * @private
 */
declare const prepareHighLighterScss: (app: App, { prismjs }: PluginsOptions) => Promise<void>;

/**
 * @private
 */
declare const getSidebarData: (app: App, themeData: ThemeData, sorter?: SidebarSorter) => SidebarOptions;
/**
 * @private
 */
declare const prepareSidebarData: (app: App, themeData: ThemeData, sorter?: SidebarSorter) => Promise<void>;

declare const sidebarReadmeSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
declare const sidebarOrderSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
declare const sidebarDateSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
declare const sidebarDateDescSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
declare const sidebarFilenameSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
declare const sidebarTitleSorter: (infoA: SidebarInfo, infoB: SidebarInfo) => number;
/** @private */
declare const getSidebarSorter: (sorter?: SidebarSorter) => SidebarSorterFunction[];

interface FileInfo {
    type: "file";
    filename: string;
    path: string;
}
interface DirInfo {
    type: "dir";
    dirname: string;
    path: string;
    children: StructureInfo[];
}
type StructureInfo = DirInfo | FileInfo;
interface ThemeSidebarInfoOptions {
    app: App;
    sorters: SidebarSorterFunction[];
    nestingDepth?: number;
}
/**
 * @private
 */
declare const getStructureInfo: (pages: Page[], scope: string) => StructureInfo[];

/**
 * @private
 */
declare const prepareSocialMediaIcons: (app: App, icons: Record<string, string>) => Promise<void>;

/**
 * @private
 */
declare const prepareThemeColorScss: (app: App, themeData: ThemeData) => Promise<void>;

export { ArticleInfo, BlogPluginOptions, DirInfo, EncryptConfig, EncryptOptions, FileInfo, HopeThemeBehaviorOptions, NavbarOptions, PluginsOptions, SidebarArrayOptions, SidebarInfo, SidebarObjectOptions, SidebarOptions, SidebarSorter, SidebarSorterFunction, StructureInfo, ThemeData, ThemeNormalPageFrontmatter, ThemeOptions, ThemePageData, ThemePageFrontmatter, ThemeSidebarInfoOptions, ThemeStatus, blogFilter, checkLegacyStyle, checkSocialMediaIcons, checkTag, config, convertFrontmatter, convertNavbarOptions, convertSidebarOptions, convertThemeOptions, defaultPageSorter, defineHopeConfig, defineNavbarConfig, defineSidebarArrayConfig, defineSidebarConfig, defineSidebarObjectConfig, defineThemeConfig, extendsBundlerOptions, extendsPagePlugin, getActiveHeaderLinksPlugin, getAlias, getAutoCatalogPlugin, getBlogArticleType, getBlogCategoryCategory, getBlogPlugin, getBlogStarType, getBlogTagCategory, getBlogTimelineType, getCommentPlugin, getComponentsPlugin, getCopyCodePlugin, getCopyrightPlugin, getEncryptConfig, getFeedPlugin, getMdEnhancePlugin, getPWAPlugin, getPhotoSwipePlugin, getPluginConfig, getRtlPlugin, getSEOPlugin, getSidebarData, getSidebarSorter, getSitemapPlugin, getStatus, getStructureInfo, getThemeData, hopeTheme as hope, hopeTheme, injectBlogBasicInfo, injectPageInfo, navbarConfig, prepareConfigFile, prepareHighLighterScss, preparePerformanceConfigFile, prepareSidebarData, prepareSocialMediaIcons, prepareThemeColorScss, removePrismPlugin, sidebarConfig, sidebarDateDescSorter, sidebarDateSorter, sidebarFilenameSorter, sidebarOrderSorter, sidebarReadmeSorter, sidebarTitleSorter, themeConfig, useExtendsPagePlugin, usePlugin, usePrismPlugin };
