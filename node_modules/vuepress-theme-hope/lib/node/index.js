import{isPlainObject as h,isFunction as v,isArray as q,isString as z}from"@vuepress/shared";import{watch as Y}from"chokidar";import{fs as k,path as b,colors as a}from"@vuepress/utils";import{fromEntries as J,endsWith as K}from"vuepress-shared/node";import{C as r,d as g,c as $,l as s,a as x,v as Q,g as T,b as w,e as B,u as E,f as L,h as X,i as Z,p as y,j,k as F,m as A,n as I,T as ee}from"./helpers-57228559.js";import{M as Ge,P as _e,w as Ue,y as qe,W as ze,N as Ye,z as Je,o as Ke,q as Qe,r as Xe,A as Ze,B as eo,$ as oo,a7 as ao,D as no,Q as to,R as so,Y as io,U as ro,S as po,Z as lo,V as mo,_ as go,a0 as uo,a1 as co,a2 as fo,a3 as ho,O as bo,a4 as yo,a5 as Po,ac as So,a9 as $o,ad as Co,ae as ko,ah as vo,ao as xo,af as To,ap as wo,E as Bo,X as Eo,a6 as Lo,F as jo,s as Fo,x as Ao,G as Io,ag as Do,H as Mo,I as No,ab as Vo,J as Oo,t as Wo,al as Ro,ak as Ho,am as Go,aj as _o,ai as Uo,an as qo,K as zo,L as Yo,a8 as Jo,aa as Ko}from"./helpers-57228559.js";import"node:module";import"bcrypt-ts/node";import"@vuepress/plugin-external-link-icon";import"@vuepress/plugin-nprogress";import"@vuepress/plugin-theme-data";import"@vuepress/plugin-active-header-links";import"vuepress-plugin-auto-catalog";import"vuepress-plugin-comment2";import"vuepress-plugin-components";import"vuepress-plugin-copy-code2";import"vuepress-plugin-copyright2";import"vuepress-plugin-feed2";import"vuepress-plugin-md-enhance";import"vuepress-plugin-photo-swipe";import"vuepress-plugin-pwa2";import"vuepress-plugin-rtl";import"vuepress-plugin-seo2";import"vuepress-plugin-sitemap2";import"vuepress-plugin-blog2";import"vuepress-plugin-reading-time2";import"vuepress-plugin-sass-palette";import"@vuepress/plugin-git";import"@vuepress/plugin-prismjs";const D=e=>k.readdirSync(b.resolve(r,e)).filter(o=>K(o,".js")||!o.includes(".")).map(o=>[`@theme-hope/${e}/${o.replace(/\.js$/,"")}`,b.resolve(r,e,o)]),M=e=>k.existsSync(b.resolve(r,e,"index.js"))?[`@theme-hope/${e}/index`,b.resolve(r,e,"index.js")]:null,N=e=>{const o=J([...D("components"),...["composables","utils"].map(M).filter(n=>n!==null),...k.readdirSync(b.resolve(r,"modules")).map(n=>`modules/${n}`).map(n=>[...D(`${n}/components`),...["composables","utils"].map(t=>`${n}/${t}`).map(M).filter(t=>t!==null)]).flat()]);return e&&console.log("Theme alias config:",o),o},oe=e=>(g("defineNavbarConfig",'import { navbar } from "vuepress-theme-hope";'),e),ae=e=>(g("defineSidebarConfig",'import { sidebar } from "vuepress-theme-hope";'),e),ne=e=>(g("defineSidebarArrayConfig",'import { arraySidebar } from "vuepress-theme-hope";'),e),te=e=>(g("defineSidebarObjectConfig",'import { objectSidebar } from "vuepress-theme-hope";'),e),se=e=>(g("defineThemeConfig",'import { hopeThemeLegacy } from "vuepress-theme-hope";'),$(e)),V=e=>(s.warn(`"${a.magenta("defineHopeConfig")}" is ${a.red("deprecated")}, please use the following code instead:

${a.magenta(`import { defineUserConfig } from "vuepress";
import { hopeThemeLegacy } from "vuepress-theme-hope";

export default {
  // site config
  // ...

  theme : hopeThemeLegacy({
    // theme config
    // ...
  }),
};
`)}
`),"themeConfig"in e&&h(e.themeConfig)&&(e.theme=C(e.themeConfig)),v(e.theme)||(e.theme=C({})),e),ie=e=>(g("navbarConfig",'import { navbar } from "vuepress-theme-hope";'),e),re=e=>(g("sidebarConfig",'import { sidebar } from "vuepress-theme-hope";'),e),pe=e=>(g("themeConfig",'import { hopeThemeLegacy } from "vuepress-theme-hope";'),$(e)),le=(e={})=>{"lineNumbers"in e&&(s.warn(`${a.magenta("markdown.lineNumbers")} is ${a.yellow("deprecated")}  in VuePress2, please use ${a.magenta("markdown.code.lineNumbers")} instead.`),e.code=e.code??{},h(e.code)&&(e.code.lineNumbers=e.lineNumbers),delete e.lineNumbers),"slugify"in e&&(s.error(`${a.magenta("markdown.slugify")} is ${a.red("no longer supported")} in VuePress2.
If you want to change the slugify function anyway, set the following options separately:
· ${a.blue("markdown.anchor.slugify")}
· ${a.blue("markdown.toc.slugify")}
· ${a.blue("markdown.extractHeaders.slugify")}
`),delete e.slugify),"pageSuffix"in e&&(s.error(`${a.magenta("markdown.pageSuffix")} is ${a.red("no longer supported")} in VuePress2.`),delete e.pageSuffix),"externalLinks"in e&&(s.error(`${a.magenta("markdown.externalLinks")} is ${a.red("no longer supported")} in VuePress2, please use ${a.magenta("markdown.links.externalAttrs")} instead.`),delete e.externalLinks),"plugins"in e&&(s.error(`${a.magenta("markdown.plugins")} is ${a.red("no longer supported")} in VuePress2, please use ${a.magenta("extendsMarkdown")} hook instead.`),delete e.plugins)},me=e=>q(e)?e.flat().filter(o=>{if(v(o))return!0;if(h(o)){const{name:n}=o;if(!z(n))return s.error(`VuePress2 requires "name" option in plugins and it should strict equal it's package name.`),!1;if(!/^(@.*\/)?vuepress-plugin-/.test(n))return s.error("VuePress2 requires plugin name to strict equal a package name, you should fix it"),!1;[["ready","onPrepared"],["updated","onWatched"],["generated","onGenerated"],["extendMarkdown","extendsMarkdown"],["extendPageData","extendsPage"],["templateSSR","templateBuild"]].forEach(([t,p])=>{t in o&&s.warn(`${a.magenta(t)} options in plugin options is ${a.yellow("deprecated")} in VuePress2, please use ${a.magenta(p)} instead.`),o[p]=o[t],delete o[t]}),["plugins","chainMarkdown","extendsCli","configureWebpack","chainWebpack","beforeDevServer","afterDevServer","additionalPages","clientDynamicModules","enhanceAppFiles","globalUIComponents","clientRootMixin","clientAppEnhanceFiles","clientAppRootComponentFiles","clientAppSetupFiles"].forEach(t=>{t in o&&s.error(`${a.magenta(t)} option in plugin options is ${a.red("no longer supported")} in VuePress2, make sure you are using a VuePress2 plugin.`),delete o[t]})}return!1}):h(e)?(s.error(`${a.magenta('object format "plugins"')} is ${a.red("no longer supported")} in VuePress2, you should import plugins and call them in an array.`),[]):[],de=e=>{["postcss","stylus","scss","sass","less","chainWebpack","configureWebpack","beforeDevServer","afterDevServer","evergreen"].forEach(o=>{o in e&&s.error(`"${a.magenta(o)}" option in config file is ${a.red("no longer supported")} in VuePress2, you should set it in bundler options.`),delete e[o]})},ge=e=>(le(e.markdown),de(e),e.plugins=me(e.plugins),[["ready","onPrepared"],["updated","onWatched"],["generated","onGenerated"],["extendMarkdown","extendsMarkdown"],["extendPageData","extendsPage"],["patterns","pagePatterns"],["templateSSR","templateBuild"]].forEach(([o,n])=>{o in e&&s.warn(`"${o}" option in config file is ${a.yellow("deprecated")} in VuePress2, please use "${n}" instead.`),e[n]=e[o],delete e[o]}),[["chainMarkdown",'please use "extendsMarkdown" instead'],["extendsCli"],["configureWebpack",'please set options in "bundler" instead'],["chainWebpack",'please set options in "bundler" instead'],["additionalPages",'please use "app.pages.push(createPage())" in "onInitialized" hook'],["clientDynamicModules",'please use "app.writeTemp()" in "onPrepared" hook'],["clientAppRootComponentFiles",'please use "clientConfigFile" instead'],["clientAppSetupFiles",'please use "clientConfigFile" instead'],["clientAppEnhanceFiles",'please use "clientConfigFile" instead']].forEach(([o,n=""])=>{o in e&&s.error(`"${o}" option in config is ${a.red("no longer supported")} in VuePress2${n?`, ${n}.`:"."}`),delete e[o]}),"extraWatchFiles"in e&&(s.error(`${a.magenta("extraWatchFiles")} options is ${a.red("removed")} in VuePress2, you should use "onWatched" hook.`),delete e.extraWatchFiles),V(e)),O=(e,{enableBlog:o,enableEncrypt:n,enableSlide:t})=>{const p=[],u=[],f=[],l=[];return o&&(p.push('import BloggerInfo from "@theme-hope/modules/blog/components/BloggerInfo";','import { setupBlog } from "@theme-hope/modules/blog/composables/index";',`import BlogCategory from "${r}modules/blog/layouts/BlogCategory.js";`,`import BlogHome from "${r}modules/blog/layouts/BlogHome.js";`,`import BlogType from "${r}modules/blog/layouts/BlogType.js";`,`import Timeline from "${r}modules/blog/layouts/Timeline.js";`,`import "${r}modules/blog/styles/layout.scss";`),u.push('app.component("BloggerInfo", BloggerInfo);'),f.push("setupBlog();"),l.push("BlogCategory,","BlogHome,","BlogType,","Timeline,")),n&&(p.push('import GlobalEncrypt from "@theme-hope/modules/encrypt/components/GlobalEncrypt";','import LocalEncrypt from "@theme-hope/modules/encrypt/components/LocalEncrypt";'),u.push('app.component("GlobalEncrypt", GlobalEncrypt);','app.component("LocalEncrypt", LocalEncrypt);')),t&&(p.push(`import Slide from "${r}layouts/Slide.js";`),l.push("Slide,")),e.writeTemp("theme-hope/config.js",`import { defineClientConfig } from "@vuepress/client";

import HopeIcon from "@theme-hope/components/HopeIcon";
import Layout from "${r}layouts/Layout.js";
import NotFound from "${r}layouts/NotFound.js";

import { useScrollPromise } from "@theme-hope/composables/index";
import { injectDarkmode, setupDarkmode } from "@theme-hope/modules/outlook/composables/index";
import { setupSidebarItems } from "@theme-hope/modules/sidebar/composables/index";

import "${r}styles/index.scss";

${p.join(`
`)}

export default defineClientConfig({
  enhance: ({ app, router }) => {
    const { scrollBehavior } = router.options;

    router.options.scrollBehavior = async (...args) => {
      await useScrollPromise().wait();

      return scrollBehavior(...args);
    };

    // inject global properties
    injectDarkmode(app);

    // render icon for auto-catalog
    app.component("HopeIcon", HopeIcon);

${u.map(c=>`    ${c}`).join(`
`)}
  },
  setup: () => {
    setupDarkmode();
    setupSidebarItems();
${f.map(c=>`    ${c}`).join(`
`)}
  },
  layouts: {
    Layout,
    NotFound,
${l.map(c=>`    ${c}`).join(`
`)}
  }
});`)},C=(e,o=!0)=>n=>{const t=h(o)?o:o?{compact:!0,check:!0}:{},p=t.debug?n.env.isDebug=!0:!1,{favicon:u,hotReload:f=p,plugins:l={},hostname:c,iconAssets:W,iconPrefix:R,backToTop:H,sidebarSorter:P,...G}=t.compact?$(e):e;t.compact&&x(n),Q(n);const m=T(n,e),d=w(n,G,m),_=m.enableBlog?B(d):{};return E(n,d,l,f,t),p&&console.log("Theme plugin options:",l),{name:"vuepress-theme-hope",alias:N(p),define:()=>({BLOG_TYPE_INFO:m.blogType,ENABLE_BLOG:m.enableBlog,ENABLE_READING_TIME:m.enableReadingTime,HAS_MULTIPLE_LANGUAGES:m.hasMultipleLanguages,SUPPORT_PAGEVIEW:m.supportPageview}),extendsBundlerOptions:L,onInitialized:i=>{u&&X(i,u),t.check&&Z(i)},onPrepared:i=>Promise.all([y(i,d,P),j(i,l),F(i,d),A(i,_)]).then(()=>{}),onWatched:(i,U)=>{if(f){const S=Y("pages/**/*.vue",{cwd:i.dir.temp(),ignoreInitial:!0});S.on("add",()=>{y(i,d,P)}),S.on("change",()=>{y(i,d,P)}),S.on("unlink",()=>{y(i,d,P)}),U.push(S)}},plugins:I(n,l,d,{backToTop:H,hostname:c,hotReload:f,iconAssets:W,iconPrefix:R,favicon:u},t.compact),templateBuild:`${ee}index.build.html`,clientConfigFile:i=>O(i,m)}};export{Ge as ArticleInfoType,_e as PageType,Ue as arraySidebar,qe as blog,ze as blogFilter,x as checkLegacyStyle,B as checkSocialMediaIcons,Ye as checkTag,Je as comment,ge as config,Ke as convertFrontmatter,Qe as convertNavbarOptions,Xe as convertSidebarOptions,$ as convertThemeOptions,Ze as copyCode,eo as copyright,oo as defaultPageSorter,V as defineHopeConfig,oe as defineNavbarConfig,ne as defineSidebarArrayConfig,ae as defineSidebarConfig,te as defineSidebarObjectConfig,se as defineThemeConfig,L as extendsBundlerOptions,ao as extendsPagePlugin,no as feed,to as getActiveHeaderLinksPlugin,N as getAlias,so as getAutoCatalogPlugin,io as getBlogArticleType,ro as getBlogCategoryCategory,po as getBlogPlugin,lo as getBlogStarType,mo as getBlogTagCategory,go as getBlogTimelineType,uo as getCommentPlugin,co as getComponentsPlugin,fo as getCopyCodePlugin,ho as getCopyrightPlugin,bo as getEncryptConfig,yo as getFeedPlugin,Po as getMdEnhancePlugin,So as getPWAPlugin,$o as getPhotoSwipePlugin,I as getPluginConfig,Co as getRtlPlugin,ko as getSEOPlugin,vo as getSidebarData,xo as getSidebarSorter,To as getSitemapPlugin,T as getStatus,wo as getStructureInfo,w as getThemeData,Bo as git,C as hope,C as hopeTheme,Eo as injectBlogBasicInfo,Lo as injectPageInfo,jo as mdEnhance,Fo as navbar,ie as navbarConfig,Ao as objectSidebar,Io as photoSwipe,O as prepareConfigFile,j as prepareHighLighterScss,Do as preparePerformanceConfigFile,y as prepareSidebarData,A as prepareSocialMediaIcons,F as prepareThemeColorScss,Mo as pwa,No as readingTime,Vo as removePrismPlugin,Oo as seo,Wo as sidebar,re as sidebarConfig,Ro as sidebarDateDescSorter,Ho as sidebarDateSorter,Go as sidebarFilenameSorter,_o as sidebarOrderSorter,Uo as sidebarReadmeSorter,qo as sidebarTitleSorter,zo as sitemap,pe as themeConfig,Yo as themeLocalesData,Jo as useExtendsPagePlugin,E as usePlugin,Ko as usePrismPlugin};
//# sourceMappingURL=index.js.map
