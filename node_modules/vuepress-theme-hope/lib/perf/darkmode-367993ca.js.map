{"version":3,"file":"darkmode-367993ca.js","sources":["../../src/client/modules/outlook/composables/darkmode.ts"],"sourcesContent":["import { usePreferredDark, useStorage } from \"@vueuse/core\";\nimport {\n  type App,\n  type ComputedRef,\n  type InjectionKey,\n  type Ref,\n  computed,\n  inject,\n  onMounted,\n  watch,\n} from \"vue\";\n\nimport { useThemeData } from \"@theme-hope/composables/index\";\n\nimport { type DarkmodeOptions } from \"../../../../shared/index.js\";\n\nexport type DarkmodeStatus = \"light\" | \"dark\" | \"auto\";\n\nexport type DarkModeRef = ComputedRef<boolean>;\n\nexport type DarkModeStatusRef = Ref<DarkmodeStatus>;\n\nexport interface DarkMode {\n  isDarkmode: DarkModeRef;\n  config: ComputedRef<DarkmodeOptions>;\n  status: DarkModeStatusRef;\n  canToggle: ComputedRef<boolean>;\n}\n\nexport const darkModeSymbol: InjectionKey<DarkMode> = Symbol.for(\"darkMode\");\n\n/**\n * Inject dark mode global computed\n */\nexport const useDarkmode = (): DarkMode => {\n  const darkmode = inject(darkModeSymbol);\n\n  if (!darkmode) throw new Error(\"useDarkmode() is called without provider.\");\n\n  return darkmode;\n};\n\nexport const injectDarkmode = (app: App): void => {\n  const themeData = useThemeData();\n  const isDarkPreferred = usePreferredDark();\n  const status = useStorage<DarkmodeStatus>(\n    \"vuepress-theme-hope-scheme\",\n    \"auto\"\n  );\n\n  const config = computed(() => themeData.value.darkmode || \"switch\");\n\n  const isDarkmode = computed<boolean>(() => {\n    const darkmode = config.value;\n\n    // disable darkmode\n    return darkmode === \"disable\"\n      ? false\n      : // force darkmode\n      darkmode === \"enable\"\n      ? true\n      : // auto\n      darkmode === \"auto\"\n      ? isDarkPreferred.value\n      : // toggle\n      darkmode === \"toggle\"\n      ? status.value === \"dark\"\n      : // switch\n        status.value === \"dark\" ||\n        (status.value === \"auto\" && isDarkPreferred.value);\n  });\n\n  const canToggle = computed(() => {\n    const darkmode = config.value;\n\n    return darkmode === \"switch\" || darkmode === \"toggle\";\n  });\n\n  app.provide(darkModeSymbol, {\n    canToggle,\n    config,\n    isDarkmode,\n    status,\n  });\n\n  // provide global helpers\n  Object.defineProperties(app.config.globalProperties, {\n    $isDarkmode: { get: () => isDarkmode.value },\n  });\n};\n\nexport const setupDarkmode = (): void => {\n  const { isDarkmode } = useDarkmode();\n\n  const updateDOM = (isDark = isDarkmode.value): void =>\n    document.documentElement.setAttribute(\n      \"data-theme\",\n      isDark ? \"dark\" : \"light\"\n    );\n\n  onMounted(() => {\n    watch(isDarkmode, updateDOM, { immediate: true });\n  });\n};\n\ndeclare module \"vue\" {\n  export interface ComponentCustomProperties {\n    $isDarkmode: boolean;\n  }\n}\n"],"names":["darkModeSymbol","useDarkmode","darkmode","inject","injectDarkmode","app","themeData","useThemeData","isDarkPreferred","usePreferredDark","status","useStorage","config","computed","isDarkmode","canToggle","setupDarkmode","updateDOM","isDark","onMounted","watch"],"mappings":"iLA6Ba,MAAAA,EAAyC,OAAO,IAAI,UAAU,EAK9DC,EAAc,IAAgB,CACzC,MAAMC,EAAWC,EAAOH,CAAc,EAEtC,GAAI,CAACE,EAAU,MAAM,IAAI,MAAM,2CAA2C,EAE1E,OAAOA,CACT,EAEaE,EAAkBC,GAAmB,CAChD,MAAMC,EAAYC,IACZC,EAAkBC,IAClBC,EAASC,EACb,6BACA,MACF,EAEMC,EAASC,EAAS,IAAMP,EAAU,MAAM,UAAY,QAAQ,EAE5DQ,EAAaD,EAAkB,IAAM,CACzC,MAAMX,EAAWU,EAAO,MAGxB,OAAOV,IAAa,UAChB,GAEFA,IAAa,SACX,GAEFA,IAAa,OACXM,EAAgB,MAElBN,IAAa,SACXQ,EAAO,QAAU,OAEjBA,EAAO,QAAU,QAChBA,EAAO,QAAU,QAAUF,EAAgB,KAClD,CAAC,EAEKO,EAAYF,EAAS,IAAM,CAC/B,MAAMX,EAAWU,EAAO,MAExB,OAAOV,IAAa,UAAYA,IAAa,QAC/C,CAAC,EAEDG,EAAI,QAAQL,EAAgB,CAC1B,UAAAe,EACA,OAAAH,EACA,WAAAE,EACA,OAAAJ,CACF,CAAC,EAGD,OAAO,iBAAiBL,EAAI,OAAO,iBAAkB,CACnD,YAAa,CAAE,IAAK,IAAMS,EAAW,KAAM,CAC7C,CAAC,CACH,EAEaE,EAAgB,IAAY,CACvC,KAAM,CAAE,WAAAF,CAAW,EAAIb,EAAY,EAE7BgB,EAAY,CAACC,EAASJ,EAAW,QACrC,SAAS,gBAAgB,aACvB,aACAI,EAAS,OAAS,OACpB,EAEFC,EAAU,IAAM,CACdC,EAAMN,EAAYG,EAAW,CAAE,UAAW,EAAK,CAAC,CAClD,CAAC,CACH"}