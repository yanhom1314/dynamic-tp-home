{"version":3,"file":"GlobalEncrypt.js","sources":["../../../../../src/client/modules/encrypt/composables/global.ts","../../../../../src/client/modules/encrypt/components/GlobalEncrypt.ts"],"sourcesContent":["import { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport { compareSync } from \"bcrypt-ts/browser\";\nimport { type ComputedRef, computed } from \"vue\";\n\nimport { useEncryptData } from \"./utils.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_GLOBAL_TOKEN\";\n\nexport interface GlobalEncrypt {\n  isEncrypted: ComputedRef<boolean>;\n  isDecrypted: ComputedRef<boolean>;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const useGlobalEncrypt = (): GlobalEncrypt => {\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage(STORAGE_KEY, \"\");\n  const sessionToken = useSessionStorage(STORAGE_KEY, \"\");\n\n  // is globally encrypted\n  const isEncrypted = computed(() => {\n    const { global = false, admin = [] } = encryptData.value;\n\n    return global && admin.length > 0;\n  });\n\n  // valid token exists\n  const isDecrypted = computed(() => {\n    if (isEncrypted.value) {\n      if (localToken.value)\n        // none of the token matches\n        return encryptData.value.admin!.some((hash) =>\n          compareSync(localToken.value, hash)\n        );\n\n      if (sessionToken.value)\n        // none of the token matches\n        return encryptData.value.admin!.some((hash) =>\n          compareSync(sessionToken.value, hash)\n        );\n    }\n\n    return false;\n  });\n\n  const validate = (inputToken: string, keep = false): void => {\n    (keep ? localToken : sessionToken).value = inputToken;\n  };\n\n  return {\n    isEncrypted,\n    isDecrypted,\n    validate,\n  };\n};\n","import { type VNode, defineComponent, h, onMounted, ref } from \"vue\";\n\nimport FadeSlideY from \"@theme-hope/components/transitions/FadeSlideY\";\nimport PasswordModal from \"@theme-hope/modules/encrypt/components/PasswordModal\";\nimport { useGlobalEncrypt } from \"@theme-hope/modules/encrypt/composables/index\";\n\nexport default defineComponent({\n  name: \"GlobalEncrypt\",\n\n  setup(_props, { slots }) {\n    const { isDecrypted, isEncrypted, validate } = useGlobalEncrypt();\n\n    const isMounted = ref(false);\n\n    onMounted(() => {\n      isMounted.value = true;\n    });\n\n    return (): VNode =>\n      h(FadeSlideY, () =>\n        isEncrypted.value\n          ? isMounted.value\n            ? isDecrypted.value\n              ? slots[\"default\"]?.()\n              : h(PasswordModal, { full: true, onVerify: validate })\n            : null\n          : slots[\"default\"]?.()\n      );\n  },\n});\n"],"names":["STORAGE_KEY","useGlobalEncrypt","encryptData","useEncryptData","localToken","useStorage","sessionToken","useSessionStorage","isEncrypted","computed","global","admin","isDecrypted","hash","compareSync","inputToken","keep","GlobalEncrypt","defineComponent","_props","slots","validate","isMounted","ref","onMounted","h","FadeSlideY","_a","_b","PasswordModal"],"mappings":"meAMA,MAAMA,EAAc,6BAQPC,EAAmB,IAAqB,CACnD,MAAMC,EAAcC,EAAAA,EAEdC,EAAaC,EAAWL,EAAa,EAAE,EACvCM,EAAeC,EAAkBP,EAAa,EAAE,EAGhDQ,EAAcC,EAAS,IAAM,CACjC,KAAM,CAAE,OAAAC,EAAS,GAAO,MAAAC,EAAQ,CAAA,CAAG,EAAIT,EAAY,MAEnD,OAAOQ,GAAUC,EAAM,OAAS,CAClC,CAAC,EAGKC,EAAcH,EAAS,IAAM,CACjC,GAAID,EAAY,MAAO,CACrB,GAAIJ,EAAW,MAEb,OAAOF,EAAY,MAAM,MAAO,KAAMW,GACpCC,EAAYV,EAAW,MAAOS,CAAI,CACpC,EAEF,GAAIP,EAAa,MAEf,OAAOJ,EAAY,MAAM,MAAO,KAAMW,GACpCC,EAAYR,EAAa,MAAOO,CAAI,CACtC,EAGJ,MAAO,EACT,CAAC,EAMD,MAAO,CACL,YAAAL,EACA,YAAAI,EACA,SAPe,CAACG,EAAoBC,EAAO,KAAgB,EAC1DA,EAAOZ,EAAaE,GAAc,MAAQS,CAC7C,CAMA,CACF,ECjDA,IAAAE,EAAeC,EAAgB,CAC7B,KAAM,gBAEN,MAAMC,EAAQ,CAAE,MAAAC,CAAM,EAAG,CACvB,KAAM,CAAE,YAAAR,EAAa,YAAAJ,EAAa,SAAAa,CAAS,EAAIpB,IAEzCqB,EAAYC,EAAI,EAAK,EAE3B,OAAAC,EAAU,IAAM,CACdF,EAAU,MAAQ,EACpB,CAAC,EAEM,IACLG,EAAEC,EAAY,IAAG,CAnBvB,IAAAC,EAAAC,EAoBQ,OAAApB,EAAY,MACRc,EAAU,MACRV,EAAY,OACVe,EAAAP,EAAM,UAAN,YAAAO,EAAA,KAAAP,GACAK,EAAEI,EAAe,CAAE,KAAM,GAAM,SAAUR,CAAS,CAAC,EACrD,MACFO,EAAAR,EAAM,UAAN,KAAA,OAAAQ,EAAA,KAAAR,CAAAA,CAAAA,CACN,CACJ,CACF,CAAC"}