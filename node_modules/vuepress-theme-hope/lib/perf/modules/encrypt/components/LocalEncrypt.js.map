{"version":3,"file":"LocalEncrypt.js","sources":["../../../../../src/client/modules/encrypt/utils/checkToken.ts","../../../../../src/client/modules/encrypt/composables/path.ts","../../../../../src/client/modules/encrypt/components/LocalEncrypt.ts"],"sourcesContent":["import { compareSync } from \"bcrypt-ts/browser\";\n\nexport const checkToken = (token = \"\", hash: string): boolean =>\n  Boolean(token) && compareSync(token, hash);\n","import { usePageData } from \"@vuepress/client\";\nimport { isPlainObject } from \"@vuepress/shared\";\nimport { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport { type ComputedRef, computed } from \"vue\";\nimport { keys, startsWith } from \"vuepress-shared/client\";\n\nimport { checkToken } from \"@theme-hope/modules/encrypt/utils/index\";\n\nimport { useEncryptData } from \"./utils.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_PATH_TOKEN\";\n\nexport interface EncryptStatus {\n  isEncrypted: boolean;\n  isDecrypted: boolean;\n}\n\nexport interface PathEncrypt {\n  status: ComputedRef<EncryptStatus>;\n  getStatus: (path: string) => EncryptStatus;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const usePathEncrypt = (): PathEncrypt => {\n  const page = usePageData();\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage<Record<string, string>>(STORAGE_KEY, {});\n  const sessionToken = useSessionStorage<Record<string, string>>(\n    STORAGE_KEY,\n    {}\n  );\n\n  const getPathMatchedKeys = (path: string): string[] =>\n    isPlainObject(encryptData.value.config)\n      ? keys(encryptData.value.config)\n          .filter((key) => startsWith(decodeURI(path), key))\n          .sort((a, b) => b.length - a.length)\n      : [];\n\n  const getStatus = (path: string): EncryptStatus => {\n    const matchedKeys = getPathMatchedKeys(path);\n\n    if (matchedKeys.length > 0) {\n      const { config = {} } = encryptData.value;\n\n      return {\n        isEncrypted: true,\n        isDecrypted: matchedKeys.some(\n          (key) =>\n            (localToken.value[key] &&\n              config[key].some((token) =>\n                checkToken(localToken.value[key], token)\n              )) ||\n            (sessionToken.value[key] &&\n              config[key].some((token) =>\n                checkToken(sessionToken.value[key], token)\n              ))\n        ),\n      };\n    }\n\n    return {\n      isDecrypted: false,\n      isEncrypted: false,\n    };\n  };\n\n  const status = computed(() => getStatus(page.value.path));\n\n  const validate = (inputToken: string, keep = false): void => {\n    const { config = {} } = encryptData.value;\n    const matchedKeys = getPathMatchedKeys(page.value.path);\n\n    // some of the tokens matches\n    for (const hitKey of matchedKeys)\n      if (config[hitKey].filter((token) => checkToken(inputToken, token))) {\n        (keep ? localToken : sessionToken).value[hitKey] = inputToken;\n\n        break;\n      }\n  };\n\n  return {\n    status,\n    getStatus,\n    validate,\n  };\n};\n","import { type VNode, defineComponent, h, onMounted, ref } from \"vue\";\n\nimport PasswordModal from \"@theme-hope/modules/encrypt/components/PasswordModal\";\nimport { usePathEncrypt } from \"@theme-hope/modules/encrypt/composables/index\";\n\nexport default defineComponent({\n  name: \"LocalEncrypt\",\n\n  setup(_props, { slots }) {\n    const { status, validate } = usePathEncrypt();\n\n    const isMounted = ref(false);\n\n    onMounted(() => {\n      isMounted.value = true;\n    });\n\n    return (): VNode[] | VNode | null => {\n      const { isEncrypted, isDecrypted } = status.value;\n\n      return isEncrypted\n        ? isMounted.value\n          ? isDecrypted\n            ? slots[\"default\"]?.() || null\n            : h(PasswordModal, { full: true, onVerify: validate })\n          : null\n        : slots[\"default\"]?.() || null;\n    };\n  },\n});\n"],"names":["checkToken","token","hash","compareSync","STORAGE_KEY","usePathEncrypt","page","usePageData","encryptData","useEncryptData","localToken","useStorage","sessionToken","useSessionStorage","getPathMatchedKeys","path","isPlainObject","keys","key","startsWith","a","b","getStatus","matchedKeys","config","computed","inputToken","keep","hitKey","LocalEncrypt","defineComponent","_props","slots","status","validate","isMounted","ref","onMounted","_a","_b","isEncrypted","isDecrypted","h","PasswordModal"],"mappings":"0eAEO,MAAMA,EAAa,CAACC,EAAQ,GAAIC,IACrC,CAAA,CAAQD,GAAUE,EAAYF,EAAOC,CAAI,ECOrCE,EAAc,2BAaPC,EAAiB,IAAmB,CAC/C,MAAMC,EAAOC,IACPC,EAAcC,EAAe,EAE7BC,EAAaC,EAAmCP,EAAa,CAAA,CAAE,EAC/DQ,EAAeC,EACnBT,EACA,CACF,CAAA,EAEMU,EAAsBC,GAC1BC,EAAcR,EAAY,MAAM,MAAM,EAClCS,EAAKT,EAAY,MAAM,MAAM,EAC1B,OAAQU,GAAQC,EAAW,UAAUJ,CAAI,EAAGG,CAAG,CAAC,EAChD,KAAK,CAACE,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EACrC,CAAA,EAEAE,EAAaP,GAAgC,CACjD,MAAMQ,EAAcT,EAAmBC,CAAI,EAE3C,GAAIQ,EAAY,OAAS,EAAG,CAC1B,KAAM,CAAE,OAAAC,EAAS,CAAG,CAAA,EAAIhB,EAAY,MAEpC,MAAO,CACL,YAAa,GACb,YAAae,EAAY,KACtBL,GACER,EAAW,MAAMQ,CAAG,GACnBM,EAAON,CAAG,EAAE,KAAMjB,GAChBD,EAAWU,EAAW,MAAMQ,CAAG,EAAGjB,CAAK,CACzC,GACDW,EAAa,MAAMM,CAAG,GACrBM,EAAON,CAAG,EAAE,KAAMjB,GAChBD,EAAWY,EAAa,MAAMM,CAAG,EAAGjB,CAAK,CAC3C,CACN,CACF,EAGF,MAAO,CACL,YAAa,GACb,YAAa,EACf,CACF,EAiBA,MAAO,CACL,OAhBawB,EAAS,IAAMH,EAAUhB,EAAK,MAAM,IAAI,CAAC,EAiBtD,UAAAgB,EACA,SAhBe,CAACI,EAAoBC,EAAO,KAAgB,CAC3D,KAAM,CAAE,OAAAH,EAAS,EAAG,EAAIhB,EAAY,MAC9Be,EAAcT,EAAmBR,EAAK,MAAM,IAAI,EAGtD,UAAWsB,KAAUL,EACnB,GAAIC,EAAOI,CAAM,EAAE,OAAQ3B,GAAUD,EAAW0B,EAAYzB,CAAK,CAAC,EAAG,EAClE0B,EAAOjB,EAAaE,GAAc,MAAMgB,CAAM,EAAIF,EAEnD,MAEN,CAMA,CACF,ECnFA,IAAAG,EAAeC,EAAgB,CAC7B,KAAM,eAEN,MAAMC,EAAQ,CAAE,MAAAC,CAAM,EAAG,CACvB,KAAM,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAI7B,IAEvB8B,EAAYC,EAAI,EAAK,EAE3B,OAAAC,EAAU,IAAM,CACdF,EAAU,MAAQ,EACpB,CAAC,EAEM,IAA8B,CAjBzC,IAAAG,EAAAC,EAkBM,KAAM,CAAE,YAAAC,EAAa,YAAAC,CAAY,EAAIR,EAAO,MAE5C,OAAOO,EACHL,EAAU,MACRM,IACEH,EAAAN,EAAM,UAAN,KAAA,OAAAM,EAAA,KAAAN,CAAAA,IAAwB,KACxBU,EAAEC,EAAe,CAAE,KAAM,GAAM,SAAUT,CAAS,CAAC,EACrD,OACFK,EAAAP,EAAM,UAAN,KAAAO,OAAAA,EAAA,KAAAP,CAAwB,IAAA,IAC9B,CACF,CACF,CAAC"}