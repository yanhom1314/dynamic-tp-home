const{entries:$}=Object,{fromEntries:et}=Object,st="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,r=o+s,c=new Uint8Array(r*o).fill(s+1);for(let i=0;i<o;++i)c[i]=i;for(let i=1;i<r;++i)c[i*o]=i;return q(e,t,s,n,c,1,o,""),n},q=(e,t,s,n,o,r,c,i)=>{const h=r*c;t:for(const u of e.keys())if(u===_){const l=o[h-1];l<=s&&n.set(i,[e.get(u),l])}else{let l=r;for(let f=0;f<u.length;++f,++l){const m=u[f],g=c*l,y=g-c;let d=o[g];const a=Math.max(0,l-s-1),w=Math.min(c-1,l+s);for(let p=a;p<w;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,x=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,x);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,l,c,i+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const c of o.keys())if(c!==_&&c.startsWith(r)){const i=new Map;return i.set(c.slice(r.length),o.get(c)),new z(i,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const c=Math.min(s-n,r.length);let i=1;for(;i<c&&t[n+i]===r[i];)++i;const h=e.get(r);if(i===r.length)e=h;else{const u=new Map;u.set(r.slice(i),h),e.set(t.slice(n,n+i),u),e.delete(r),e=u}n+=i;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ct="and_not",ut=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:c}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,c),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:c,match:i}=t.get(n);B(o.terms,c),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,i)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:c,b:i,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(c+1)/(e+c*(1-i+i*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t);r?.get(s)==null?H(e,s,t,n):r.get(s)<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,r.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y},K=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const c=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:c,terms:[],match:{}})}return s},U=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},T=(e,t,s,n,o,r,c,i,h,u=new Map)=>{if(r==null)return u;for(const l of Object.keys(c)){const f=c[l],m=e._fieldIds[l],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const w=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!w)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,h),k=n*o*f*w*C,x=u.get(a);if(x){x.score+=k,ut(x.terms,t);const v=G(x.match,s);v?v.push(l):x.match[s]=[l]}else u.set(a,{score:k,terms:[t],match:{[s]:[l]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:c,maxFuzzy:i,bm25:h}=n,{fuzzy:u,prefix:l}={...J.weights,...c},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(i,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const w=d.length-t.term.length;if(!w)continue;y?.delete(d);const p=l*d.length/(d.length+.3*w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}if(y)for(const d of y.keys()){const[a,w]=y.get(d);if(!w)continue;const p=u*d.length/(d.length+w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}return m},Q=(e,t,s={})=>{if(t===K)return wt(e,s);if(typeof t!="string"){const l={...s,...t,queries:void 0},f=t.queries.map(m=>Q(e,m,l));return U(f,l.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,c={tokenize:n,processTerm:o,...r,...s},{tokenize:i,processTerm:h}=c,u=i(t).flatMap(l=>h(l)).filter(l=>!!l).map(at(c)).map(l=>xt(e,l,c));return U(u,c.combineWith)},X=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[r,{score:c,terms:i,match:h}]of n){const u=i.length||1,l={id:e._documentIds.get(r),score:c*u,terms:Object.keys(h),queryTerms:i,match:h};Object.assign(l,e._storedFields.get(r)),(s.filter==null||s.filter(l))&&o.push(l)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:c}of X(e,t,s)){const i=c.join(" "),h=n.get(i);h!=null?(h.score+=r,h.count+=1):n.set(i,{score:r,terms:c,count:1})}const o=[];for(const[r,{score:c,terms:i,count:h}]of n)o.push({suggestion:r,terms:i,score:c/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,c]of n)o[r]=Object.fromEntries(c);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},c)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const i=vt(c);return i._documentCount=e,i._nextId=t,i._idToShortId=new Map,i._fieldIds=s,i._avgFieldLength=n,i._dirtCount=o??0,i._index=new z,i},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,c=kt(e,t);c._documentIds=M(n),c._fieldLength=M(o),c._storedFields=M(r);for(const[i,h]of c._documentIds)c._idToShortId.set(h,i);for(const[i,h]of s){const u=new Map;for(const l of Object.keys(h))u.set(parseInt(l,10),M(h[l]));c._index.set(i,u)}return c},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,c=0;const i=(u,l=!1)=>{let f;c===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+c>100?`${u.slice(0,100-c)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),c+=f.length,l||(o.push(["mark",t]),c+=t.length,c>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(i(e.slice(r,h)),r=u,c>100)break;h=s.indexOf(n,r)}return c<100&&i(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return X(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:c,score:i}=o,h=r.includes("@"),u=r.includes("#"),[l,f]=r.split(/[#@]/),m=Number(l),g=c.sort((d,a)=>d.length-a.length).filter((d,a)=>c.slice(a+1).every(w=>!w.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},i]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},i]),"t"in o&&o.t)for(const a of o.t){const w=g.map(p=>V(a,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:w},i])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:c}])=>{if(!r){const i=rt(t,o);i&&(r=i.h)}return{title:r,contents:c.map(([i])=>i)}})},tt=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=et($(JSON.parse("{\"/\":{\"documentCount\":269,\"nextId\":269,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"1#maven依赖\",\"3\":\"1#线程池配置文件\",\"4\":\"1#yml-格式\",\"5\":\"1#properties-格式\",\"6\":\"1#application-yml-配置\",\"7\":\"1#接入-apollo-配置流程\",\"8\":\"2\",\"9\":\"2#maven-依赖\",\"10\":\"2#线程池配置文件\",\"11\":\"2#yml-格式\",\"12\":\"2#properties-格式\",\"13\":\"2#bootstrap-yml-配置\",\"14\":\"3\",\"15\":\"4\",\"16\":\"4#maven-依赖\",\"17\":\"4#线程池配置文件\",\"18\":\"4#properties-格式\",\"19\":\"4#json-格式\",\"20\":\"4#application-yml-配置\",\"21\":\"5\",\"22\":\"5#maven-依赖\",\"23\":\"5#线程池配置文件\",\"24\":\"5#yml-格式\",\"25\":\"5#properties-格式\",\"26\":\"5#bootstrap-yml-配置\",\"27\":\"6\",\"28\":\"6#maven-依赖\",\"29\":\"6#线程池配置文件\",\"30\":\"6#yml-格式\",\"31\":\"6#properties-格式\",\"32\":\"6#bootstrap-yml-配置\",\"33\":\"7\",\"34\":\"7#maven-依赖\",\"35\":\"7#线程池配置文件\",\"36\":\"7#yml-格式\",\"37\":\"7#properties-格式\",\"38\":\"7#application-yml-配置\",\"39\":\"8\",\"40\":\"8#maven-依赖\",\"41\":\"8#线程池配置文件\",\"42\":\"8#yml-格式\",\"43\":\"8#properties-格式\",\"44\":\"8#配置引入\",\"45\":\"9\",\"46\":\"9#maven-依赖\",\"47\":\"9#线程池配置文件\",\"48\":\"9#yml-格式\",\"49\":\"9#yml-格式-1\",\"50\":\"9#properties-格式\",\"51\":\"9#bootstrap-yml-配置\",\"52\":\"10\",\"53\":\"10#maven-依赖\",\"54\":\"10#线程池配置文件\",\"55\":\"10#properties-格式\",\"56\":\"10#通过-zkui-工具导入-properties-格式\",\"57\":\"10#bootstrap-yml-配置\",\"58\":\"11\",\"59\":\"11#maven-依赖\",\"60\":\"11#线程池配置文件\",\"61\":\"11#properties-格式\",\"62\":\"11#json-格式\",\"63\":\"11#通过-zkui-工具导入-properties-格式\",\"64\":\"11#application-yml-配置\",\"65\":\"12\",\"66\":\"12#使用步骤\",\"67\":\"13\",\"68\":\"13#使用步骤\",\"69\":\"14\",\"70\":\"14#使用步骤\",\"71\":\"15\",\"72\":\"15#使用步骤\",\"73\":\"16\",\"74\":\"16#使用步骤\",\"75\":\"17\",\"76\":\"17#使用步骤\",\"77\":\"18\",\"78\":\"18#使用步骤\",\"79\":\"19\",\"80\":\"19#使用步骤\",\"81\":\"20\",\"82\":\"20#使用步骤\",\"83\":\"21\",\"84\":\"21#使用步骤\",\"85\":\"22\",\"86\":\"22#使用步骤\",\"87\":\"23\",\"88\":\"23#使用步骤\",\"89\":\"24\",\"90\":\"24#使用步骤\",\"91\":\"25\",\"92\":\"25#使用步骤\",\"93\":\"26\",\"94\":\"26#模块划分\",\"95\":\"26#代码结构\",\"96\":\"26#架构图\",\"97\":\"27\",\"98\":\"27#使用痛点\",\"99\":\"28\",\"100\":\"28#测试环境配置\",\"101\":\"28#性能对比\",\"102\":\"29\",\"103\":\"29#功能特性\",\"104\":\"30\",\"105\":\"30#采集类型\",\"106\":\"30#micrometer\",\"107\":\"30#logging\",\"108\":\"30#endpoint\",\"109\":\"30#jmx\",\"110\":\"31\",\"111\":\"31#自定义采集类型\",\"112\":\"32\",\"113\":\"32#hertzbeat-介绍\",\"114\":\"32#在-hertzbeat-5分钟搞定监控-dynamictp\",\"115\":\"32#操作前提-您已拥有-dynamictp-环境和-hertzbeat-环境。\",\"116\":\"32#一-在-dynamictp-端暴露出dynamictp指标接口-actuator-dynamic-tp-它将提供-metrics-接口数据。\",\"117\":\"32#二-在-hertzbeat-监控页面添加-dynamictp-线程池监控\",\"118\":\"32#三-在-hertzbeat-系统添加-dynamictp线程池-指标阈值告警\",\"119\":\"32#完毕-现在坐等告警消息过来啦。叮叮叮叮\",\"120\":\"32#小结\",\"121\":\"33\",\"122\":\"33#集成步骤\",\"123\":\"34\",\"124\":\"34#by-yanhom-掘金\",\"125\":\"34#by-redick01-掘金\",\"126\":\"34#by-java学思-公众号\",\"127\":\"34#by-scl-掘金\",\"128\":\"34#by-赤耳小永-掘金\",\"129\":\"34#by-windsearcher-有道云笔记\",\"130\":\"34#by-mryan\",\"131\":\"35\",\"132\":\"35#联系社区\",\"133\":\"36\",\"134\":\"36#成为-committer\",\"135\":\"36#提交-pr\",\"136\":\"37\",\"137\":\"37#q-dynamictp-支持那些版本-springboot\",\"138\":\"37#q-非-springboot-项目能使用吗\",\"139\":\"37#q-juc-线程池和-spring-线程池能被管理吗\",\"140\":\"37#q-增强-undertow-线程池后-服务启动报错-cannot-inherit-from-final-class-怎么解决\",\"141\":\"37#q-为什么-dynamictp-会有内存泄露问题\",\"142\":\"37#q-接入后服务启动不能正常创建线程池-怎么回事\",\"143\":\"37#q-动态调整队列大小-队列里的任务怎么处理\",\"144\":\"37#q-dynamictp-性能怎么样\",\"145\":\"37#q-三方中间件线程池增强失败-怎么回事\",\"146\":\"38\",\"147\":\"38#项目成员\",\"148\":\"39\",\"149\":\"39#v1-2-0-发版记录\",\"150\":\"39#feature\",\"151\":\"39#bugfix\",\"152\":\"39#optimize\",\"153\":\"39#v1-1-9-1-发版记录\",\"154\":\"39#bugfix-1\",\"155\":\"39#optimize-1\",\"156\":\"39#v1-1-9-发版记录\",\"157\":\"39#feature-1\",\"158\":\"39#bugfix-2\",\"159\":\"39#optimize-2\",\"160\":\"39#v1-1-7-发版记录\",\"161\":\"39#feature-2\",\"162\":\"39#bugfix-3\",\"163\":\"39#optimize-3\",\"164\":\"39#refactor\",\"165\":\"39#v1-1-6-1-发版记录\",\"166\":\"39#feature-3\",\"167\":\"39#bugfix-4\",\"168\":\"39#optimize-4\",\"169\":\"39#refactor-1\",\"170\":\"39#v1-1-5-发版记录\",\"171\":\"39#feature-4\",\"172\":\"39#bugfix-5\",\"173\":\"39#optimize-5\",\"174\":\"39#v1-1-4-发布记录\",\"175\":\"39#feature-5\",\"176\":\"39#bugfix-6\",\"177\":\"39#optimize-6\",\"178\":\"39#v1-1-3-发布记录\",\"179\":\"39#feature-6\",\"180\":\"39#bugfix-7\",\"181\":\"39#optimize-7\",\"182\":\"39#v1-1-2-发布记录\",\"183\":\"39#features\",\"184\":\"39#bugfix-8\",\"185\":\"39#optimize-8\",\"186\":\"39#v1-1-0-发布记录\",\"187\":\"39#features-1\",\"188\":\"39#bugfix-9\",\"189\":\"39#optimize-9\",\"190\":\"39#v1-0-9-发布记录\",\"191\":\"39#features-2\",\"192\":\"39#bugfix-10\",\"193\":\"39#refactor-2\",\"194\":\"39#optimize-10\",\"195\":\"39#v1-0-8-发布记录\",\"196\":\"39#features-3\",\"197\":\"39#bugfix-11\",\"198\":\"39#refactor-3\",\"199\":\"39#optimize-11\",\"200\":\"39#v1-0-7-发布记录\",\"201\":\"39#features-4\",\"202\":\"39#bugfix-12\",\"203\":\"39#refactor-4\",\"204\":\"39#v1-0-5\",\"205\":\"39#features-5\",\"206\":\"39#bugfix-13\",\"207\":\"39#refactor-5\",\"208\":\"39#dependency\",\"209\":\"39#v1-0-4\",\"210\":\"39#features-6\",\"211\":\"39#v1-0-3\",\"212\":\"39#features-7\",\"213\":\"39#v1-0-2\",\"214\":\"39#features-8\",\"215\":\"40\",\"216\":\"40#用爱发电\",\"217\":\"40#成为赞助商\",\"218\":\"40#赞助人列表\",\"219\":\"41\",\"220\":\"41#接入公司\",\"221\":\"41#登记\",\"222\":\"42\",\"223\":\"42#告警类型\",\"224\":\"43\",\"225\":\"43#自定义通知渠道\",\"226\":\"44\",\"227\":\"44#邮件通知\",\"228\":\"45\",\"229\":\"45#调参通知\",\"230\":\"46\",\"231\":\"46#告警信息扩展\",\"232\":\"47\",\"233\":\"47#推送限流\",\"234\":\"48\",\"235\":\"48#云之家通知\",\"236\":\"49\",\"237\":\"49#注意事项\",\"238\":\"50\",\"239\":\"50#线程池定义\",\"240\":\"50#代码引用\",\"241\":\"51\",\"242\":\"51#环境说明\",\"243\":\"51#jdk-版本\",\"244\":\"51#spring-版本\",\"245\":\"51#springboot-版本\",\"246\":\"52\",\"247\":\"52#全局配置\",\"248\":\"53\",\"249\":\"53#线程池模式\",\"250\":\"53#模式设定\",\"251\":\"54\",\"252\":\"54#接入步骤\",\"253\":\"54#日志输出\",\"254\":\"54#注意事项\",\"255\":\"55\",\"256\":\"55#自定义拒绝策略\",\"257\":\"56\",\"258\":\"56#任务包装器\",\"259\":\"56#使用方式\",\"260\":\"57\",\"261\":\"58\",\"262\":\"59\",\"263\":\"60\",\"264\":\"61\",\"265\":\"62\",\"266\":\"63\",\"267\":\"64\",\"268\":\"65\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2,31],\"2\":[1,25],\"3\":[1],\"4\":[2,217],\"5\":[2,168],\"6\":[3,45],\"7\":[3,34],\"8\":[3,30],\"9\":[2,25],\"10\":[1],\"11\":[2,217],\"12\":[2,168],\"13\":[3,26],\"14\":[1,52],\"15\":[2,25],\"16\":[2,25],\"17\":[1],\"18\":[2,168],\"19\":[2,98],\"20\":[3,21],\"21\":[3,31],\"22\":[2,25],\"23\":[1],\"24\":[2,217],\"25\":[2,168],\"26\":[3,36],\"27\":[3,39],\"28\":[2,25],\"29\":[1],\"30\":[2,217],\"31\":[2,168],\"32\":[3,32],\"33\":[2,57],\"34\":[2,25],\"35\":[1],\"36\":[2,217],\"37\":[2,168],\"38\":[3,28],\"39\":[1,27],\"40\":[2,25],\"41\":[1],\"42\":[2,217],\"43\":[2,168],\"44\":[1,13],\"45\":[3,31],\"46\":[2,25],\"47\":[1],\"48\":[2],\"49\":[2,217],\"50\":[2,168],\"51\":[3,41],\"52\":[3,35],\"53\":[2,25],\"54\":[1],\"55\":[2,168],\"56\":[4,83],\"57\":[3,22],\"58\":[2,35],\"59\":[2,25],\"60\":[1],\"61\":[2,168],\"62\":[2,98],\"63\":[4,83],\"64\":[3,30],\"65\":[2],\"66\":[1,173],\"67\":[2,16],\"68\":[1,169],\"69\":[2],\"70\":[1,185],\"71\":[2],\"72\":[1,165],\"73\":[2],\"74\":[1,139],\"75\":[2],\"76\":[1,167],\"77\":[2],\"78\":[1,170],\"79\":[2],\"80\":[1,172],\"81\":[2],\"82\":[1,167],\"83\":[2,9],\"84\":[1,169],\"85\":[2],\"86\":[1,161],\"87\":[2],\"88\":[1,160],\"89\":[2],\"90\":[1,149],\"91\":[2],\"92\":[1,137],\"93\":[1],\"94\":[1,121],\"95\":[1,60],\"96\":[1,1],\"97\":[1],\"98\":[1,102],\"99\":[1],\"100\":[1,27],\"101\":[1,74],\"102\":[1],\"103\":[1,160],\"104\":[1],\"105\":[1,29],\"106\":[1,9],\"107\":[1,68],\"108\":[1,35],\"109\":[1,4],\"110\":[1],\"111\":[1,84],\"112\":[2],\"113\":[2,29],\"114\":[4],\"115\":[7,4],\"116\":[9,55],\"117\":[6,63],\"118\":[6,64],\"119\":[3,28],\"120\":[1,32],\"121\":[2],\"122\":[1,92],\"123\":[1],\"124\":[4,15],\"125\":[4,5],\"126\":[4,5],\"127\":[4,2],\"128\":[4,1],\"129\":[4,4],\"130\":[2,2],\"131\":[1],\"132\":[1,16],\"133\":[1],\"134\":[2,15],\"135\":[2,20],\"136\":[1],\"137\":[5,26],\"138\":[5,40],\"139\":[6,27],\"140\":[12,25],\"141\":[5,46],\"142\":[4,16],\"143\":[4,13],\"144\":[4,22],\"145\":[4,15],\"146\":[1],\"147\":[1],\"148\":[1,1],\"149\":[4,22],\"150\":[1,14],\"151\":[1,54],\"152\":[1,24],\"153\":[4],\"154\":[1,24],\"155\":[1,5],\"156\":[4,24],\"157\":[1,125],\"158\":[1,57],\"159\":[1,9],\"160\":[4],\"161\":[1,20],\"162\":[1,30],\"163\":[1,13],\"164\":[1,9],\"165\":[4],\"166\":[1,34],\"167\":[1,30],\"168\":[1,25],\"169\":[1,20],\"170\":[4],\"171\":[1,15],\"172\":[1,19],\"173\":[1,11],\"174\":[4],\"175\":[1,51],\"176\":[1,32],\"177\":[1,20],\"178\":[4,5],\"179\":[1,42],\"180\":[1,12],\"181\":[1,20],\"182\":[4],\"183\":[1,28],\"184\":[1,11],\"185\":[1,25],\"186\":[4],\"187\":[1,33],\"188\":[1,8],\"189\":[1,13],\"190\":[4],\"191\":[1,8],\"192\":[1,21],\"193\":[1,13],\"194\":[1,21],\"195\":[4,11],\"196\":[1,45],\"197\":[1,10],\"198\":[1,9],\"199\":[1,14],\"200\":[4,47],\"201\":[1,22],\"202\":[1,3],\"203\":[1,7],\"204\":[3],\"205\":[1,4],\"206\":[1,2],\"207\":[1,1],\"208\":[1,9],\"209\":[3],\"210\":[1,11],\"211\":[3],\"212\":[1,11],\"213\":[3],\"214\":[1,20],\"215\":[1],\"216\":[1,11],\"217\":[1,38],\"218\":[1,50],\"219\":[1],\"220\":[1,25],\"221\":[1,7],\"222\":[1],\"223\":[1,81],\"224\":[1],\"225\":[1,137],\"226\":[1],\"227\":[1,75],\"228\":[1],\"229\":[1,9],\"230\":[1],\"231\":[1,107],\"232\":[1],\"233\":[1,87],\"234\":[1],\"235\":[1,48],\"236\":[2],\"237\":[1,52],\"238\":[1],\"239\":[1,97],\"240\":[1,35],\"241\":[1],\"242\":[1,13],\"243\":[2,19],\"244\":[2,27],\"245\":[2,12],\"246\":[1],\"247\":[1,71],\"248\":[1],\"249\":[1,40],\"250\":[1,46],\"251\":[1],\"252\":[1,24],\"253\":[1,45],\"254\":[1,49],\"255\":[1],\"256\":[1,75],\"257\":[1],\"258\":[1,26],\"259\":[1,109],\"260\":[1,3],\"261\":[1],\"262\":[1],\"263\":[1],\"264\":[1],\"265\":[1],\"266\":[1],\"267\":[1],\"268\":[1]},\"averageFieldLength\":[1.8438661710037179,60.84368549165657],\"storedFields\":{\"0\":{\"h\":\"首页\"},\"1\":{\"h\":\"apollo 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 apollo 中，如：user-center-dtp-dev.yml\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"2\":{\"h\":\"maven依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-apollo</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-apollo</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"3\":{\"h\":\"线程池配置文件\"},\"4\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"5\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"6\":{\"h\":\"application.yml 配置\",\"t\":[\"apollo: bootstrap: enabled: true namespaces: user-center-dev.yml,user-center-dtp-dev.yml # 注意：这里要加上动态线程池配置文件，服务启动会根据此配置拉取配置 meta: http://localhost:8080 config-service: http://localhost:8080 app: id: user-center \",\"注意\",\"如果 Apollo 使用 docker 方式安装，需要更改配置，参考这篇文章：https://blog.csdn.net/qq_35530042/article/details/113985623\",\"docker 方式安装请参考这篇文章：https://www.apolloconfig.com/#/zh/deployment/quick-start-docker\"]},\"7\":{\"h\":\"接入 Apollo 配置流程\",\"t\":[\"本地或 docker 安装 apollo 之后访问 localhost:8070\",\"image-20231205191955993\",\"创建项目，appid 即为配置文件里的 app.id\",\"image-20231205192141255\",\"新建 namespace，除非您想使用默认的 application 作为 namespace name，此时您的配置文件里应该将 namespace 设置为 namespace: application 或者不配置\",\"image-20231206102730485\",\"image-20231205192713419\",\"image-20231205192944618\",\"创建 namespace 后将 dynamic-tp 动态线程池配置文件放置在配置中心 apollo 里\",\"image-20231205193214034\"]},\"8\":{\"h\":\"consul-cloud 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 consul 中，如：user-center-dtp\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"9\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-consul</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-consul</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"10\":{\"h\":\"线程池配置文件\"},\"11\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"12\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"13\":{\"h\":\"bootstrap.yml 配置\",\"t\":[\"spring: application: name: user-center profiles: active: dev cloud: consul: host: 127.0.0.1 port: 8500 config: enabled: true prefixes: config format: yml data-key: user-center-dtp \"]},\"14\":{\"h\":\"自研配置中心接入\",\"t\":[\"如果你没使用上述任何一种配置中心，有内部自研的配置中心，接入也很简单，只需要自定义一个 Refresher 即可，创建继承自 AbstractRefresher 的 GalaxyRefresher 类，实现监听特定的配置刷新事件，下面是一个简单的示例：\",\"public class GalaxyRefresher extends AbstractRefresher implements SmartApplicationListener { public GalaxyRefresher(DtpProperties dtpProperties) { super(dtpProperties); } @Override public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) { return GalaxyConfigEvent.class.isAssignableFrom(eventType); } @Override public void onApplicationEvent(ApplicationEvent event) { if (event instanceof GalaxyConfigEvent) { refresh(environment); } } } \",\"AbstractRefresher 提供了三种 refresh 方法，自选用任意一种调用即可实现动态刷新功能：\",\"public void refresh(String content, ConfigFileTypeEnum fileType); public void refresh(Map<Object, Object> properties); public void refresh(Environment environment); \",\"线程池配置文件格式和上述其他配置中心一致，直接参考就行。\"]},\"15\":{\"h\":\"etcd 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到配置中心 etcd\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"16\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-etcd</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-etcd</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"17\":{\"h\":\"线程池配置文件\"},\"18\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"19\":{\"h\":\"json 格式\",\"t\":[\"{ \\\"dynamictp\\\": { \\\"enabled\\\": true, \\\"enabledCollect\\\": true, \\\"collectorTypes\\\": \\\"micrometer,logging\\\", \\\"logPath\\\": \\\"/home/logs/dynamictp/user-center/\\\", \\\"monitorInterval\\\": 5, \\\"platforms\\\": [ { \\\"platform\\\": \\\"wechat\\\", \\\"platformId\\\": 1, \\\"urlKey\\\": \\\"3a700-127-4bd-a798-c53d8b69c\\\", \\\"receivers\\\": \\\"test1,test2\\\" }, { \\\"platform\\\": \\\"ding\\\", \\\"platformId\\\": 2, \\\"urlKey\\\": \\\"f80dad441fcd655438f4a08dcd6a\\\", \\\"secret\\\": \\\"SECb5441fa6f375d5b9d21\\\", \\\"receivers\\\": \\\"18888888888\\\" }, { \\\"platform\\\": \\\"lark\\\", \\\"platformId\\\": 3, \\\"urlKey\\\": \\\"0d944ae7-b24a-40\\\", \\\"secret\\\": \\\"3a750012874bdac5c3d8b69c\\\", \\\"receivers\\\": \\\"test1,test2\\\" }, { \\\"platform\\\": \\\"email\\\", \\\"platformId\\\": 4, \\\"receivers\\\": \\\"123456@qq.com,789789@qq.com\\\" } ], \\\"globalExecutorProps\\\": { \\\"rejectedHandlerType\\\": \\\"CallerRunsPolicy\\\", \\\"queueType\\\": \\\"VariableLinkedBlockingQueue\\\", \\\"waitForTasksToCompleteOnShutdown\\\": true, \\\"awaitTerminationSeconds\\\": 3, \\\"taskWrapperNames\\\": [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"], \\\"queueTimeout\\\": 300, \\\"runTimeout\\\": 300, \\\"notifyItems\\\": [ { \\\"type\\\": \\\"change\\\", \\\"enabled\\\": true }, { \\\"type\\\": \\\"capacity\\\", \\\"enabled\\\": true, \\\"threshold\\\": 80, \\\"platformIds\\\": [2], \\\"interval\\\": 120 }, { \\\"type\\\": \\\"liveness\\\", \\\"enabled\\\": true, \\\"threshold\\\": 80 }, { \\\"type\\\": \\\"reject\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 }, { \\\"type\\\": \\\"run_timeout\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 }, { \\\"type\\\": \\\"queue_timeout\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 } ] }, \\\"executors\\\": [ { \\\"threadPoolName\\\": \\\"dtpExecutor1\\\", \\\"threadPoolAliasName\\\": \\\"测试线程池\\\", \\\"executorType\\\": \\\"common\\\", \\\"corePoolSize\\\": 6, \\\"maximumPoolSize\\\": 8, \\\"queueCapacity\\\": 2000, \\\"queueType\\\": \\\"VariableLinkedBlockingQueue\\\", \\\"rejectedHandlerType\\\": \\\"CallerRunsPolicy\\\", \\\"keepAliveTime\\\": 60, \\\"threadNamePrefix\\\": \\\"test\\\", \\\"allowCoreThreadTimeOut\\\": false, \\\"waitForTasksToCompleteOnShutdown\\\": true, \\\"awaitTerminationSeconds\\\": 5, \\\"preStartAllCoreThreads\\\": false, \\\"runTimeout\\\": 200, \\\"queueTimeout\\\": 100, \\\"taskWrapperNames\\\": [\\\"ttl\\\", \\\"mdc\\\"], \\\"notifyEnabled\\\": true, \\\"platformIds\\\": [1, 2] } ] } } \"]},\"20\":{\"h\":\"application.yml 配置\",\"t\":[\"dynamictp: config-type: properties etcd: endpoints: http://127.0.0.1:2379 auth-enable: false key: /config/user-center-dtp application: name: user-center \"]},\"21\":{\"h\":\"huawei-cloud 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 servicecomb 中，如：user-center-dtp-dev.yml\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"22\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-huawei</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-huawei</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"23\":{\"h\":\"线程池配置文件\"},\"24\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"25\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"26\":{\"h\":\"bootstrap.yml 配置\",\"t\":[\"spring: application: name: user-center cloud: servicecomb: config: # 配置中心地址，本示例使用ServiceStage环境变量。建议保留这种配置方式， # 部署的时候，不用手工修改地址。 serverAddr: ${PAAS_CSE_CC_ENDPOINT:http://127.0.0.1:30110} serverType: kie # 自定义配置 kie: customLabel: public customLabelValue: default # 自定义配置，使用文本的key/value配置项作为yaml格式配置 fileSource: application.yaml \"]},\"27\":{\"h\":\"nacos-cloud 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 nacos 中，如：user-center-dtp-dev.yml\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"注意 spring-cloud-alibaba 场景下使用 nacos 用此依赖，非 cloud 场景用前一个依赖\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"28\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-nacos</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-nacos</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"29\":{\"h\":\"线程池配置文件\"},\"30\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"31\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"32\":{\"h\":\"bootstrap.yml 配置\",\"t\":[\"spring: application: name: user-center profiles: active: dev cloud: nacos: discovery: server-addr: localhost:8848 config: server-addr: ${spring.cloud.nacos.discovery.server-addr} file-extension: yml extension-configs: - dataId: ${spring.application.name}-dtp-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} group: DEFAULT_GROUP refresh: true # 必须配置，负责自动刷新不生效 refresh-enabled: true \"]},\"33\":{\"h\":\"nacos 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放在 nacos 中，如：user-center-dtp-dev.yml\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"注意非 spring-cloud-alibaba 场景下使用 nacos 用此依赖，cloud 场景下使用 nacos 用下一个依赖\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"nacos-config-spring-boot-starter 0.2.10 及以下版本对应 springboot 2.3.12.RELEASE 及以下版本\",\"0.2.11-beta 及以上版本对应 springboot 版本 2.4.0 及以上版本，具体看官方说明\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"34\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-nacos</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-nacos</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"35\":{\"h\":\"线程池配置文件\"},\"36\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"37\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"38\":{\"h\":\"application.yml 配置\",\"t\":[\"nacos: config: server-addr: localhost:8848 type: yaml data-ids: user-center-dev.yml,user-center-dtp-dev.yml # 逗号分隔，第一个是项目主配置，第二个是动态线程池配置 auto-refresh: true group: DEFAULT_GROUP bootstrap: enable: true log-enable: true \"]},\"39\":{\"h\":\"无配置中心应用接入\",\"t\":[\"无配置中心可以用此依赖，将配置放到本地配置文件中，无动态调参功能，但有监控告警功能\",\"提示\",\"动态线程池配置文件，建议单独开一个配置文件，方便管理\",\"建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"40\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-common</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-common</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"41\":{\"h\":\"线程池配置文件\"},\"42\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"43\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"44\":{\"h\":\"配置引入\",\"t\":[\"启动类加注解导入相应线程池配置\",\"@PropertySource(value = \\\"classpath:/demo-dtp-dev.yml\\\", factory = YamlPropertySourceFactory.class) \"]},\"45\":{\"h\":\"polaris-cloud 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 polaris 中，如：user-center-dtp-dev.yml\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"46\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-polaris</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-polaris</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"47\":{\"h\":\"线程池配置文件\"},\"48\":{\"h\":\"yml 格式\"},\"49\":{\"h\":\"yml 格式\",\"t\":[\"dynamictp: enabled: true # 是否启用 dynamictp，默认true enabledCollect: true # 是否开启监控指标采集，默认true collectorTypes: micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer logPath: /home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 monitorInterval: 5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 platforms: # 通知报警平台配置 - platform: wechat platformId: 1 # 平台id，自定义 urlKey: 3a700-127-4bd-a798-c53d8b69c # webhook 中的 key receivers: test1,test2 # 接受人企微账号 - platform: ding platformId: 2 # 平台id，自定义 urlKey: f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token secret: SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 receivers: 18888888888 # 钉钉账号手机号 - platform: lark platformId: 3 urlKey: 0d944ae7-b24a-40 # webhook 中的 token secret: 3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 receivers: test1,test2 # 接受人username / openid - platform: email platformId: 4 receivers: 123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 globalExecutorProps: # 线程池配置 > 全局配置 > 字段默认值 rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 taskWrapperNames: [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"] queueTimeout: 300 runTimeout: 300 notifyItems: # 报警项，不配置自动会按默认值（查看源码NotifyItem类）配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 # 线程池配置 executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 threadPoolAliasName: 测试线程池 # 线程池别名，可选 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 6 # 核心线程数，默认1 maximumPoolSize: 8 # 最大线程数，默认cpu核数 queueCapacity: 2000 # 队列容量，默认1024 queueType: VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp allowCoreThreadTimeOut: false # 是否允许核心线程池超时，默认false waitForTasksToCompleteOnShutdown: true # 参考spring线程池设计，优雅关闭线程池，默认true awaitTerminationSeconds: 5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） preStartAllCoreThreads: false # 是否预热所有核心线程，默认false runTimeout: 200 # 任务执行超时阈值，单位（ms），默认0（不统计） queueTimeout: 100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） tryInterrupt: false # 执行超时后是否中断线程，默认false taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyEnabled: true # 是否开启报警，默认true platformIds: [1,2] # 报警平台id，不配置默认拿上层platforms配置的所有平台 \"]},\"50\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"51\":{\"h\":\"bootstrap.yml 配置\",\"t\":[\"spring: application: name: user-center cloud: polaris: address: grpc://183.47.111.80:8091 namespace: default # 设置配置中心命名空间 discovery: enabled: true stat: enabled: true port: 28082 config: auto-refresh: true # auto refresh when config file changed # 目前只支持 refresh_context 模式 refresh-type: refresh_context groups: - name: ${spring.application.name} # group name files: [ \\\"config/user-center-dtp-dev.yml\\\" ] \"]},\"52\":{\"h\":\"zookeeper-cloud 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 zookeeper 中，方便管理\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈\",\"zookpeer-cloud 应用只支持 properties 配置\",\"可以通过 ZKUI 工具快速导入下述格式的配置\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"53\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-zookeeper</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-cloud-starter-zookeeper</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"54\":{\"h\":\"线程池配置文件\"},\"55\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"56\":{\"h\":\"通过 工具导入 properties 格式\",\"t\":[\"/configserver/dev/user-center,dev=dynamictp.enabled=true /configserver/dev/user-center,dev=dynamictp.enabledCollect=true /configserver/dev/user-center,dev=dynamictp.collectorTypes=micrometer,logging /configserver/dev/user-center,dev=dynamictp.logPath=/home/logs/dynamictp/user-center/ /configserver/dev/user-center,dev=dynamictp.monitorInterval=5 /configserver/dev/user-center,dev=dynamictp.platforms[0].platform=wechat /configserver/dev/user-center,dev=dynamictp.platforms[0].platformId=1 /configserver/dev/user-center,dev=dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c /configserver/dev/user-center,dev=dynamictp.platforms[0].receivers=test1,test2 /configserver/dev/user-center,dev=dynamictp.platforms[1].platform=ding /configserver/dev/user-center,dev=dynamictp.platforms[1].platformId=2 /configserver/dev/user-center,dev=dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a /configserver/dev/user-center,dev=dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 /configserver/dev/user-center,dev=dynamictp.platforms[1].receivers=18888888888 /configserver/dev/user-center,dev=dynamictp.platforms[2].platform=lark /configserver/dev/user-center,dev=dynamictp.platforms[2].platformId=3 /configserver/dev/user-center,dev=dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 /configserver/dev/user-center,dev=dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c /configserver/dev/user-center,dev=dynamictp.platforms[2].receivers=test1,test2 /configserver/dev/user-center,dev=dynamictp.platforms[3].platform=email /configserver/dev/user-center,dev=dynamictp.platforms[3].platformId=4 /configserver/dev/user-center,dev=dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com /configserver/dev/user-center,dev=dynamictp.executors[0].threadPoolName=dtpExecutor1 /configserver/dev/user-center,dev=dynamictp.executors[0].threadPoolAliasName=测试线程池 /configserver/dev/user-center,dev=dynamictp.executors[0].executorType=common /configserver/dev/user-center,dev=dynamictp.executors[0].corePoolSize=6 /configserver/dev/user-center,dev=dynamictp.executors[0].maximumPoolSize=8 /configserver/dev/user-center,dev=dynamictp.executors[0].queueCapacity=2000 /configserver/dev/user-center,dev=dynamictp.executors[0].queueType=VariableLinkedBlockingQueue /configserver/dev/user-center,dev=dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy /configserver/dev/user-center,dev=dynamictp.executors[0].keepAliveTime=60 /configserver/dev/user-center,dev=dynamictp.executors[0].threadNamePrefix=test /configserver/dev/user-center,dev=dynamictp.executors[0].allowCoreThreadTimeOut=false /configserver/dev/user-center,dev=dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true /configserver/dev/user-center,dev=dynamictp.executors[0].awaitTerminationSeconds=5 /configserver/dev/user-center,dev=dynamictp.executors[0].preStartAllCoreThreads=false /configserver/dev/user-center,dev=dynamictp.executors[0].runTimeout=200 /configserver/dev/user-center,dev=dynamictp.executors[0].queueTimeout=100 /configserver/dev/user-center,dev=dynamictp.executors[0].taskWrapperNames[0]=ttl /configserver/dev/user-center,dev=dynamictp.executors[0].taskWrapperNames[1]=mdc /configserver/dev/user-center,dev=dynamictp.executors[0].notifyEnabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].platformIds[0]=1 /configserver/dev/user-center,dev=dynamictp.executors[0].platformIds[1]=2 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[0].type=change /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[0].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[1].type=capacity /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[1].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[1].threshold=80 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[1].platformIds[0]=2 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[1].interval=120 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[2].type=liveness /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[2].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[2].threshold=80 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[3].type=reject /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[3].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[3].threshold=100 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[4].type=run_timeout /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[4].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[4].threshold=100 /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[5].type=queue_timeout /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[5].enabled=true /configserver/dev/user-center,dev=dynamictp.executors[0].notifyItems[5].threshold=100 \"]},\"57\":{\"h\":\"bootstrap.yml 配置\",\"t\":[\"spring: application: name: user-center cloud: zookeeper: connect-string: 127.0.0.1:2181 config: root: /configserver/dev enabled: true profiles: active: dev \"]},\"58\":{\"h\":\"zookeeper 应用接入\",\"t\":[\"提示\",\"动态线程池配置文件，建议单独开一个文件放到 zookeeper 中，方便管理\",\"如果配置中心支持 yml 格式，建议最好使用 yml 文件配置，可读性、可操作性更友好\",\"给出的是全配置项，使用不到的项或者使用默认值的项都可以删除，减少配置量\",\"集成失败 90% 以上情况都是使用姿势有误 / 版本兼容问题，有版本兼容性问题可以提 Issues 或加群反馈。\",\"zookpeer 支持 properties / json 两种配置\",\"可以通过 ZKUI 工具快速导入下述格式的配置\",\"警告\",\"下述配置项的值都是随便填写的，请不要直接使用该值，根据自己项目做调整\"]},\"59\":{\"h\":\"maven 依赖\",\"t\":[\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-zookeeper</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-zookeeper</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"60\":{\"h\":\"线程池配置文件\"},\"61\":{\"h\":\"properties 格式\",\"t\":[\"dynamictp.enabled=true # 是否启用 dynamictp，默认true dynamictp.enabledCollect=true # 是否开启监控指标采集，默认true dynamictp.collectorTypes=micrometer,logging # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer dynamictp.logPath=/home/logs/dynamictp/user-center/ # 监控日志数据路径，默认 ${user.home}/logs，采集类型非logging不用配置 dynamictp.monitorInterval=5 # 监控时间间隔（报警检测、指标采集），默认5s # 告警渠道 dynamictp.platforms[0].platform=wechat # 第一个通知平台为微信 dynamictp.platforms[0].platformId=1 # 平台id，自定义 dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c # webhook 中的 key dynamictp.platforms[0].receivers=test1,test2 # 接受人企微账号 dynamictp.platforms[1].platform=ding # 第二个通知平台为钉钉 dynamictp.platforms[1].platformId=2 # 平台id，自定义 dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a # webhook 中的 access_token dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 # 安全设置在验签模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[1].receivers=18888888888 # 钉钉账号手机号 dynamictp.platforms[2].platform=lark # 第三个通知平台为飞书 dynamictp.platforms[2].platformId=3 # 平台id，自定义 dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 # webhook 中的 token dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c # 安全设置在签名校验模式下才的秘钥，非验签模式没有此值 dynamictp.platforms[2].receivers=test1,test2 # 接受人username / openid dynamictp.platforms[3].platform=email # 第四个通知平台为邮件 dynamictp.platforms[3].platformId=4 # 平台id，自定义 dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com # 收件人邮箱，多个用逗号隔开 # 全局配置 dynamictp.globalExecutorProps.rejectedHandlerType=CallerRunsPolicy dynamictp.globalExecutorProps.queueType=VariableLinkedBlockingQueue dynamictp.globalExecutorProps.waitForTasksToCompleteOnShutdown=true dynamictp.globalExecutorProps.awaitTerminationSeconds=3 dynamictp.globalExecutorProps.taskWrapperNames=swTrace,ttl,mdc dynamictp.globalExecutorProps.queueTimeout=300 dynamictp.globalExecutorProps.runTimeout=300 dynamictp.globalExecutorProps.notifyItems[0].type=change dynamictp.globalExecutorProps.notifyItems[0].enabled=true dynamictp.globalExecutorProps.notifyItems[1].type=capacity dynamictp.globalExecutorProps.notifyItems[1].enabled=true dynamictp.globalExecutorProps.notifyItems[1].threshold=80 dynamictp.globalExecutorProps.notifyItems[1].platformIds=2 dynamictp.globalExecutorProps.notifyItems[1].interval=120 dynamictp.globalExecutorProps.notifyItems[2].type=liveness dynamictp.globalExecutorProps.notifyItems[2].enabled=true dynamictp.globalExecutorProps.notifyItems[2].threshold=80 dynamictp.globalExecutorProps.notifyItems[3].type=reject dynamictp.globalExecutorProps.notifyItems[3].enabled=true dynamictp.globalExecutorProps.notifyItems[3].threshold=100 dynamictp.globalExecutorProps.notifyItems[4].type=run_timeout dynamictp.globalExecutorProps.notifyItems[4].enabled=true dynamictp.globalExecutorProps.notifyItems[4].threshold=100 dynamictp.globalExecutorProps.notifyItems[5].type=queue_timeout dynamictp.globalExecutorProps.notifyItems[5].enabled=true dynamictp.globalExecutorProps.notifyItems[5].threshold=100 # 线程池配置 dynamictp.executors[0].threadPoolName=dtpExecutor1 # 线程池名称，必填 dynamictp.executors[0].threadPoolAliasName=测试线程池 # 线程池别名，可选 dynamictp.executors[0].executorType=common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common dynamictp.executors[0].corePoolSize=6 # 核心线程数，默认1 dynamictp.executors[0].maximumPoolSize=8 # 最大线程数，默认cpu核数 dynamictp.executors[0].queueCapacity=2000 # 队列容量，默认1024 dynamictp.executors[0].queueType=VariableLinkedBlockingQueue # 任务队列，查看源码QueueTypeEnum枚举类，默认VariableLinkedBlockingQueue dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy dynamictp.executors[0].keepAliveTime=60 # 空闲线程等待超时时间，默认60 dynamictp.executors[0].threadNamePrefix=test # 线程名前缀，默认dtp dynamictp.executors[0].allowCoreThreadTimeOut=false # 是否允许核心线程池超时，默认false dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true # 参考spring线程池设计，优雅关闭线程池，默认true dynamictp.executors[0].awaitTerminationSeconds=5 # 优雅关闭线程池时，阻塞等待线程池中任务执行时间，默认3，单位（s） dynamictp.executors[0].preStartAllCoreThreads=false # 是否预热所有核心线程，默认false dynamictp.executors[0].runTimeout=200 # 任务执行超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].queueTimeout=100 # 任务在队列等待超时阈值，单位（ms），默认0（不统计） dynamictp.executors[0].taskWrapperNames=ttl,mdc # 任务包装器名称，继承TaskWrapper接口 dynamictp.executors[0].notifyEnabled=true # 是否开启报警，默认true dynamictp.executors[0].platformIds=1,2 \"]},\"62\":{\"h\":\"json 格式\",\"t\":[\"{ \\\"dynamictp\\\": { \\\"enabled\\\": true, \\\"enabledCollect\\\": true, \\\"collectorTypes\\\": \\\"micrometer,logging\\\", \\\"logPath\\\": \\\"/home/logs/dynamictp/user-center/\\\", \\\"monitorInterval\\\": 5, \\\"platforms\\\": [ { \\\"platform\\\": \\\"wechat\\\", \\\"platformId\\\": 1, \\\"urlKey\\\": \\\"3a700-127-4bd-a798-c53d8b69c\\\", \\\"receivers\\\": \\\"test1,test2\\\" }, { \\\"platform\\\": \\\"ding\\\", \\\"platformId\\\": 2, \\\"urlKey\\\": \\\"f80dad441fcd655438f4a08dcd6a\\\", \\\"secret\\\": \\\"SECb5441fa6f375d5b9d21\\\", \\\"receivers\\\": \\\"18888888888\\\" }, { \\\"platform\\\": \\\"lark\\\", \\\"platformId\\\": 3, \\\"urlKey\\\": \\\"0d944ae7-b24a-40\\\", \\\"secret\\\": \\\"3a750012874bdac5c3d8b69c\\\", \\\"receivers\\\": \\\"test1,test2\\\" }, { \\\"platform\\\": \\\"email\\\", \\\"platformId\\\": 4, \\\"receivers\\\": \\\"123456@qq.com,789789@qq.com\\\" } ], \\\"globalExecutorProps\\\": { \\\"rejectedHandlerType\\\": \\\"CallerRunsPolicy\\\", \\\"queueType\\\": \\\"VariableLinkedBlockingQueue\\\", \\\"waitForTasksToCompleteOnShutdown\\\": true, \\\"awaitTerminationSeconds\\\": 3, \\\"taskWrapperNames\\\": [\\\"swTrace\\\", \\\"ttl\\\", \\\"mdc\\\"], \\\"queueTimeout\\\": 300, \\\"runTimeout\\\": 300, \\\"notifyItems\\\": [ { \\\"type\\\": \\\"change\\\", \\\"enabled\\\": true }, { \\\"type\\\": \\\"capacity\\\", \\\"enabled\\\": true, \\\"threshold\\\": 80, \\\"platformIds\\\": [2], \\\"interval\\\": 120 }, { \\\"type\\\": \\\"liveness\\\", \\\"enabled\\\": true, \\\"threshold\\\": 80 }, { \\\"type\\\": \\\"reject\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 }, { \\\"type\\\": \\\"run_timeout\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 }, { \\\"type\\\": \\\"queue_timeout\\\", \\\"enabled\\\": true, \\\"threshold\\\": 100 } ] }, \\\"executors\\\": [ { \\\"threadPoolName\\\": \\\"dtpExecutor1\\\", \\\"threadPoolAliasName\\\": \\\"测试线程池\\\", \\\"executorType\\\": \\\"common\\\", \\\"corePoolSize\\\": 6, \\\"maximumPoolSize\\\": 8, \\\"queueCapacity\\\": 2000, \\\"queueType\\\": \\\"VariableLinkedBlockingQueue\\\", \\\"rejectedHandlerType\\\": \\\"CallerRunsPolicy\\\", \\\"keepAliveTime\\\": 60, \\\"threadNamePrefix\\\": \\\"test\\\", \\\"allowCoreThreadTimeOut\\\": false, \\\"waitForTasksToCompleteOnShutdown\\\": true, \\\"awaitTerminationSeconds\\\": 5, \\\"preStartAllCoreThreads\\\": false, \\\"runTimeout\\\": 200, \\\"queueTimeout\\\": 100, \\\"taskWrapperNames\\\": [\\\"ttl\\\", \\\"mdc\\\"], \\\"notifyEnabled\\\": true, \\\"platformIds\\\": [1, 2] } ] } } \"]},\"63\":{\"h\":\"通过 工具导入 properties 格式\",\"t\":[\"/configserver/dev/user-center=dynamictp.enabled=true /configserver/dev/user-center=dynamictp.enabledCollect=true /configserver/dev/user-center=dynamictp.collectorTypes=micrometer,logging /configserver/dev/user-center=dynamictp.logPath=/home/logs/dynamictp/user-center/ /configserver/dev/user-center=dynamictp.monitorInterval=5 /configserver/dev/user-center=dynamictp.platforms[0].platform=wechat /configserver/dev/user-center=dynamictp.platforms[0].platformId=1 /configserver/dev/user-center=dynamictp.platforms[0].urlKey=3a700-127-4bd-a798-c53d8b69c /configserver/dev/user-center=dynamictp.platforms[0].receivers=test1,test2 /configserver/dev/user-center=dynamictp.platforms[1].platform=ding /configserver/dev/user-center=dynamictp.platforms[1].platformId=2 /configserver/dev/user-center=dynamictp.platforms[1].urlKey=f80dad441fcd655438f4a08dcd6a /configserver/dev/user-center=dynamictp.platforms[1].secret=SECb5441fa6f375d5b9d21 /configserver/dev/user-center=dynamictp.platforms[1].receivers=18888888888 /configserver/dev/user-center=dynamictp.platforms[2].platform=lark /configserver/dev/user-center=dynamictp.platforms[2].platformId=3 /configserver/dev/user-center=dynamictp.platforms[2].urlKey=0d944ae7-b24a-40 /configserver/dev/user-center=dynamictp.platforms[2].secret=3a750012874bdac5c3d8b69c /configserver/dev/user-center=dynamictp.platforms[2].receivers=test1,test2 /configserver/dev/user-center=dynamictp.platforms[3].platform=email /configserver/dev/user-center=dynamictp.platforms[3].platformId=4 /configserver/dev/user-center=dynamictp.platforms[3].receivers=123456@qq.com,789789@qq.com /configserver/dev/user-center=dynamictp.executors[0].threadPoolName=dtpExecutor1 /configserver/dev/user-center=dynamictp.executors[0].threadPoolAliasName=测试线程池 /configserver/dev/user-center=dynamictp.executors[0].executorType=common /configserver/dev/user-center=dynamictp.executors[0].corePoolSize=6 /configserver/dev/user-center=dynamictp.executors[0].maximumPoolSize=8 /configserver/dev/user-center=dynamictp.executors[0].queueCapacity=2000 /configserver/dev/user-center=dynamictp.executors[0].queueType=VariableLinkedBlockingQueue /configserver/dev/user-center=dynamictp.executors[0].rejectedHandlerType=CallerRunsPolicy /configserver/dev/user-center=dynamictp.executors[0].keepAliveTime=60 /configserver/dev/user-center=dynamictp.executors[0].threadNamePrefix=test /configserver/dev/user-center=dynamictp.executors[0].allowCoreThreadTimeOut=false /configserver/dev/user-center=dynamictp.executors[0].waitForTasksToCompleteOnShutdown=true /configserver/dev/user-center=dynamictp.executors[0].awaitTerminationSeconds=5 /configserver/dev/user-center=dynamictp.executors[0].preStartAllCoreThreads=false /configserver/dev/user-center=dynamictp.executors[0].runTimeout=200 /configserver/dev/user-center=dynamictp.executors[0].queueTimeout=100 /configserver/dev/user-center=dynamictp.executors[0].taskWrapperNames[0]=ttl /configserver/dev/user-center=dynamictp.executors[0].taskWrapperNames[1]=mdc /configserver/dev/user-center=dynamictp.executors[0].notifyEnabled=true /configserver/dev/user-center=dynamictp.executors[0].platformIds[0]=1 /configserver/dev/user-center=dynamictp.executors[0].platformIds[1]=2 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[0].type=change /configserver/dev/user-center=dynamictp.executors[0].notifyItems[0].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[1].type=capacity /configserver/dev/user-center=dynamictp.executors[0].notifyItems[1].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[1].threshold=80 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[1].platformIds[0]=2 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[1].interval=120 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[2].type=liveness /configserver/dev/user-center=dynamictp.executors[0].notifyItems[2].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[2].threshold=80 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[3].type=reject /configserver/dev/user-center=dynamictp.executors[0].notifyItems[3].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[3].threshold=100 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[4].type=run_timeout /configserver/dev/user-center=dynamictp.executors[0].notifyItems[4].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[4].threshold=100 /configserver/dev/user-center=dynamictp.executors[0].notifyItems[5].type=queue_timeout /configserver/dev/user-center=dynamictp.executors[0].notifyItems[5].enabled=true /configserver/dev/user-center=dynamictp.executors[0].notifyItems[5].threshold=100 \"]},\"64\":{\"h\":\"application.yml 配置\",\"t\":[\"spring: application: name: user-center dynamic: tp: config-type: json # zookeeper 支持 properties / json 配置 zookeeper: zk-connect-str: 127.0.0.1:2181 root-node: /configserver/dev node: dtp-group config-key: user-center-dtp-json # json 格式会用到 \"]},\"65\":{\"h\":\"brpc 线程池管理\"},\"66\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-brpc</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-brpc</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 brpc 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s brpcTp: # brpc 线程池配置 - threadPoolName: biz1#server # 名称规则：biz_thread_pool_name + \\\"#\\\" + client/server corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, brpc server executors init end, executors: {rpc#server=ExecutorWrapper(threadPoolName=rpc#server, executor=java.util.concurrent.ThreadPoolExecutor@162475a[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp brpcServerTp adapter, [rpc#server] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [17 => 100], maxPoolSize: [500 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称规则：biz_thread_pool_name + \\\"#\\\" + client / server（可以在启动日志找输出的线程池名称）\",\"brpc 线程池享有动态调参、监控、通知告警完整的功能\",\"支持 client / server 端线程池管理\",\"队列大小不能调整\"]},\"67\":{\"h\":\"dubbo 线程池管理\",\"t\":[\"你还在为 Dubbo 线程池耗尽而烦恼吗？😭😭😭\",\"快快使用 DynamicTp 的三方中间件线程池管理功能吧，一定程度上能减少你的烦恼。😅😅😅\",\"提示\",\"同时支持以下三种 dubbo 版本\",\"apache dubbo\",\"alibaba dubbo\",\"dubbox\"]},\"68\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-dubbo</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-dubbo</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 dubbo 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s dubboTp: # dubbo 线程池配置 - threadPoolName: dubboTp#20880 # 名称规则：dubboTp + \\\"#\\\" + 协议端口 threadPoolAliasName: 测试线程池 corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, apache dubbo provider executors init end, executors: {dubboTp#20880=ExecutorWrapper(threadPoolName=dubboTp#20880, executor=java.util.concurrent.ThreadPoolExecutor@1b3960b[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp dubboTp adapter, [dubboTp#20880] refreshed end, changed keys: [keepAliveTime, corePoolSize], corePoolSize: [200 => 100], maxPoolSize: [200 => 200], keepAliveTime: [0 => 60] \",\"提示\",\"线程池名称规则：dubboTp + \\\"#\\\" + 协议端口（可以在启动日志找输出的线程池名称）\",\"dubbo 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\",\"只增强服务 provider 端线程池\"]},\"69\":{\"h\":\"grpc 线程池管理\"},\"70\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-grpc</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-grpc</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 grpc 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s grpcTp: # grpc 线程池配置 - threadPoolName: shadedNettyTp corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, grpc server executors init end, executors: {shadedNettyTp=ExecutorWrapper(threadPoolName=shadedNettyTp, executor=java.util.concurrent.ThreadPoolExecutor@176b7d8[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true), inProcessTp=ExecutorWrapper(threadPoolName=inProcessTp, executor=java.util.concurrent.ThreadPoolExecutor@176b7d8[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp grpcTp adapter, [shadedNettyTp] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [0 => 100], maxPoolSize: [2147483647 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"grpc 官方没有提供 springboot starter，我们对开源项目 https://github.com/yidongnan/grpc-spring-boot-starter 进行了适配，该项目也是 star 最多最活跃的 grpc springboot starter\",\"线程池名称规则，基于上述项目提供的三种模式 shadedNettyGrpcServerLifecycle / inProcessGrpcServerLifecycle / nettyGrpcServerLifecycle，分别对应 shadedNettyTp / inProcessTp / nettyTp 三个名称（可以在启动日志找输出的线程池名称）\",\"grpc 线程池享有动态调参、监控、通知告警完整的功能\",\"只支持 server 端线程池管理\",\"队列大小不能调整\"]},\"71\":{\"h\":\"hystrix 线程池管理\"},\"72\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-hystrix</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-hystrix</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 hystrix 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s hystrixTp: # hystrix 线程池配置 - threadPoolName: testThreadPoolKey corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"第一次访问时看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, hystrix init end, executor ExecutorWrapper(threadPoolName=testThreadPoolKey, executor=java.util.concurrent.ThreadPoolExecutor@19f57a1[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=[wechat, ding, lark, email], enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=[wechat, ding, lark, email], enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=[wechat, ding, lark, email], enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true) DynamicTp hystrixTp adapter, [testThreadPoolKey] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [5 => 100], maxPoolSize: [5 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称在项目启动日志里寻找\",\"hystrix 线程池在第一次访问时才进行初始化，服务启动并不会立即初始化\",\"hystrix 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\"]},\"73\":{\"h\":\"jetty 线程池管理\"},\"74\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 jetty 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s jettyTp: # jetty weberver线程池配置 corePoolSize: 100 maximumPoolSize: 200 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, web server executor init end, executor: QueuedThreadPool[qtp32153965]@1eaa16d{STARTED,8<=10<=200,i=0,r=-1,q=0}[ReservedThreadExecutor@12e242d{reserved=0/16,pending=0}] DynamicTp adapter [jettyTp] refreshed end, corePoolSize: [10 => 100], maxPoolSize: [200 => 200] \",\"提示\",\"线程池名称：jettyTp\",\"jetty 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\"]},\"75\":{\"h\":\"liteflow 线程池管理\"},\"76\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-liteflow</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-liteflow</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 brpc 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s liteflowTp: - threadPoolName: liteflowTp#LiteFlowDefaultWhenExecutorBuilder corePoolSize: 10 maximumPoolSize: 20 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, liteflowTp init end, executors: {liteflowTp#LiteFlowDefaultWhenExecutorBuilder=ExecutorWrapper(threadPoolName=liteflowTp#LiteFlowDefaultWhenExecutorBuilder, executor=java.util.concurrent.ThreadPoolExecutor@162475a[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp adapter, [liteflowTp#LiteFlowDefaultWhenExecutorBuilder] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [17 => 100], maxPoolSize: [500 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称规则：liteflowTp + \\\"#\\\" + 线程池构建者的 Class 类名（可以在启动日志找输出的线程池名称）\",\"liteflow 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\",\"目前只能拿到服务启动时能获取到的线程池，懒加载的线程池获取不到\"]},\"77\":{\"h\":\"motan 线程池管理\"},\"78\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-motan</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-motan</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 motan 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s motanTp: # motan server 线程池配置 - threadPoolName: motanTp#8002 corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, motan server executors init end, executors: {motanTp#8002=ExecutorWrapper(threadPoolName=motanTp#8002, executor=com.weibo.api.motan.transport.netty.StandardThreadExecutor@174b233[Running, pool size = 20, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp motanTp adapter, [motanTp#8002] refreshed end, changed keys: [corePoolSize], corePoolSize: [20 => 100], maxPoolSize: [200 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称规则：motanTp + \\\"#\\\" + URL 端口号（可以在启动日志找输出的线程池名称）\",\"motan 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\",\"只支持服务 provider 端线程池\"]},\"79\":{\"h\":\"okhttp3 线程池管理\"},\"80\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-okhttp3</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-okhttp3</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 okhttp3 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s okhttp3Tp: # okhttp3 线程池配置 - threadPoolName: okHttpClientTp corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, okhttp3 executors init end, executors: {okHttpClientTp=ExecutorWrapper(threadPoolName=okHttpClientTp, executor=java.util.concurrent.ThreadPoolExecutor@f336fd[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp okhttp3Tp adapter, [okHttpClientTp] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [0 => 100], maxPoolSize: [2147483647 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"服务启动会自动从 Spring 容器中获取所有被 Spring 容器管理的 OkHttpClient 实例\",\"线程池名称规则：beanName + Tp（可以在启动日志找输出的线程池名称）\",\"okhttp3 线程池只在异步请求时生效，同步请求不会使用 okhttp3 线程池\",\"okhttp3 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\"]},\"81\":{\"h\":\"rabbitmq 线程池管理\"},\"82\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-rabbitmq</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-rabbitmq</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 rabbitmq 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s rabbitmqTp: # rabbitmq 线程池配置 - threadPoolName: test corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, rabbitmq executors init end, executors: {cachingConnectionFactoryTp=ExecutorWrapper(threadPoolName=cachingConnectionFactoryTp, executor=java.util.concurrent.ThreadPoolExecutor@f336fd[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp rabbitmq adapter, [cachingConnectionFactoryTp] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [0 => 100], maxPoolSize: [2147483647 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称在项目启动日志里寻找\",\"rabbitmq 线程池享有动态调参、监控、通知告警完整的功能\",\"线程池名称规则：BeanName（AbstractConnectionFactory） + Tp（可以在启动日志找输出的线程池名称）\"]},\"83\":{\"h\":\"rocketmq 线程池管理\",\"t\":[\"你还在为 RocketMq 消费积压而烦恼吗？😭😭😭\",\"快快使用 DynamicTp 的三方中间件线程池管理功能吧，一定程度上能减少你的烦恼。😅😅😅\"]},\"84\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-rocketmq</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-rocketmq</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 rocketmq 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s rocketMqTp: # rocketmq 线程池配置 - threadPoolName: rocketMqTp#consumer#concurrently#group # 名称规则：rocketMqTp#consumer#concurrently#group corePoolSize: 200 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, rocketMq consumer executors init end, executors: {group#topic=ExecutorWrapper(threadPoolName=rocketMqTp#consumer#concurrently#sms, executor=java.util.concurrent.ThreadPoolExecutor@1acd1f1[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp rocketMqTp adapter, [rocketMqTp#consumer#concurrently#sms] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [20 => 200], maxPoolSize: [20 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称规则：rocketMqTp#consumer#concurrently#group（可以在启动日志找输出的线程池名称）\",\"rocketmq 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\",\"支持开源 rocketmq、阿里云 ons rocketmq\"]},\"85\":{\"h\":\"sofarpc 线程池管理\"},\"86\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-sofa</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-sofa</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 sofarpc 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s sofaTp: # sofa 线程池配置 - threadPoolName: test corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, sofa executors init end, executors: {test=ExecutorWrapper(threadPoolName=test, executor=java.util.concurrent.ThreadPoolExecutor@f336fd[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp sofa adapter, [test] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [0 => 100], maxPoolSize: [2147483647 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称在项目启动日志里寻找\",\"sofa 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\"]},\"87\":{\"h\":\"tars 线程池管理\"},\"88\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-tars</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-tars</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 tars 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s tarsTp: # tars 线程池配置 - threadPoolName: test corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, tars executors init end, executors: {test=ExecutorWrapper(threadPoolName=test, executor=java.util.concurrent.ThreadPoolExecutor@f336fd[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], threadPoolAliasName=null, notifyItems=[NotifyItem(platforms=null, enabled=true, type=liveness, threshold=70, interval=120, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=change, threshold=0, interval=1, clusterLimit=1), NotifyItem(platforms=null, enabled=true, type=capacity, threshold=70, interval=120, clusterLimit=1)], notifyEnabled=true)} DynamicTp tars adapter, [test] refreshed end, changed keys: [corePoolSize, maxPoolSize], corePoolSize: [0 => 100], maxPoolSize: [2147483647 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称在项目启动日志里寻找\",\"tars 线程池享有动态调参、监控、通知告警完整的功能\",\"队列大小不能调整\"]},\"89\":{\"h\":\"tomcat 线程池管理\"},\"90\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 tomcat 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s tomcatTp: # tomcat webserver 线程池配置 threadPoolAliasName: tomcat 线程池 # 线程池别名，可选 corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, web server executor init end, executor: org.apache.tomcat.util.threads.ThreadPoolExecutor@114579e[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] DynamicTp adapter [tomcatTp] refreshed end, corePoolSize: [10 => 100], maxPoolSize: [200 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称：tomcatTp\",\"tomcat 线程池享有动态调参、监控、通知告警完整的功能\",\"tomcat 线程池并没用 juc 线程池，自己维护了一个 ThreadPoolExecutor\",\"tomcat 队列大小不能修改\"]},\"91\":{\"h\":\"undertow 线程池管理\"},\"92\":{\"h\":\"使用步骤\",\"t\":[\"引入下述依赖\",\"SpringBoot1x、2x 用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-webserver</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件中配置 undertow 线程池\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s undertowTp: # undertow webserver线程池配置 corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 runTimeout: 200 queueTimeout: 100 platformIds: [1,2] # 通知报警平台id，不配置默认拿上层platforms配置的所有平台 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警、拒绝报警、任务超时报警） - type: change enabled: true - type: capacity # 队列容量使用率，报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值，默认70，意思是队列使用率达到70%告警 platformIds: [2] # 可选配置，本配置优先级 > 所属线程池platformIds > 全局配置platforms interval: 120 # 报警间隔（单位：s），默认120 - type: liveness # 线程池活性 enabled: true threshold: 80 # 报警阈值，默认 70，意思是活性达到70%告警 - type: reject # 触发任务拒绝告警 enabled: true threshold: 100 # 默认阈值10 - type: run_timeout # 任务执行超时告警 enabled: true threshold: 100 # 默认阈值10 - type: queue_timeout # 任务排队超时告警 enabled: true threshold: 100 # 默认阈值10 \",\"启动日志\",\"服务启动看到有如下日志输出说明接入成功，如果开启了通知，同时会推送参数修改通知\",\"DynamicTp adapter, web server executor init end, executor: org.xnio.nio.NioXnioWorker@17ce31c DynamicTp adapter [undertowTp] refreshed end, corePoolSize: [10 => 100], maxPoolSize: [200 => 200], keepAliveTime: [60 => 60] \",\"提示\",\"线程池名称：undertowTp\",\"undertow 线程池享有动态调参、监控、通知告警完整的功能\",\"undertow 队列大小不能修改\",\"undertow 内部使用 xnio 网络框架，类似 netty\"]},\"93\":{\"h\":\"架构设计\"},\"94\":{\"h\":\"模块划分\",\"t\":[\"配置变更监听模块\",\"配置变更监听模块\",\"监听配置中心配置变动（已实现 Nacos、Apollo、Zookeeper、Consul、Etcd、Polaris、ServiceComb）的监听器，可通过内部提供的 SPI 接口扩展其他实现\",\"解析配置文件内容，内置实现 yml、properties、json 配置文件的解析，可通过内部提供的 SPI 接口扩展其他实现\",\"通知线程池管理模块实现配置参数的刷新\",\"线程池管理模块\",\"线程池管理模块\",\"服务启动时从配置中心拉取配置，生成线程池实例注册到内部线程池注册中心以及 Spring 容器中\",\"接受配置监听模块的刷新事件，实现线程池参数的刷新\",\"代码中通过依赖注入（推荐）或者 DtpRegistry.getDtpExecutor(\\\"name\\\") 方法根据线程池名称来获取线程池实例\",\"监控模块\",\"实现监控指标采集以及输出，已支持以下三种方式，也可通过内部提供的 SPI 接口扩展其他实现\",\"监控模块\",\"提供定时任务采集 + 实时获取两种采集方式\",\"定时以 JsonLog 输出到磁盘指定目录，可以自己采集解析日志存储，结合 Grafana 做监控大盘\",\"定时将指标注册到 MicroMeter 中，引入 MicroMeter 相关采集器依赖（如 Prometheus），暴露相关端点，采集指标数据，结合 Grafana 做监控大盘\",\"暴露自定义 SpringBoot Endpoint 端点（dynamic-tp），通过 http 方式实时访问\",\"通知告警模块\",\"对接办公平台，实现通知告警功能，已支持钉钉、企微、飞书、邮件、云之家，可通过内部提供的 SPI 接口扩展其他实现，通知告警类型如下\",\"通知告警模块\",\"线程池主要参数变更通知\",\"阻塞队列容量达到设置的告警阈值\",\"线程池活性达到设置的告警阈值\",\"触发拒绝策略告警，包含 A、B 两项指标，A：该报警项前后两次报警区间累加值，B：该报警项累计值\",\"任务执行超时告警，包含 A、B 两项指标，A：该报警项前后两次报警区间累加值，B：该报警项累计值\",\"任务等待超时告警，包含 A、B 两项指标，A：该报警项前后两次报警区间累加值，B：该报警项累计值\",\"其中 2 3 两项是依赖监控模块的定时任务触发，4 5 6 三项是实时触发\",\"三方组件线程池管理模块\",\"利用 Spring 的事件机制和核心逻辑解耦\",\"三方包管理模块\",\"服务启动获取第三方中间件的线程池，被框架管理起来，已集成 Tomcat、Jetty、Undertow、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars、SofaRpc、RabbitMq 等组件线程池\",\"接受参数刷新、指标收集、通知报警事件，进行相应的处理\"]},\"95\":{\"h\":\"代码结构\",\"t\":[\"以多 Module 的方式组织代码，提升代码的可维护性，方便扩展\",\"图片.png\",\"代码结构\",\"adapter 模块：主要是适配一些第三方组件的线程池管理，目前已经实现的有 SpringBoot 内置的三大 web 容器（Tomcat、Jetty、Undertow）、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars、SofaRpc、RabbitMq 的线程池管理， 后续会接入其他常用组件的线程池管理\",\"common 模块：主要是一些各个模板都会用到的类，解耦依赖，复用代码，大家日常开发中可能也经常会这样组织代码\",\"core 模块：该框架的核心代码都在这个模块里，包括动态调整参数，监控报警，以及串联整个项目流程都在此处\",\"example 模块：提供一个简单使用示例，方便使用者参照\",\"extension 模块：放一些扩展功能实现，比如基于 redis 的流控扩展、邮件发送扩展、skywalking 上下文传递扩展等\",\"logging 模块：用于配置框架内部日志的输出，目前主要用于输出线程池监控指标数据到指定文件\",\"starter 模块：提供独立功能模块的依赖封装、自动配置等相关\",\"test 模块：主要是一些单元测试\"]},\"96\":{\"h\":\"架构图\",\"t\":[\"技术架构\"]},\"97\":{\"h\":\"项目背景\"},\"98\":{\"h\":\"使用痛点\",\"t\":[\"使用线程池 ThreadPoolExecutor 过程中你是否有以下痛点呢？\",\"痛点\",\"代码中创建了一个 ThreadPoolExecutor，但是不知道那几个核心参数设置多少比较合适\",\"凭经验设置参数值，上线后发现需要调整，改代码重新发布服务，非常麻烦\",\"线程池相对开发人员来说是个黑盒，运行情况不能及时感知到，直到出现问题\",\"如果有以上痛点，动态可监控线程池框架（DynamicTp）或许能帮助到你。\",\"如果看过 ThreadPoolExecutor 的源码，大概可以知道它对核心参数基本都有提供 set / get 方法 以及一些扩展方法，可以在运行时动态修改、获取相应的值，这些方法有：\",\"public void setCorePoolSize(int corePoolSize); public void setMaximumPoolSize(int maximumPoolSize); public void setKeepAliveTime(long time, TimeUnit unit); public void setThreadFactory(ThreadFactory threadFactory); public void setRejectedExecutionHandler(RejectedExecutionHandler handler); public void allowCoreThreadTimeOut(boolean value); public int getCorePoolSize(); public int getMaximumPoolSize(); public long getKeepAliveTime(TimeUnit unit); public BlockingQueue<Runnable> getQueue(); public RejectedExecutionHandler getRejectedExecutionHandler(); public boolean allowsCoreThreadTimeOut(); protected void beforeExecute(Thread t, Runnable r); protected void afterExecute(Runnable r, Throwable t); \",\"现在大多数的互联网项目都会采用微服务化部署，有一套自己的服务治理体系，微服务组件中的分布式配置中心 扮演的就是动态修改配置，实时生效的角色。\",\"那么我们是否可以结合配置中心来做运行时线程池参数的动态调整呢？\",\"答案是肯定的，而且配置中心相对都是高可用的，使用它也不用过于担心配置推送失败这类问题，而且也能减少研发动态线程池组件本身的难度和接入的工作量。\",\"综上，可以总结出以下的背景\",\"广泛性：在 Java 开发中，想要提高系统性能，线程池已经是一个 90% 以上开发人员都会选择使用的基础工具\",\"不确定性：项目中可能存在很多线程池，既有 IO 密集型的，也有 CPU 密集型的，但线程池的核心参数并不好确定，需要有套机制在运行过程中动态去调整参数\",\"无感知性：线程池运行过程中的各项指标一般感知不到，需要有套监控报警机制在事前、事中就能让开发人员感知到线程池的运行状况，及时处理\",\"高可用性：配置变更需要及时推送到客户端，需要有高可用的配置管理推送服务，配置中心是现在大多数互联网系统都会使用的组件，与之结合可以极大提高系统可用性\"]},\"99\":{\"h\":\"性能测试\"},\"100\":{\"h\":\"测试环境配置\",\"t\":[\"此次基准测试使用 JMH（Java 微基准测试工具）进行，配置如下：\",\"提示\",\"JDK 版本：OpenJDK 1.8.0_212\",\"虚拟机：OpenJDK 64-Bit Server VM (25.212-b03)\",\"JVM 参数：-Xmn256m -Xmx1024m -XX:+UseConcMarkSweepGC\"]},\"101\":{\"h\":\"性能对比\",\"t\":[\"提示\",\"测试单线程模式下使用 juc 标准线程池 与 dtp 线程池吞吐量的对比。\",\"通过执行一些 CPU 密集型操作（如计算质数）来模拟不同 QPS 下的情况，测试逻辑见 ExecutorBenchmark。\",\"可以看到在单机 QPS 非常大的时候（100W+），dtp 带来的性能损耗会比较大。这种情况业务逻辑本身的耗时非常小，而 dtp 一系列的增强、统计、检查等操作会消耗一定的时间。\",\"而单机 QPS 在 10W 以下的时候，dtp 的性能损耗就比较小了，对大多数场景来说都适用。\",\"吞吐量数据表（单位：ops/s）\",\"max\",\"dtp qps\",\"standard qps\",\"损失比 (%)\",\"100\",\"835879.48\",\"2024530.59\",\"58.71\",\"2000\",\"96505.46\",\"102962.75\",\"6.27\",\"4000\",\"40681.05\",\"41844.19\",\"2.78\",\"6000\",\"24098.04\",\"24421.99\",\"1.33\",\"8000\",\"16477.24\",\"16521.77\",\"0.27\",\"吞吐量柱状图\"]},\"102\":{\"h\":\"功能特性\"},\"103\":{\"h\":\"功能特性\",\"t\":[\"基于以上背景分析，我们对线程池 ThreadPoolExecutor 做一些扩展增强，主要实现以下目标\",\"目标\",\"实现对运行中线程池参数的动态修改，实时生效\",\"实时监控线程池的运行状态，触发设置的报警策略时报警，报警信息推送办公平台\",\"定时采集线程池指标数据，配合像 Grafana 这种可视化监控平台做大盘监控\",\"集成常用三方中间件内部线程池管理\",\"经过多个版本的迭代，目前最新版本 v1.2.0 具有以下特性 ✅\",\"代码零侵入：我们改变了线程池以往的使用姿势，所有配置均放在配置中心，服务启动时会从配置中心拉取配置生成线程池对象放到 Spring 容器中，使用时直接从 Spring 容器中获取，对业务代码零侵入\",\"轻量简单：使用起来极其简单，引入相应依赖，接入只需简单 4 步就可完成，顺利 3 分钟搞定，相当丝滑\",\"通知告警：提供多种通知告警维度（配置变更通知、活性报警、队列容量阈值报警、拒绝触发报警、任务执行或等待超时报警），触发配置阈值实时推送告警信息，已支持企微、钉钉、飞书、邮件、云之家报警，同时提供 SPI 接口可自定义扩展实现\",\"运行监控：定时采集线程池指标数据（20 多种指标，包含线程池维度、队列维度、任务维度、tps、tpxx 等），支持通过 MicroMeter、JsonLog、JMX 三种方式定时获取，也可以通过 SpringBoot Endpoint 端点实时获取最新指标数据，同时提供 SPI 接口可自定义扩展实现\",\"任务增强：提供任务包装功能（比 Spring 线程池任务包装更强大），实现 TaskWrapper 接口即可，如 MdcTaskWrapper、TtlTaskWrapper、SwTraceTaskWrapper、OpenTelemetryWrapper，可以支持线程池上下文信息传递\",\"多配置中心支持：支持多种主流配置中心，包括 Nacos、Apollo、Zookeeper、Consul、Etcd、Polaris、ServiceComb，同时也提供 SPI 接口可自定义扩展实现\",\"中间件线程池管理：集成管理常用第三方组件的线程池，已集成 Tomcat、Jetty、Undertow、Dubbo、RocketMq、Hystrix、Grpc、Motan、Okhttp3、Brpc、Tars、SofaRpc、RabbitMq、Liteflow 等组件的线程池管理（动态调参、监控、报警）\",\"多模式：提供了增强线程池 DtpExecutor，IO 密集型场景使用的线程池 EagerDtpExecutor，调度线程池 ScheduledDtpExecutor，有序线程池 OrderedDtpExecutor，可以根据业务场景选择合适的线程池\",\"兼容性：JUC 普通线程池和 Spring 中的 ThreadPoolTaskExecutor 也可以被框架管理，只需@Bean 定义时加 @DynamicTp 注解即可\",\"可靠性：依靠 Spring 生命周期管理，可以做到优雅关闭线程池，在 Spring 容器关闭前尽可能多的处理队列中的任务\",\"高可扩展：框架核心功能都提供 SPI 接口供用户自定义个性化实现（配置中心、配置文件解析、通知告警、监控数据采集、任务包装、拒绝策略等等）\",\"线上大规模应用：参考美团线程池实践，美团内部已经有该理论成熟的应用经验\"]},\"104\":{\"h\":\"采集类型\"},\"105\":{\"h\":\"采集类型\",\"t\":[\"目前框架提供了五种监控数据采集方式，通过 collectorTypes 属性配置监控指标采集类型，默认 Micrometer\",\"采集类型\",\"Logging：线程池指标数据会以 Json 格式输出到指定的日志文件里\",\"Internal_logging：线程池指标数据会以 Json 格式输出到项目日志文件里\",\"Micrometer：采用监控门面，通过引入相关 Micrometer 依赖采集到相应的存储平台里（如 Prometheus，InfluxDb...）\",\"Endpoint：暴露 Endpoint 端点，可以通过 http 方式实时获取指标数据\",\"JMX：通过 JMX 方式采集指标数据，来监视线程池的性能指标\"]},\"106\":{\"h\":\"micrometer\",\"t\":[\"引入 prometheus（也可以用其他） 对应依赖，job 配置后 prometheus 管理台看到如下图所示，说明已经开始正常采集指标配置\",\"采集指标\"]},\"107\":{\"h\":\"logging\",\"t\":[\"指标数据以 json 日志格式输出磁盘，地址 ${logPath}/dynamictp/${appName}.monitor.log\",\"{\\\"datetime\\\": \\\"2022-04-17 11:35:15.208\\\", \\\"app_name\\\": \\\"dynamic-tp-nacos-cloud-demo\\\", \\\"thread_pool_metrics\\\": {\\\"activeCount\\\":0,\\\"queueSize\\\":0,\\\"largestPoolSize\\\":0,\\\"poolSize\\\":0,\\\"rejectHandlerName\\\":\\\"CallerRunsPolicy\\\",\\\"queueCapacity\\\":2000,\\\"fair\\\":false,\\\"queueTimeoutCount\\\":0,\\\"rejectCount\\\":0,\\\"waitTaskCount\\\":0,\\\"taskCount\\\":0,\\\"runTimeoutCount\\\":0,\\\"queueRemainingCapacity\\\":2000,\\\"corePoolSize\\\":4,\\\"queueType\\\":\\\"VariableLinkedBlockingQueue\\\",\\\"completedTaskCount\\\":0,\\\"dynamic\\\":true,\\\"maximumPoolSize\\\":6,\\\"poolName\\\":\\\"dtpExecutor1\\\"}} {\\\"datetime\\\": \\\"2022-04-17 11:35:15.209\\\", \\\"app_name\\\": \\\"dynamic-tp-nacos-cloud-demo\\\", \\\"thread_pool_metrics\\\": {\\\"activeCount\\\":0,\\\"queueSize\\\":0,\\\"largestPoolSize\\\":0,\\\"poolSize\\\":0,\\\"rejectHandlerName\\\":\\\"CallerRunsPolicy\\\",\\\"queueCapacity\\\":2000,\\\"fair\\\":false,\\\"queueTimeoutCount\\\":0,\\\"rejectCount\\\":0,\\\"waitTaskCount\\\":0,\\\"taskCount\\\":0,\\\"runTimeoutCount\\\":0,\\\"queueRemainingCapacity\\\":2000,\\\"corePoolSize\\\":2,\\\"queueType\\\":\\\"TaskQueue\\\",\\\"completedTaskCount\\\":0,\\\"dynamic\\\":true,\\\"maximumPoolSize\\\":4,\\\"poolName\\\":\\\"dtpExecutor2\\\"}} {\\\"datetime\\\": \\\"2022-04-17 11:35:15.209\\\", \\\"app_name\\\": \\\"dynamic-tp-nacos-cloud-demo\\\", \\\"thread_pool_metrics\\\": {\\\"activeCount\\\":0,\\\"queueSize\\\":0,\\\"largestPoolSize\\\":0,\\\"poolSize\\\":0,\\\"queueCapacity\\\":2147483647,\\\"fair\\\":false,\\\"queueTimeoutCount\\\":0,\\\"rejectCount\\\":0,\\\"waitTaskCount\\\":0,\\\"taskCount\\\":0,\\\"runTimeoutCount\\\":0,\\\"queueRemainingCapacity\\\":2147483647,\\\"corePoolSize\\\":1,\\\"queueType\\\":\\\"LinkedBlockingQueue\\\",\\\"completedTaskCount\\\":0,\\\"dynamic\\\":false,\\\"maximumPoolSize\\\":1,\\\"poolName\\\":\\\"commonExecutor\\\"}} {\\\"datetime\\\": \\\"2022-04-17 11:35:15.209\\\", \\\"app_name\\\": \\\"dynamic-tp-nacos-cloud-demo\\\", \\\"thread_pool_metrics\\\": {\\\"activeCount\\\":0,\\\"queueSize\\\":0,\\\"largestPoolSize\\\":100,\\\"poolSize\\\":100,\\\"queueCapacity\\\":2147483647,\\\"fair\\\":false,\\\"queueTimeoutCount\\\":0,\\\"rejectCount\\\":0,\\\"waitTaskCount\\\":0,\\\"taskCount\\\":177,\\\"runTimeoutCount\\\":0,\\\"queueRemainingCapacity\\\":2147483647,\\\"corePoolSize\\\":100,\\\"queueType\\\":\\\"TaskQueue\\\",\\\"completedTaskCount\\\":177,\\\"dynamic\\\":false,\\\"maximumPoolSize\\\":400,\\\"poolName\\\":\\\"tomcatWebServerTp\\\"}} \"]},\"108\":{\"h\":\"endpoint\",\"t\":[\"暴露端点(dynamic-tp)，可以通过 http 方式实时请求\",\"[ { \\\"pool_name\\\": \\\"remoting-call\\\", \\\"core_pool_size\\\": 6, \\\"maximum_pool_size\\\": 12, \\\"queue_type\\\": \\\"SynchronousQueue\\\", \\\"queue_capacity\\\": 0, \\\"queue_size\\\": 0, \\\"fair\\\": false, \\\"queue_remaining_capacity\\\": 0, \\\"active_count\\\": 0, \\\"task_count\\\": 21760, \\\"completed_task_count\\\": 21760, \\\"largest_pool_size\\\": 12, \\\"pool_size\\\": 6, \\\"wait_task_count\\\": 0, \\\"reject_count\\\": 124662, \\\"reject_handler_name\\\": \\\"CallerRunsPolicy\\\" } ] \"]},\"109\":{\"h\":\"JMX\",\"t\":[\"通过 JMX 监控管理MXBean\",\"采集指标\"]},\"110\":{\"h\":\"自定义采集\"},\"111\":{\"h\":\"自定义采集类型\",\"t\":[\"如下示例定义了一个 Es 采集器\",\"定义 EsCollector 继承 AbstractCollector 抽象类，实现 type() 和 collect() 方法\",\"package org.dromara.dynamictp.example.collector; import org.dromara.dynamictp.common.entity.ThreadPoolStats; import org.dromara.dynamictp.common.util.JsonUtil; import org.dromara.dynamictp.core.monitor.collector.AbstractCollector; /** * EsCollector related * * @author yanhom * @since 1.1.0 */ public class EsCollector extends AbstractCollector { private final EsClient esClient; public EsCollector(EsClient esClient) { this.esClient = esClient; } @Override public void collect(ThreadPoolStats poolStats) { esClient.save(JsonUtil.toJson(poolStats)); } @Override public String type() { return \\\"es\\\"; } } \",\"SPI 配置\",\"resources/META-INF/services 下配置 java spi 实现\",\"文件名：org.dromara.dynamictp.core.monitor.collector.MetricsCollector\",\"文件值：org.dromara.dynamictp.example.collector.EsCollector\",\"图片.png\",\"配置文件\",\"dynamictp: enabledCollect: true # 是否开启监控指标采集，默认false collectorTypes: micrometer,es # 监控数据采集器类型（logging | micrometer | internal_logging | JMX），默认micrometer monitorInterval: 5 # 监控时间间隔（报警判断、指标采集），默认5s \"]},\"112\":{\"h\":\"hertzbeat 接入流程\"},\"113\":{\"h\":\"HertzBeat 介绍\",\"t\":[\"HertzBeat 是一款开源，易用友好的实时监控系统，无需Agent，拥有强大自定义监控能力。\",\"支持对应用服务，数据库，操作系统，中间件，云原生等监控，阈值告警，告警通知(邮件微信钉钉飞书短信 Slack Discord Telegram)。\",\"其将Http,Jmx,Ssh,Snmp,Jdbc等协议规范可配置化，只需配置YML就能使用这些协议去自定义采集任何您想要采集的指标。您相信只需配置YML就能立刻适配一个K8s或Docker等新的监控类型吗？\",\"HertzBeat 的强大自定义，多类型支持，易扩展，低耦合，希望能帮助开发者和中小团队快速搭建自有监控系统。\"]},\"114\":{\"h\":\"在 HertzBeat 5分钟搞定监控 DynamicTp\"},\"115\":{\"h\":\"操作前提，您已拥有 DynamicTp 环境和 HertzBeat 环境。\",\"t\":[\"DynamicTp 集成接入文档\",\"HertzBeat 部署安装文档\"]},\"116\":{\"h\":\"一. 在 DynamicTp 端暴露出 指标接口 ，它将提供 metrics 接口数据。\",\"t\":[\"开启 SpringBoot Actuator Endpoint 暴露出DynamicTp指标接口\",\"management: endpoints: web: exposure: include: '*' \",\"重启后测试访问指标接口 ip:port/actuator/dynamic-tp 是否有响应json数据如下:\",\"[ { \\\"poolName\\\": \\\"commonExecutor\\\", \\\"corePoolSize\\\": 1, \\\"maximumPoolSize\\\": 1, \\\"queueType\\\": \\\"LinkedBlockingQueue\\\", \\\"queueCapacity\\\": 2147483647, \\\"queueSize\\\": 0, \\\"fair\\\": false, \\\"queueRemainingCapacity\\\": 2147483647, \\\"activeCount\\\": 0, \\\"taskCount\\\": 0, \\\"completedTaskCount\\\": 0, \\\"largestPoolSize\\\": 0, \\\"poolSize\\\": 0, \\\"waitTaskCount\\\": 0, \\\"rejectCount\\\": 0, \\\"rejectHandlerName\\\": null, \\\"dynamic\\\": false, \\\"runTimeoutCount\\\": 0, \\\"queueTimeoutCount\\\": 0 }, { \\\"maxMemory\\\": \\\"4 GB\\\", \\\"totalMemory\\\": \\\"444 MB\\\", \\\"freeMemory\\\": \\\"250.34 MB\\\", \\\"usableMemory\\\": \\\"3.81 GB\\\" } ] \"]},\"117\":{\"h\":\"二. 在 HertzBeat 监控页面添加 DynamicTp 线程池监控\",\"t\":[\"点击新增 DynamicTp 监控\",\"路径：菜单 -> 中间件监控 -> DynamicTp监控 -> 新增DynamicTp监控\",\"hertzbeat\",\"配置监控 DynamicTp 所需参数\",\"在监控页面填写 DynamicTp 服务IP，监控端口(默认8080)，最后点击确定添加即可。 其他参数如采集间隔，超时时间等可以参考帮助文档 https://hertzbeat.com/docs/help/dynamic_tp/\",\"hertzbeat\",\"完成✅,现在我们已经添加好对 DynamicTp 的监控了，查看监控列表即可看到我们的添加项。\",\"hertzbeat\",\"点击监控列表项的操作->监控详情图标 即可浏览 DynamicTp线程池 的实时监控指标数据。\",\"hertzbeat\",\"点击监控历史详情TAB 即可浏览 DynamicTp线程池 的历史监控指标数据图表📈。\",\"hertzbeat\",\"hertzbeat\",\"DONE！完成啦！通过上面几步，总结起来其实也就只用两步\",\"第一步暴露 DynamicTp 端metrics端点/actuator/dynamic-tp\",\"第二步在 HertzBeat 监控页面配置IP端口添加监控即可\",\"提示\",\"通过上面的两步我们就完成了对 DynamicTp 的监控，我们可以在 HertzBeat 随时查看监控详情指标信息来观测其服务状态。 当然只是看肯定是不完美的，监控往往伴随着告警阈值，当 DynamicTp 的线程池指标超出我们的期望值或异常时，能及时的通知到我们对应的负责人，负责人收到通知处理问题，这样才是一个完整的监控告警流程。\",\"接下来我们就来一步一步演示如何配置 HertzBeat 系统里的阈值告警通知，让 DynamicTp线程池 的指标异常时，及时通知给我们\"]},\"118\":{\"h\":\"三. 在 HertzBeat 系统添加 DynamicTp线程池 指标阈值告警\",\"t\":[\"对某个重要指标配置告警阈值\",\"路径：菜单 -> 告警阈值 -> 新增阈值\",\"选择配置的指标对象，DynamicTp监控主要是一些线程池相关指标，我们举例对 运行超时线程数量thread_pool_running -> run_timeout_count 这个指标进行阈值设置， 当线程运行超时数量大于1时发出告警。\",\"这里我们就配置当此指标thread_pool_running 的 run_timeout_count>1 时发出告警，告警级别为严重告警，三次即触发，具体如下图。\",\"hertzbeat\",\"新增消息通知接收人\",\"配置接收人，让告警消息知道要发给谁，用什么方式发。\",\"路径：菜单 -> 告警通知 -> 告警接收人 -> 新增接收人\",\"消息通知方式支持 邮件，钉钉，企业微信，飞书，WebHook，短信等，我们这里以常用的钉钉为例。\",\"参照此帮助文档 https://hertzbeat.com/docs/help/alert_dingtalk 在钉钉端配置机器人，设置安全自定义关键词HertzBeat，获取对应access_token值。\",\"在 HertzBeat 配置接收人参数如下。\",\"【告警通知】->【新增接收人】 ->【选择钉钉机器人通知方式】->【设置钉钉机器人ACCESS_TOKEN】-> 【确定】\",\"hertzbeat\",\"配置关联的告警通知策略⚠️ 【新增通知策略】-> 【将刚设置的接收人关联】-> 【确定】\",\"配置告警通知策略，让告警消息与接收人绑定，这样就能决定哪些告警发给哪个人。\",\"hertzbeat\"]},\"119\":{\"h\":\"完毕，现在坐等告警消息过来啦。叮叮叮叮\",\"t\":[\"[HertzBeat告警通知] 告警目标对象 : dynamic_tp.thread_pool_running.run_timeout_count 所属监控ID : 205540620349493 所属监控名称 : DynamicTp_localhost 告警级别 : 严重告警 告警触发时间 : 2023-02-02 22:17:06 内容详情 : DynamicTp has run timeout thread, count is 2 \"]},\"120\":{\"h\":\"小结\",\"t\":[\"提示\",\"这篇实践文章带我们体验了如何使用 HertzBeat 监控 DynamicTp线程池 指标数据，可以发现集 监控-告警-通知 的 HertzBeat 在操作与使用方面更加的便捷，只需页面上简单点一点就能把 DynamicTp线程池 纳入监控并告警通知，再也不需要部署多个组件写YML配置文件那些繁琐操作了。\",\"DynamicTp Github: https://github.com/dromara/dynamic-tp HertzBeat Github: https://github.com/dromara/hertzbeat\",\"欢迎了解使用Star支持哦！\",\"只需要一条docker命令即可安装体验heartbeat ：docker run -d -p 1157:1157 --name hertzbeat tancloud/hertzbeat\"]},\"121\":{\"h\":\"prometheus+grafana 接入流程\"},\"122\":{\"h\":\"集成步骤\",\"t\":[\"这块要讲的是集成 prometheus+grafana 做监控，事先你得安装好 prometheus+grafana，这个就不展开讲了，网上教程很多，测试使用可以直接用 docker 安装，非常简单，安装完之后接着往下看。\",\"首先线程池配置文件中开启 micrometer 数据采集\",\" enabledCollect: true collectorTypes: micrometer \",\"项目中引入 micrometer-prometheus 依赖\",\" <dependency> <groupId>io.micrometer</groupId> <artifactId>micrometer-registry-prometheus</artifactId> </dependency> \",\"开启 prometheus 指标采集端点\",\"management: metrics: export: prometheus: enabled: true endpoints: web: exposure: include: '*' # 测试使用，线上不要用*，按需开启 \",\"配置 prometheus 数据采集 job，这块可以去了解下他的 SD 机制（Service Discovery），也就是自动到注册中心发现服务，看你所用的注册中心支不支持这种方式，可以去官网查看，k8s，ZK，Eureka、Consul 等都是支持的。这里使用 static_configs 方式，简单的指定地址的静态配置\",\"- job_name: 'prometheus' metrics_path: '/actuator/prometheus' static_configs: - targets: ['192.168.2.104:9098'] \",\"job 配置后 prometheus 管理台看到如下图所示，说明已经开始正常采集指标配置\",\"采集指标\",\"然后就是配置 grafana 数据可视化，配置如下图，需要该 pannel 配置 Json 的可以加我发你，到这里监控就搭建起来了，其实也很简单，然后就可以实时监控线程池数据指标变动了\",\"如果没显示监控数据，可以重新编辑下每个 pannel 的数据源\",\"image.png\"]},\"123\":{\"h\":\"介绍文章\"},\"124\":{\"h\":\"By yanhom(掘金)\",\"t\":[\"以面试官视角万字解读线程池10大经典面试题！\",\"线程池，我是谁？我在哪儿？\",\"动态线程池框架（DynamicTp），监控及源码解析篇\",\"动态线程池（DynamicTp），动态调整Tomcat、Jetty、Undertow线程池参数篇\",\"美团动态线程池实践思路开源项目（DynamicTp），线程池源码解析及通知告警篇\",\"美团动态线程池实践思路，开源了\"]},\"125\":{\"h\":\"By Redick01(掘金)\",\"t\":[\"动态线程池dynamic-tp接入Consul配置中心\",\"开源动态线程池dynamic-tp支持zookeeper配置中心\",\"动态线程池dynamic-tp快速接入\"]},\"126\":{\"h\":\"By JAVA学思(公众号)\",\"t\":[\"动态线程池DynamicTp系列五之源码分析\",\"动态线程池DynamicTp系列四之监控告警\",\"动态线程池DynamicTp系列三之源码分析\",\"动态线程池DynamicTp系列二之源码分析\",\"动态线程池DynamicTp系列一之使用\"]},\"127\":{\"h\":\"By scl(掘金)\",\"t\":[\"基于开源的配置中心的轻量动态线程池dynamic-tp实践与源码原理分析\"]},\"128\":{\"h\":\"By 赤耳小永(掘金)\",\"t\":[\"利用Nacos作为配置中心动态修改线程池核心参数\"]},\"129\":{\"h\":\"By windsearcher(有道云笔记)\",\"t\":[\"动态线程池DynamicTp源码系列一之相关类简介\",\"动态线程池DynamicTp源码解读系列二之starter模块\",\"动态线程池DynamicTp源码解读系列三之监控告警\",\"动态线程池DynamicTp源码解读系列四之adapter模块\"]},\"130\":{\"h\":\"By MRyan\",\"t\":[\"dynamic-tp核心流程源码解读篇\"]},\"131\":{\"h\":\"加群交流\"},\"132\":{\"h\":\"联系社区\",\"t\":[\"使用过程中有任何问题，或者对项目有什么想法或者建议，可以加入社群，跟 1500+ 群友一起交流讨论。\",\"微信群都已满 200 人，可以关注我个人微信公众号，加我个人微信拉群（备注：dynamic-tp 拉群）。\",\"contact\"]},\"133\":{\"h\":\"参与开发\"},\"134\":{\"h\":\"成为 Committer\",\"t\":[\"要求\",\"对开源感兴趣，有一颗用爱发电的心。\",\"熟读源码，理解核心代码逻辑。\",\"加入社区群，参与社区的建设，积极回答问题和进行宣传。\",\"完成 5 个 PR，其中至少有两个新 Feature。\"]},\"135\":{\"h\":\"提交 PR\",\"t\":[\"pr要求\",\"基于 dev 分支进行开发，提交 pr 到 dev 分支。\",\"提交 pr 时，需要关联至少一个 issue。\",\"提交 pr 时，需要保证所有的测试用例都通过。\",\"代码风格要求，参考阿里巴巴 Java 开发手册，须通过 checkstyle 检查。\"]},\"136\":{\"h\":\"常见问题\"},\"137\":{\"h\":\"Q：DynamicTp 支持那些版本 SpringBoot？\",\"t\":[\"A：目前 SpringBoot 大版本有 sb1.x、sb2.x、sb3.x 三个版本，三大版本之间差别较大。DynamicTp 是基于 sb2.7 开发的，经过测试，sb2.3 及以上版本均能良好支持，sb1.x、sb2.1、sb2.2 可能会有部分不兼容的地方，需使用者自行测试，如果有不兼容地方，优先建议升级 sb 版本。\"]},\"138\":{\"h\":\"Q：非 SpringBoot 项目能使用吗？\",\"t\":[\"A：DynamicTp 从 1.2.0 版本开始，核心模块解耦了 Spring，Spring 相关特性支持在独立的 Spring Module 中，SpringBoot 相关特性支持在独立 Starter Module 中，所以如果使用传统 Spring 项目，可以引入下面依赖，然后通过 xml 或者 @Configuration 注解对 Starter 模块下自动装配的功能类进行声明，也能正常使用。\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring</artifactId> <version>1.2.0</version> </dependency> \"]},\"139\":{\"h\":\"Q：JUC 线程池和 Spring 线程池能被管理吗？\",\"t\":[\"A：文档中已经说明了，最佳实践是将线程池配置在远程配置中心，服务启动时 DynamicTp 会从配置中心拉取到线程池配置，然后生成 DtpExecutor 实例注册到 Spring 容器以及内部注册器中，使用时直接获取就行。如果你执意要使用 JUC 原生线程池或者 Spring 线程池， 我们也是支持的，@Bean 定义线程池时加 @DynamicTp 注解，同时配置文件中添加配置项 autoCreate: false 即可，只是这样使用到的就不是满血 dtp。\"]},\"140\":{\"h\":\"Q：增强 Undertow 线程池后，服务启动报错 cannot inherit from final class，怎么解决？\",\"t\":[\"A：Undertow 内部用的线程池是自定义的 EnhancedQueueExecutor，原生的 EnhancedQueueExecutor 是被定义为 final 的，我们不能对此做增强。所以我们自己重写了 EnhancedQueueExecutor，需要在类加载的时候加载到我们自己重写的类才可以，报这个错误证明加载到了原生的 EnhancedQueueExecutor，你需要调整下依赖包的顺序，将 dynamic-tp-spring-boot-starter-adapter-webserver 依赖放在 spring-boot-starter-undertow 依赖之前就可以了。\"]},\"141\":{\"h\":\"Q：为什么 DynamicTp 会有内存泄露问题？\",\"t\":[\"A：当 DynamicTp 跟一些 javaagent 组件一起使用时，如果这些 agent 会对线程池做增强，就可能会导致内存泄露问题。比如 skywalking 9.0 线程池插件会对提交的任务做增强，导致 dynamictp 在任务执行的不同阶段，先后拿到的不是同一个对象，会导致一些功能 Map 清理不掉，可能会造成 OOM。具体请查看\",\"有以下几种解决方案：\",\"移除这些线程池插件，线程池增强功能都由 DynamicTp 来做（建议）；\",\"关闭 DynamicTp 对 execute() 方法的增强，环境变量中设置 dtp.execute.enhanced = false，这样会损失掉一些增强功能；\",\"引入 dynamic-tp-extension-agent 依赖，会有一定的性能损失\"]},\"142\":{\"h\":\"Q：接入后服务启动不能正常创建线程池，怎么回事？\",\"t\":[\"A：首先确保按照接入指南正确的引入了依赖，比如 nacos 在 spring-cloud 模式下和普通 springboot 模式下引入的依赖不一样，然后确保项目能正常拉取到配置中心的配置。如果还有问题，可以提 Issue 反馈。\"]},\"143\":{\"h\":\"Q：动态调整队列大小，队列里的任务怎么处理？\",\"t\":[\"A：首先要了解阻塞队列的原理，入队、出队的阻塞效果是通过加锁、判断比较已有元素数和队列容量实现的，队列容量只是内部的一个变量 capacity，我们动态调整的只是这个变量的值，并不会影响到队列里已有任务的执行，后续入队、出队效果会受到新更新的值的影响，已有任务会正常执行。\"]},\"144\":{\"h\":\"Q：DynamicTp 性能怎么样？\",\"t\":[\"A：通过 JMH 测试，在单机 QPS 非常大的时候（100W+），DynamicTp 带来的性能损耗会比较大。这种情况业务逻辑本身的耗时非常小，而 DynamicTp 一系列的增强、统计、检查等操作会消耗一定的时间。而单机 QPS 在 10W 以下的时候，DynamicTp 的性能损耗就比较小了，对大多数场景来说都适用。查看压测详情\"]},\"145\":{\"h\":\"Q：三方中间件线程池增强失败，怎么回事？\",\"t\":[\"A：三方中间件线程池增强实现时，我们是依赖特定的版本做的，如果用的版本跟我们用的基准版本差异较大，可能会有版本兼容性问题。可以先自己调试排查，如果确实是版本兼容问题，欢迎提 Pr 来修复，我们接入的三方包很多，很难覆盖到所有的版本，这个希望大家能理解，做开源项目最难的就是做版本兼容了。\"]},\"146\":{\"h\":\"项目成员\"},\"147\":{\"h\":\"项目成员\"},\"148\":{\"h\":\"发版记录\",\"t\":[\"提示\"]},\"149\":{\"h\":\"v1.2.0 发版记录\",\"t\":[\"v1.1.9 及之前版本核心模块强依赖 Spring，代码中用到了不少 Spring 的特性，这样不利于其他非 Spring 项目的接入集成。\",\"v1.2.0 是一个大版本，主要功能是对 Spring 做了解耦，Spring 相关特性以独立 Module 的形式提供，其他非 Spring 框架集成 DynamicTp 时通过引入核心模块即可。\"]},\"150\":{\"h\":\"Feature\",\"t\":[\"核心模块中移除对 Spring 的依赖，方便在其他非 Spring 项目中使用。\",\"https://github.com/dromara/dynamic-tp/issues/527 \"]},\"151\":{\"h\":\"Bugfix\",\"t\":[\"兼容当 Dubbo 版本在 3.0.9 到 3.1.8 之间时，需要替换的执行器命名为 INTERNAL_SERVICE_EXECUTOR，而不是 ExecutorService.class.getName()。\",\"https://github.com/dromara/dynamic-tp/pull/495 \",\"修复 Redis 限流器在 Redis Cluster 模式下报错问题。\",\"https://github.com/dromara/dynamic-tp/pull/502 \",\"修复执行 scheduledFuture cancel 报错问题。\",\"https://github.com/dromara/dynamic-tp/pull/516 \",\"修复 adapter-grpc 模块，grpc client channel executor 被关闭，调用报线程池关闭的错误。\",\"https://github.com/dromara/dynamic-tp/pull/520 \",\"兼容高版本 okhttp3 Dispatcher 中线程池字段为 executorServiceOrNull 的情况。\",\"https://github.com/dromara/dynamic-tp/pull/525 \"]},\"152\":{\"h\":\"Optimize\",\"t\":[\"优化线程池配置文件提示功能。\",\"https://github.com/dromara/dynamic-tp/pull/498 \",\"etcd kvClient get 添加超时时间控制。\",\"https://github.com/dromara/dynamic-tp/pull/518 \",\"zookeeper-starter 客户端初始化支持 zk 认证。\",\"https://gitee.com/dromara/dynamic-tp/pulls/61 \",\"部分代码设计优化重构\",\"提示\"]},\"153\":{\"h\":\"v1.1.9.1 发版记录\"},\"154\":{\"h\":\"Bugfix\",\"t\":[\"修复定时任务只能运行 corePoolSize 次数的问题 #485\",\"修复 ScheduledDtpExecutor 增强 execute方法，导致功能 map 清理不掉，有内存溢出风险 #493\",\"修复 AgentAware 在处理有内部属性引用自身这类任务时的栈溢出问题。\",\"https://gitee.com/dromara/dynamic-tp/issues/IAX904 \"]},\"155\":{\"h\":\"Optimize\",\"t\":[\"告警 SPI、监控 SPI 内部使用时忽略大小写\",\"提示\"]},\"156\":{\"h\":\"v1.1.9 发版记录\",\"t\":[\"这里要问了，上个版本是 1.1.7，怎么跳过 1.1.8 直接到 1.1.9 了？\",\"原因是 1.1.8 引入了一个低级的 npe bug，在没有配置 executors 时会导致服务启动失败，测试过程中没发现，所以 1.1.8 这个版本就废掉了。\",\"后续也将会完善提高 DynamicTp 单测覆盖率。\",\"以下是具体发版详情：\"]},\"157\":{\"h\":\"Feature\",\"t\":[\"新增 AgentAware，解决在有其他 agent 增强 Runnable 情况下尝试去拿 DtpRunnable，进行 tps、tpxx、运行超时等统计功能，1.1.7 及之前版本为了防止内存泄露会关闭这些功能。\",\"https://gitee.com/dromara/dynamic-tp/issues/IAPNE8 \",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-agent</artifactId> <version>1.2.0</version> </dependency> \",\"新增全局配置功能，减少配置量，项目中可能会定义多个线程池，除了一些核心参数外，其他配置可能都是相同的，新增 globalExecutorProps 配置项，如果线程池某一配置项没配置，则从全局配置中取。\",\"https://github.com/dromara/dynamic-tp/issues/443 \",\"dynamictp: globalExecutorProps: queueType: VariableLinkedBlockingQueue rejectedHandlerType: CallerRunsPolicy allowCoreThreadTimeOut: false awaitTerminationSeconds: 5 taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] executors: - threadPoolName: dtpExecutor1 executorType: eager corePoolSize: 10 maximumPoolSize: 20 queueCapacity: 2000 threadNamePrefix: test - threadPoolName: dtpExecutor2 corePoolSize: 20 maximumPoolSize: 40 queueCapacity: 1000 threadNamePrefix: test2 \",\"线程池配置新增 autoCreate 字段，标识是否自动生成 DtpExecutor 实例，默认为 true；若想使用 juc 原生线程池或 spring 线程池可置为 false，需在代码中手动创建线程池。1.1.9 之前版本中，配置在 executors 下的所有线程池在服务启动时会自动生成 DtpExecutor 注册到 spring 容器中，如果项目中大量使用了 Spring ThreadPoolTaskExecutor 接线程池对象，若配置的线程池名称相同，此时会报类型转换异常。\",\"https://github.com/dromara/dynamic-tp/issues/472 \",\"dynamictp: globalExecutorProps: taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] executors: - threadPoolName: springTaskExecutor autoCreate: false corePoolSize: 10 maximumPoolSize: 20 queueCapacity: 2000 threadNamePrefix: test - threadPoolName: dtpExecutor2 corePoolSize: 20 maximumPoolSize: 40 queueCapacity: 1000 threadNamePrefix: test2 \",\"新增规则引擎框架 Liteflow 线程池适配模块\",\"https://github.com/dromara/dynamic-tp/issues/474 \",\"引入以下依赖即可\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-adapter-liteflow</artifactId> <version>1.2.0</version> </dependency> \",\"dynamictp: liteflowTp: - threadPoolName: liteflowTp#LiteFlowDefaultWhenExecutorBuilder corePoolSize: 10 maximumPoolSize: 20 keepAliveTime: 60 \",\"ScheduledDtpExecutor 支持 TaskWrapper 任务包装。\",\"https://github.com/dromara/dynamic-tp/issues/431 \",\"dynamictp: executors: - threadPoolName: dtpExecutor1 executorType: scheduled corePoolSize: 10 threadNamePrefix: test taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\"] \"]},\"158\":{\"h\":\"Bugfix\",\"t\":[\"修复 Spring ThreadPoolTaskExecutor 被框架管理后，ThreadPoolTaskExecutor 中定义的线程池装饰器失效问题。\",\"https://gitee.com/dromara/dynamic-tp/issues/I9D31H \",\"修复 RocketMQ 线程池适配模块，在低版本时 getAsyncSenderExecutor 报 NoSuchMethodError 错误问题。\",\"https://github.com/dromara/dynamic-tp/issues/417 \",\"修复 TaskEnhanceAware 在多 Wrapper 包装后 taskName 丢失问题。\",\"https://github.com/dromara/dynamic-tp/issues/420 \",\"修复 JMX 报错 InstanceAlreadyExistsException 问题。\",\"https://github.com/dromara/dynamic-tp/issues/437 \",\"修复飞书报警填写了 username(非 openid 的情况), 发出的消息接受人为空问题。\",\"https://github.com/dromara/dynamic-tp/issues/428 \",\"修复钉钉告警 @所有人 不生效问题。\",\"https://github.com/dromara/dynamic-tp/issues/439 \",\"修复动态更新 taskWrappers 后导致 spring 线程池任务装饰器丢失问题。\",\"https://github.com/dromara/dynamic-tp/issues/481 \",\"修复 dubbo adapter missing afterInitialize step。\"]},\"159\":{\"h\":\"Optimize\",\"t\":[\"三方中间件线程池支持运行过程异常打印\",\"Undertow 线程池支持任务包装器\",\"juc 线程池、spring 线程池支持更多参数动态调整\",\"部分代码设计优化重构\",\"提示\"]},\"160\":{\"h\":\"v1.1.7 发版记录\"},\"161\":{\"h\":\"Feature\",\"t\":[\"线程池配置增加 tryInterrupt 字段，控制任务执行超时后是否需要中断当前线程，@yanhom\",\"新增 PriorityDtpExecutor，适用于可以指定任务的处理优先级场景，@KamToHung\",\"指标数据采集器新增 jmx 方式，@KamToHung\",\"线程池配置新增 env 字段，控制告警信息里的环境取值，@少鹏\",\"告警平台配置增加 webhook 字段，降低配置复杂度，@kyao，@KamToHung\"]},\"162\":{\"h\":\"Bugfix\",\"t\":[\"修复上下文刷新后，DtpMonitor 重复创建调度任务的问题，@trevzhang\",\"修复 OpenTelemetryWrapper 没有将 traceId 传入 DynamicTp 框架的问题，@少鹏\",\"修复告警时，tid 错乱问题，@yanhom\",\"修复 dubbo 2.7.5 以下版本动态线程池不生效的问题，@piemon-nyah\",\"修复异常拒绝任务时跳过 afterReject 执行的问题，@SimpleIto\",\"修复飞书告警，机器人签名不为空时报错的问题，@guozi\"]},\"163\":{\"h\":\"Optimize\",\"t\":[\"优化 spring-configuration-metadata，配置提示完整化，@KamToHung\",\"支持 apache dubbo 最新版本，@KamToHung\",\"完善 example\",\"部分代码优化重构\"]},\"164\":{\"h\":\"Refactor\",\"t\":[\"将通知告警基础包从 core 模块移动到 common 模块\",\"将 plugin 插件包从 core 模块移动到 common 模块\",\"提示\"]},\"165\":{\"h\":\"v1.1.6.1 发版记录\"},\"166\":{\"h\":\"Feature\",\"t\":[\"支持 springboot3、jdk17、spring6，@KamToHung，@dragon-zhang，@yanhom\",\"支持 springboot 1.x、springboot 2.0.x、spring 5.0.x 等低版本，@yanhom\",\"新增初始化器 DtpInitizlizer SPI 接口，可以在框架启动前做一些自定义初始化操作，@yanhom\",\"支持兼容 skywalking 9.0 引入的线程池插件，1.1.5 版本在跟 skywalking 线程池插件一起使用有内存泄露问题，@yanhom\",\"告警信息里新增堆内存占比相关信息，@yanhom\",\"配置文件配置 dynamictp 时，新增 DtpProperties 相关属性字段自动提示功能，@yanhom\"]},\"167\":{\"h\":\"Bugfix\",\"t\":[\"修复 allowCoreThreadTimeOut 参数为 true 时，ScheduledDtpExecutor 初始化失败的问题，@kyao\",\"修复 ExecutorWrapper#threadPoolStatProvider 成员属性初始化失败问题，@KamToHung\",\"修复 ALARM_EXECUTOR 没有移除 traceId，导致告警信息里的 traceId 错乱问题，@yanhom\",\"修复线程池别名不一致导致 Prometheus 指标上报失败问题，@androidcj\",\"修复使用注解注入 ScheduledThreadPoolExecutor 线程池报错的问题，@kyao\",\"修复 ScheduledDtpExecutor 不支持超时告警的问题，@kyao\",\"修复 alibaba dubbo 初始化失败问题，@yanhom\"]},\"168\":{\"h\":\"Optimize\",\"t\":[\"ThreadPoolBuilder、ThreadPoolCreator 方法完善丰富，@yanhom\",\"优化 tps、tp99 等指标监控相关代码，@yanhom\",\"DtpProperties 配置类中一些字段默认值调整，enabledCollect=true，waitForTasksToCompleteOnShutdown=true，awaitTerminationSeconds=3，@yanhom\",\"优化 JVMTI 相关模块，@dragon-zhang，@yanhom\",\"完善 example，@yanhom\",\"部分代码优化重构，@yanhom\",\"hutool、sc、sca、sb 等依赖版本升级，@yanhom\"]},\"169\":{\"h\":\"Refactor\",\"t\":[\"重构 NacosRefresher，去掉在配置中手动指定线程池配置文件 data-id，降低接入成本，@wuhui\",\"重构 ApolloRefresher，去掉在配置中手动指定线程池配置文件 namespace，降低接入成本，@BanTanger\",\"重构所有 cloud 模块的 refresher，通过监听 EnvironmentChangeEvent 事件，更精准的判断是否线程池配置变动进行刷新，@yanhom\",\"提示\"]},\"170\":{\"h\":\"v1.1.5 发版记录\"},\"171\":{\"h\":\"Feature\",\"t\":[\"监控模块新增 TPS、TP99、TP95、TP50 等监控指标，@kyao，@yanhom\",\"Grafana 监控面板升级，支持更丰富指标查看，@yanhom\",\"告警信息里添加系统负载，cpu 使用率，cpu 核数等指标，@yanhom\"]},\"172\":{\"h\":\"Bugfix\",\"t\":[\"修复 jetty 线程池代理后一直触发任务超时告警的问题，@kyao\",\"修复 DtpPostProcessor 增强普通线程池后没返回代理，shutdown 原线程池的问题，@yanhom\",\"修复代理三方线程池时直接继承 juc 线程池，没兼容框架内自定义线程池的场景，如 dubbo、motan 的 eager 模式，@yanhom\"]},\"173\":{\"h\":\"Optimize\",\"t\":[\"各三方中间件线程池被代理后，原线程池优雅关闭，@yanhom\",\"设置 hutool http 工具包的超时时间，@chenkangning\",\"调整告警项的默认阈值，@yanhom\",\"部分代码优化重构，@yanhom\",\"提示\"]},\"174\":{\"h\":\"v1.1.4 发布记录\"},\"175\":{\"h\":\"Feature\",\"t\":[\"支持 Spring 项目，SpringBoot 相关特性只在 starter 模块引入，@dragon-zhang\",\"添加 jvmti 黑科技模块，方便集成管理各种三方包线程池，@dragon-zhang\",\"升级 VariableLinkedBlockingQueue 到 jdk1.8 的 LinkedBlockingQueue 的实现，@yanhom\",\"添加插件机制，基于此可以对框架做自定义开发扩展，@WindSearcher\",\"细化告警配置，支持不同告警项配置不同接受人，@kyao\",\"通知告警平台支持云之家，@chunhui_lu\",\"支持 SpringBoot 1.x，@yanhom\",\"第三方线程池（tomcat、undertow、dubbo、rocketmq、okhttp3 等等）支持 run_timeout、queue_timeout、reject 告警，@kyao，@yanhom\",\"提供 Aware 扩展，可以扩展自定义线程池执行过程，@kyao\",\"监控数据新增线程池别名，@zhifei\"]},\"176\":{\"h\":\"Bugfix\",\"t\":[\"修复 Tomcat 高低版本兼容性报错问题，@yanhom\",\"修复其他 agent 增强线程池后，强转 DtpRunnable 失败的问题，@yanhom\",\"修复企微告警无@提醒的问题，@yanhom\",\"修复企微告警配置多个接受人不能正确@的问题，@KamToHung\",\"修复钉钉告警不能@所有人问题，@chenan\",\"修复因 Bean 初始化顺序不确定导致的 ApplicationContextHolder npe 问题，@yanhom\",\"修复修复拒绝策略为 CallerRunsPolicy 时，MdcRunnable 会删除主线程 mdc 信息的问题，@kyao\"]},\"177\":{\"h\":\"Optimize\",\"t\":[\"优化 dtp 内部 spi 的使用，统一封装管理，@peachyy\",\"部分代码优化重构，@yanhom，@KamToHung，@dragon-zhang，@kyao\",\"告警信息优化，trace 信息可以自己扩展，集成内部 ELK 等平台，@yanhom\",\"提示\"]},\"178\":{\"h\":\"v1.1.3 发布记录\",\"t\":[\"groupId 及包名改为 org.dromara.dynamictp\"]},\"179\":{\"h\":\"Feature\",\"t\":[\"引入时间轮重构任务超时（排队超时、执行超时）功能，@KamToHung\",\"增加 ExecutorAdapter，做各种框架线程池的适配器，@dragon-zhang\",\"WebServer（Tomcat、Undertow、Jetty）支持通知告警，@dragon-zhang\",\"阿里云商业版 RocketMQ 线程池管理支持，@Redick01\",\"引入 JsonUtil，根据依赖选择 Jackson/Gson/FastJson 做框架 json 序列化工具，减少外部依赖，@topsuder\",\"重构 OrderedDtpExecutor 有序线程池实现，@yanhom, @KamToHung\",\"实现优雅关闭线程池功能，@yanhom\",\"增加 dependencies 模块，统一管理依赖，@KamToHung\",\"TaskWrapper 支持 OpenTelemetry，@brendanv\"]},\"180\":{\"h\":\"Bugfix\",\"t\":[\"修复飞书告警失败问题，@KamToHung\",\"修复配置变更后不通知的问题，@yanhom\",\"修复 dtp-alarm 线程 StackOverflowError 异常，@yanhom\",\"修复 DtpPostProcessor 初始化晚于线程池实例初始化问题，@KamToHung\"]},\"181\":{\"h\":\"Optimize\",\"t\":[\"丰富 Undertow 线程池监控指标，@yanhom\",\"优化当引入 Dtp 包，不启用时可以通过手动配置关闭，@ruoan777\",\"优化告警功能，解决实际推送的告警信息看着不准的问题，@ruoan777\",\"线程池内部注册器模块优化，@KamToHung\",\"Hutool 依赖优化，只引入用到的包，@KamToHung\",\"部分代码优化重构，@yanhom，@KamToHung，@dragon-zhang\",\"提示\"]},\"182\":{\"h\":\"v1.1.2 发布记录\"},\"183\":{\"h\":\"Features\",\"t\":[\"增加对 juc 线程池的动态调参能力，感谢@wenpan的贡献\",\"增加 ScheduledDtpExecutor，感谢@WindSearcher的贡献\",\"增加spring-cloud-tencent配置中心polaris的支持，感谢@fabian4的贡献\",\"增加对rocketmq producer线程池的管理，感谢@fabian4的贡献\",\"增加对rabbitmq消费线程池的管理，感谢@fabian4的贡献\",\"任务执行超时、拒绝等场景下日志输出 & 告警信息里添加打印tid，感谢@kyao的贡献\",\"增加spring-cloud-huawei配置中心servicecomb的支持，感谢@WindSearcher的贡献\",\"platfrom 新增id字段，可以配置多个通知平台，根据配置推送相应报警群，感谢@KamToHung的贡献\",\"StreamRocketMqDtpAdapter 增加对producer线程池的管理，感谢@hailang的贡献\"]},\"184\":{\"h\":\"Bugfix\",\"t\":[\"修复 alibaba dubbo 初始化错误赋值的bug，感谢@WindSearcher的贡献\",\"修复webserver undertow 高低版本不兼容问题，感谢@WindSearcher的贡献\",\"修复DtpPostProcessor类中AnnotatedBeanDefinition强制转换失败问题，感谢@文攀锋的贡献\"]},\"185\":{\"h\":\"Optimize\",\"t\":[\"jackson-databind版本升级\",\"hutool 版本升级5.8.12\",\"优化在JDK8下, corePoolSize为0时, ScheduledThreadPoolExecutor会导致死循环问题，感谢@WindSearcher的贡献\",\"优化获取本机ip地址的方式，感谢@yaokai的贡献\",\"优化submit提交的任务执行异常时，无法被UncaughtExceptionHandler处理，感谢@dailingx的贡献\",\"优化只有打开dynamicTP开关才加载第三方adapter类，感谢@hkhuang的贡献\",\"启动优化，启动时只通过@EnableDynamicTp决定是否使用dtp，感谢@KamToHung的贡献\",\"日志输出优化\",\"部分代码优化重构\",\"提示\"]},\"186\":{\"h\":\"v1.1.0 发布记录\"},\"187\":{\"h\":\"Features\",\"t\":[\"adapter 模块新增 motan rpc 框架线程池管理\",\"adapter 模块新增 okhttp3 线程池管理\",\"新增 OrderedDtpExecutor，感谢 @hailang 提供实现\",\"adapter 模块新增 brpc（starlight） 线程池管理\",\"adapter 模块新增 tars rpc 线程池管理\",\"线程池配置添加 notifyEnabled 字段，可以全局控制通知功能开启与否\",\"新增 StreamRocketMqDtpAdapter，Rocketmq 线程池管理支持 Stream 场景下使用，感谢 @MIEAPP 提供实现\",\"adapter 模块新增 sofa-rpc 框架线程池管理\",\"通过 SpringExecutor 支持 Spring 线程池\",\"支持飞书验签，感谢@ZhaoGZ 提供实现\"]},\"188\":{\"h\":\"BugFix\",\"t\":[\"ApacheDubbo 线程池初始化失败问题修复，感谢 @hdgaadd 提供实现\",\"SimpleTpProperties keepAliveTime 字段数据类型错误问题修复\"]},\"189\":{\"h\":\"Optimize\",\"t\":[\"要修改的核心线程数大于当前最大线程数不能修改问题优化\",\"引入 commons-collections，优化 hutool 高低版本不兼容问题\",\"notify 模块相关代码重构\",\"采用 checkstyle 调整代码风格\",\"提示\"]},\"190\":{\"h\":\"v1.0.9 发布记录\"},\"191\":{\"h\":\"Features\",\"t\":[\"告警类型新增邮件告警渠道，感谢 @林林林 提供实现\",\"adapter 模块新增 grpc 服务端线程池管理\"]},\"192\":{\"h\":\"BugFix\",\"t\":[\"AbstractDtpNotifier 添加无参构造函数，修复 SPI 自定义无法接入问题\",\"ApolloRefresher 调整为实现 ConfigFileChangeListener 接口，解决配置类型为 properties 类型时，多次修改参数间隔生效的问题，感谢 @NY 提供实现\",\"调整线程池告警配置初始化时机，修复提前使用因告警项没初始化导致的 NPE 问题，感谢 @林林林 提供实现\"]},\"193\":{\"h\":\"Refactor\",\"t\":[\"将 core 模块中 adapter 包迁移到 adapter-common 模块中，彻底解耦\",\"重构 notify 模块\",\"重构抽象 adapter 模块代码\",\"责任链模式重构 notify 模块\"]},\"194\":{\"h\":\"Optimize\",\"t\":[\"兼容低版本 dubbo（2.7.3） 线程池监控，感谢 @songxiaohua 提供实现\",\"兼容 Spring 5.2 以下 applicationContext.findAnnotationOnBean 获取不到注解的情况，感谢 @Redick01 提供实现\",\"MemorySafeLinkedBlockingQueue 阻塞队列添加拒绝策略\",\"优化项目日志输出\",\"提示\"]},\"195\":{\"h\":\"v1.0.8 发布记录\",\"t\":[\"距离 v1.0.7 发布已经有差不多 2 个月时间，这个版本新增了好些功能，同时优化重构了一些代码设计，欢迎大家升级体验哦！\"]},\"196\":{\"h\":\"Features\",\"t\":[\"新增内存安全队列 MemorySafeLinkedBlockingQueue，感谢 @dragon-zhang 提供实现\",\"WebServer 线程池管理支持 Reactive 环境下使用，感谢 @abbottliu.liu 提供实现\",\"支持 Dubbox 线程池管理，感谢 @Redick01 提供实现\",\"支持 Spring 中的 ThreadPoolTaskExecutor 线程池管理，感谢 @Redick01 提供实现\",\"支持 Etcd 配置中心接入，感谢 @Redick01 提供实现\",\"三方中间件线程池通知告警支持别名配置，感谢 @renbiao002 提供实现\",\"三方中间件线程池管理支持通知告警功能\",\"新增 MdcTaskWrapper 任务包装器，支持 MDC 上下文传递\",\"新增 SwTraceTaskWrapper 任务包装器，支持 Skywalking TID 传递\",\"监控数据输出新增输出到应用日志中的 collector\",\"指标数据采集支持配置多个采集方式\",\"新增通知告警集群限流插件，见 starter-extension-limiter-redis 模块\",\"ThreadPoolCreator 类新增一些内存安全快捷创建线程池方法\"]},\"197\":{\"h\":\"BugFix\",\"t\":[\"兼容 JDK11 当前要设置核心线程数不能大于上次设置的最大线程数限制\",\"修复核心线程预热设置 preStartAllCoreThreads 不生效问题\",\"修复 Hystrix 线程池获取失败 & 调参被覆盖问题\"]},\"198\":{\"h\":\"Refactor\",\"t\":[\"重构 logging 模块，去掉事件监听依赖\",\"重构抽象 adapter 模块代码\",\"责任链模式重构 notify 模块\"]},\"199\":{\"h\":\"Optimize\",\"t\":[\"example 添加 Hystrix 线程池的测试例子\",\"低版本 Apollo 配置文件格式兼容\",\"Undertow 容器开启活跃线程池数获取功能\",\"Endpoint 端点接口支持三方中间件线程池状态获取\",\"优化三方中间件参数刷新逻辑，增加校验判断逻辑\",\"提示\"]},\"200\":{\"h\":\"v1.0.7 发布记录\",\"t\":[\"明细：https://juejin.cn/post/7108551236609114149\",\"距离v1.0.5发布已经有差不多2个月时间，这个版本框架源码调整还是比较大的，重构了好一些功能， 主要是围绕第三方中间件线程池集成来改动的，是向前兼容的，同时修复了三个小bug。\",\"如果你有下述痛点，快快升级体验吧。\",\"1）如果你在使用 Dubbo，那么你大概率遇到过 Dubbo 线程池耗尽的情况，是不是很烦恼呢？尝试使用下 DynamicTp 的 Dubbo 线程池管理功能，结合告警、实时监控、动态调参等功能尽可能降低 Dubbo 线程池耗尽，请求拒绝的风险。\",\"2）mq 应该是很多互联网系统都会使用到的中间件，使用 mq 经常会遇到的其中一个问题就是消息积压问题，具体啥原因导致积压需要具体问题具体分析，就RocketMq来说，消费端是使用线程池进行处理消息的，所以说线程池的设置也会直接或者间接影响到消费速度，需要对此进行监控、告警、以及动态调参，尽可能降低因线程池设置而导致的积压风险。\",\"注意：三方组件的包需要自己引入，具体查看官网\"]},\"201\":{\"h\":\"Features\",\"t\":[\"报警渠道接入飞书\",\"支持 Apache Dubbo & Alibab Dubbo 服务端提供端线程池管理\",\"支持 RocketMq 消费端线程池管理\",\"支持 Hystrix 线程池管理\",\"支持 SpringBoot 内置三大WebServer（Tomcat、Jetty、Undertow）线程池管理\",\"增加线程池别名配置，提升告警信息可读易懂性\",\"提供任务包装类NamedRunable，提交任务时设置标识名称，方便问题追踪\",\"告警项自定义配置，不配置的项用默认值\"]},\"202\":{\"h\":\"BugFix\",\"t\":[\"修复并发导致通知报警信息发送多条的问题\",\"修复通知渠道配置修改不能动态更新问题\",\"修复钉钉手机端报警信息高亮失效问题\"]},\"203\":{\"h\":\"Refactor\",\"t\":[\"重构部分通知告警模块实现，支持三方中间件通知告警\",\"重构调整 adapter、starter 模块代码组织结构\",\"提示\"]},\"204\":{\"h\":\"v1.0.5\"},\"205\":{\"h\":\"Features\",\"t\":[\"logging模块添加log4j2支持\",\"配置文件支持json格式，zk已支持json、properties格式配置\"]},\"206\":{\"h\":\"BugFix\",\"t\":[\"#I54B4R\"]},\"207\":{\"h\":\"Refactor\",\"t\":[\"部分代码优化\"]},\"208\":{\"h\":\"Dependency\",\"t\":[\"transmittable-thread-local升级到2.12.6\",\"micrometer升级到1.8.5\",\"提示\"]},\"209\":{\"h\":\"v1.0.4\"},\"210\":{\"h\":\"Features\",\"t\":[\"配置中心支持Consul\",\"监控告警模块增加任务排队等候超时、任务执行超时监控告警\",\"线程池完全配置在配置中心，无需代码编程式配置，服务启动会自动创建线程池实例，交给Spring容器管理\",\"拒绝策略告警优化，支持前后告警间隔计数\",\"相关代码优化\",\"提示\"]},\"211\":{\"h\":\"v1.0.3\"},\"212\":{\"h\":\"Features\",\"t\":[\"配置中心支持Zookeeper\",\"线程池交由Spring管理其生命周期，可以通过依赖注入方式使用\",\"创建时添加@DynamicTp注解支持监控JUC原生线程池\",\"仿照Tomcat线程池设计，提供IO密集型线程池（EagerDtpExecutor）\",\"相关代码优化，增加必要校验\",\"提示\"]},\"213\":{\"h\":\"v1.0.2\"},\"214\":{\"h\":\"Features\",\"t\":[\"配置中心支持Nacos、Apollo、Zookeeper\",\"告警平台支持企微、钉钉\",\"监控指标数据采集支持json日志输出、MicorMeter以及Endpoint三种方式\",\"第三方组件线程池管理已集成SpringBoot内置三大WebServer（Tomcat、Jetty、Undertow）\",\"核心模块都提供SPI接口可供自定义扩展（配置中心、配置文件解析、告警平台、监控指标数据采集）\",\"提供完整使用示例（包含Grafana配置面板Json文件，直接import即可使用）\"]},\"215\":{\"h\":\"支持\"},\"216\":{\"h\":\"用爱发电\",\"t\":[\"开源不易，如果感觉该项目对您有点帮助，可以通过如下方式支持我们\",\"支持\",\"star 并向您的朋友推荐或分享dynamictp🚀\",\"轻轻点击一次上边的广告卡片🙃\",\"扫描下面微信二维码进行赞赏，请作者喝一杯咖啡☕️\",\"非常感谢您对开源精神的支持！❤️\"]},\"217\":{\"h\":\"成为赞助商\",\"t\":[\"赞助\",\"赞助任意金额，您将获得 赞助者列表 的永久留名。\",\"赞助达到 50 元，您将获得 赞助者列表 的永久留名，并可在赞助者列表里附上投放链接。\",\"赞助达 500 元，您将获得 dynamictp 文档首页的特别赞助广告展示栏位（长达 1 年）。\",\"赞助达 1000 元，您将获得 dynamictp 所有文档页面的广告栏位，包括 gitee、github（长达 1 年），并且在 1500+ 社群里 @ 全体推广一次。\",\"目前 dynamictp 官网的流量日均 PV 在 2w 左右，日均 UV 900 左右\",\"联系我们 备注 dynamic-tp 赞助\"]},\"218\":{\"h\":\"赞助人列表\",\"t\":[\"注: 赞助按捐赠的时间排序\",\"赞助人ID\",\"金额\",\"附言\",\"赞助时间\",\"投放链接\",\"**JOS\",\"￥5\",\"感谢开源\",\"2023-03-24\",\"无\",\"**psuder\",\"￥50\",\"喝星巴克\",\"2023-04-24\",\"无\",\"**ien\",\"￥20\",\"喝杯咖啡\",\"2023-06-09\",\"无\",\"**uce\",\"￥20\",\"非常棒的项目，继续加油\",\"2023-07-17\",\"无\",\"**ing\",\"￥10\",\"感谢开源\",\"2023-07-24\",\"无\",\"**武\",\"￥50\",\"2023-08-06\",\"无\",\"**Kevin\",\"￥50\",\"受益匪浅\",\"2023-09-15\",\"无\",\"**liu\",\"￥66\",\"很实用，感谢开源\",\"2023-12-02\",\"无\",\"**向南\",\"￥5\",\"感谢开源，很实用\",\"2023-12-29\",\"无\",\"**get\",\"￥20\",\"很好的项目，感谢开源\",\"2024-03-08\",\"无\",\"**睿\",\"￥20\",\"受益匪浅，感谢开源\",\"2024-04-29\",\"无\",\"**法lcey\",\"￥20\",\"感谢开源\",\"2024-08-14\",\"无\",\"**.木予\",\"￥5\",\"很棒\",\"2024-09-12\",\"无\"]},\"219\":{\"h\":\"接入公司\"},\"220\":{\"h\":\"接入公司\",\"t\":[\"按登记时间排序\",\"用户\",\"完美世界\",\"实在智能\",\"湖南通运商旅\",\"北京如易行科技有限公司\",\"视旅科技\",\"牛信网络科技有限公司\",\"壹融站信息技术（深圳）有限公司\",\"深圳市时代华盛网络科技有限公司\",\"利宝保险有限公司\",\"深圳集贤科技有限公司\",\"杭州群赞网络科技有限公司\",\"易工品\",\"上海营联信息技术有限公司\",\"西安朝前智能科技有限公司\",\"广州乐摇摇\",\"上海惟秀科技有限公司\",\"携程\",\"衢州东鱼物联网技术有限公司\",\"深圳点猫科技有限公司\",\"东方福利网\",\"哔哩哔哩\"]},\"221\":{\"h\":\"登记\",\"t\":[\"为了项目更好的发展，请在此进行登记，感谢！！！\",\"会优先支持登记用户的需求及问题反馈！！！\",\"gitee 登记\",\"github 登记\"]},\"222\":{\"h\":\"运行报警\"},\"223\":{\"h\":\"告警类型\",\"t\":[\"框架目前提供以下告警功能，每一个告警项都可以独立配置是否开启、告警阈值、告警间隔时间、平台等，具体代码请看 core 模块 notifier 包， 告警信息同时会高亮与该告警项相关的字段。\",\"线程池活跃度告警\",\"线程池活跃度告警\",\"活跃度 = (activeCount / maximumPoolSize) * 100\",\"比如 threshold 阈值配置 80，表示活跃度达到 80% 时触发告警\",\"服务启动后会开启一个定时监控任务，每隔一定时间（可配置）去计算线程池的活跃度，达到配置的 threshold 阈值后会触发一次告警，告警间隔内多次触发不会发送告警通知\",\"队列容量告警\",\"队列容量告警\",\"容量使用率 = (queueSize / queueCapacity) * 100\",\"比如 threshold 阈值配置 80，表示队列容量使用率达到 80% 时触发告警\",\"服务启动后会开启一个定时监控任务，每隔一定时间去计算任务队列的使用率，达到配置的 threshold 阈值后会触发一次告警，告警间隔内多次触发不会发送告警通知\",\"拒绝策略告警\",\"拒绝策略告警\",\"线程池线程数达到配置的最大线程数，且任务队列已满，再提交任务会触发拒绝策略\",\"DtpExecutor 线程池用到的 RejectedExecutionHandler 是经过动态代理包装过的， 在执行具体的拒绝策略之前会执行 RejectedAware 类 beforeReject() 方法\",\"beforeReject 方法会去做拒绝数量累加（总数值累加、周期值累加）。且判断如果周期累计值达到配置的阈值， 则会触发一次告警通知（同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知\",\"任务排队超时告警\",\"任务排队超时告警\",\"重写 ThreadPoolExecutor 的 execute() 方法和 beforeExecute() 方法，采用时间轮处理任务排队超时逻辑\",\"任务提交时用 queueTimeout 开启一个处理排队超时的 TimerTask，排队超时后执行 TimerTask 的 run 方法，累加排队超时任务数量（总数值累加、周期值累加）。 且判断如果周期累计值达到配置的阈值， 则会触发一次告警通知（同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知\",\"任务执行超时告警\",\"任务执行超时告警\",\"重写 ThreadPoolExecutor 的 beforeExecute() 和 afterExecute() 方法，采用时间轮处理任务执行超时逻辑\",\"beforeExecute() 阶段根据 runTimeout 开启一个处理执行超时的 TimerTask，超时后执行 TimerTask 的 run 方法， 累加执行超时任务数量（总数值累加、周期值累加）。且判断如果周期累计值达到配置的阈值，则会触发一次告警通知 （同时重置周期累加值为 0 及上次告警时间为当前时间），告警间隔内多次触发不会发送告警通知\"]},\"224\":{\"h\":\"自定义通知渠道\"},\"225\":{\"h\":\"自定义通知渠道\",\"t\":[\"如下示例定义了一个短信通知渠道\",\"定义 SmsNotifier 继承 AbstractNotifier 抽象类，实现 platform() 和 send0() 方法\",\"public class SmsNotifier extends AbstractNotifier { private final SmsClient smsClient; public SmsNotifier(SmsClient smsClient) { this.smsClient = smsClient; } @Override public String platform() { return \\\"sms\\\"; } @Override protected void send0(NotifyPlatform platform, String content) { String[] receivers = platform.getReceivers().split(\\\",\\\"); smsClient.send(platform.getSecret(), receivers, content); } } \",\"定义 SmsDtpNotifier 继承 AbstractDtpNotifier 抽象类，实现 platform()、getNoticeTemplate()、getAlarmTemplate() 和 getColors() 方法\",\"package org.dromara.dynamictp.example.notifier; import org.apache.commons.lang3.tuple.Pair; import org.dromara.dynamictp.core.notifier.AbstractDtpNotifier; /** * SmsDtpNotifier related * * @author yanhom * @since 1.1.0 */ public class SmsDtpNotifier extends AbstractDtpNotifier { public SmsDtpNotifier() { super(new SmsNotifier(new SmsClient())); } @Override public String platform() { return \\\"sms\\\"; } @Override protected String getNoticeTemplate() { return SmsNotifyConst.SMS_NOTICE_TEMPLATE; } @Override protected String getAlarmTemplate() { return SmsNotifyConst.SMS_ALARM_TEMPLATE; } @Override protected Pair<String, String> getColors() { return null; } } \",\"package org.dromara.dynamictp.example.notifier; /** * SmsNotifyConst related * * @author yanhom * @since 1.1.0 */ public class SmsNotifyConst { private SmsNotifyConst() { } public static final String SMS_ALARM_TEMPLATE = \\\"服务名称：%s \\\\n\\\" + \\\"实例信息：%s \\\\n\\\" + \\\"环境：%s \\\\n\\\" + \\\"线程池名称：%s \\\\n\\\" + \\\"报警项：%s \\\\n\\\" + \\\"报警阈值 / 当前值：%s \\\\n\\\" + \\\"核心线程数：%s \\\\n\\\" + \\\"最大线程数：%s \\\\n\\\" + \\\"当前线程数：%s \\\\n\\\" + \\\"活跃线程数：%s \\\\n\\\" + \\\"历史最大线程数：%s \\\\n\\\" + \\\"任务总数：%s \\\\n\\\" + \\\"执行完成任务数：%s \\\\n\\\" + \\\"等待执行任务数：%s \\\\n\\\" + \\\"队列类型：%s \\\\n\\\" + \\\"队列容量：%s \\\\n\\\" + \\\"队列任务数量：%s \\\\n\\\" + \\\"队列剩余容量：%s \\\\n\\\" + \\\"拒绝策略：%s \\\\n\\\" + \\\"总拒绝任务数量：%s \\\\n\\\" + \\\"总执行超时任务数量：%s \\\\n\\\" + \\\"总等待超时任务数量：%s \\\\n\\\" + \\\"上次报警时间：%s \\\\n\\\" + \\\"报警时间：%s \\\\n\\\" + \\\"接收人：@%s \\\\n\\\" + \\\"trace 信息：%s \\\\n\\\" + \\\"报警间隔：%ss \\\\n\\\" + \\\"扩展信息：%s \\\\n\\\"; public static final String SMS_NOTICE_TEMPLATE = \\\"服务名称：%s \\\\n\\\" + \\\"实例信息：%s \\\\n\\\" + \\\"环境：%s \\\\n\\\" + \\\"线程池名称：%s \\\\n\\\" + \\\"核心线程数：%s => %s \\\\n\\\" + \\\"最大线程数：%s => %s \\\\n\\\" + \\\"允许核心线程超时：%s => %s \\\\n\\\" + \\\"线程存活时间：%ss => %ss \\\\n\\\" + \\\"队列类型：%s \\\\n\\\" + \\\"队列容量：%s => %s \\\\n\\\" + \\\"拒绝策略：%s => %s \\\\n\\\" + \\\"接收人：@%s \\\\n\\\" + \\\"通知时间：%s \\\\n\\\"; } \",\"SPI 配置\",\"resources/META-INF/services 下配置 java spi 实现\",\"文件名：org.dromara.dynamictp.core.notifier.DtpNotifier\",\"文件值：org.dromara.dynamictp.example.notifier.SmsDtpNotifier\",\"图片.png\",\"配置文件\",\"dynamictp: platforms: # 通知报警平台配置 - platform: sms # 平台名称 platformId: sms1 secret: 3a7500-1287-4bd-a798-c5c3d8b69c # 短信平台密钥 receivers: 188888888,1666666666 # 短信接收人 \"]},\"226\":{\"h\":\"邮件通知\"},\"227\":{\"h\":\"邮件通知\",\"t\":[\"框架 core 模块默认集成企微、钉钉、飞书通知渠道，可直接使用。\",\"邮件通知需要单独引入下面依赖。\",\"SpringBoot1x、2x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-notify-email</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-notify-email</artifactId> <version>1.2.0-x</version> </dependency> \",\"加入邮件相关配置\",\"spring: # email notify configuration mail: # (optional) email subject, default:ThreadPool Notify title: ThreadPool Notify # mail service address host: smtp.qq.com port: 465 # send from username: 123456@qq.com # authorization code eg: rlpadadtcugh4152e password: xxxxxxxxxxxxxxxx default-encoding: UTF-8 properties: mail: smtp: socketFactoryClass: javax.net.ssl.SSLSocketFactory ssl: enable: true debug: false \",\"效果图\",\"email\"]},\"228\":{\"h\":\"调参通知\"},\"229\":{\"h\":\"调参通知\",\"t\":[\"配置变更会推送通知消息，且会高亮变更的字段\",\"如果接入了 adapter 适配模块，服务启动时也会判断配置中心配置和相应组件线程池参数是否一致，不一致会用配置中心的配置进行刷新，同时会推送通知消息。\"]},\"230\":{\"h\":\"告警信息扩展\"},\"231\":{\"h\":\"告警信息扩展\",\"t\":[\"可以通过 AbstractDtpNotifier 中的一些方法来扩展告警信息，如下通过 getTraceInfo() 方法来增加跳转详情链接，通过 getExtInfo() 方法来增加堆内存信息\",\"package org.dromara.dynamictp.example.notifier; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.tuple.Pair; import org.dromara.dynamictp.core.notifier.AbstractDtpNotifier; import org.slf4j.MDC; import static org.dromara.dynamictp.common.constant.DynamicTpConst.TRACE_ID; import static org.dromara.dynamictp.common.constant.DynamicTpConst.UNKNOWN; /** * SmsDtpNotifier related * * @author yanhom * @since 1.1.0 */ public class SmsDtpNotifier extends AbstractDtpNotifier { public SmsDtpNotifier(SmsNotifier smsNotifier) { super(smsNotifier); } @Override public String platform() { return \\\"sms\\\"; } @Override protected String getNoticeTemplate() { return SmsNotifyConst.SMS_NOTICE_TEMPLATE; } @Override protected String getAlarmTemplate() { return SmsNotifyConst.SMS_ALARM_TEMPLATE; } @Override protected Pair<String, String> getColors() { return null; } @Override protected String getTraceInfo() { if (StringUtils.isBlank(MDC.get(TRACE_ID))) { return UNKNOWN; } return \\\"[跳转详情](\\\" + getKibanaUrl(MDC.get(TRACE_ID)) + \\\")\\\"; } @Override protected String getExtInfo() { String extInfo = super.getExtInfo(); String memoryMetrics = getMemoryMetrics(); if (StringUtils.isBlank(extInfo)) { return memoryMetrics; } return extInfo + \\\";\\\" + memoryMetrics; } private String getKibanaUrl(String traceId) { return \\\"https://kibana.com/app/kibana#/discover?_g=()&_a=(columns:!(_source),index:'logstash-*',interval:auto,query:(language:lucene,query:'traceId:\\\" + traceId + \\\"'),sort:!('@timestamp',desc))\\\"; } private String getMemoryMetrics() { int heapInit = 1024; int heapUsed = 521; int heapCommitted = 1000; int heapMax = 1024; return \\\"MemoryMetrics{\\\" + \\\"heapInit=\\\" + heapInit + \\\", heapUsed=\\\" + heapUsed + \\\", heapCommitted=\\\" + heapCommitted + \\\", heapMax=\\\" + heapMax + \\\"}\\\"; } } \"]},\"232\":{\"h\":\"通知限流\"},\"233\":{\"h\":\"推送限流\",\"t\":[\"默认通知告警是基于单机模式的，服务集群每个节点都会产生通知告警信息进行推送，在集群机器数量很多的情况下同时可能会产生大量的通知告警信息，影响使用体验。\",\"1.0.8 版本开始支持集群限流，基于 redis 实现的滑动窗口限流，会限制实际进行推送的节点个数，使用引入以下依赖\",\"SpringBoot1x、2x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-limiter-redis</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-limiter-redis</artifactId> <version>1.2.0-x</version> </dependency> \",\"通知项配置 clusterLimit 字段\",\"dynamictp: executors: # 动态线程池配置，省略其他项，具体看上述配置文件 - threadPoolName: dtpExecutor1 taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\", \\\"swTrace\\\"] # 任务包装器名称，继承TaskWrapper接口 notifyItems: # 报警项，不配置自动会按默认值配置（变更通知、容量报警、活性报警） - type: capacity # 报警项类型，查看源码 NotifyTypeEnum枚举类 enabled: true threshold: 80 # 报警阈值 interval: 120 # 报警间隔（单位：s） clusterLimit: 1 # 一个报警窗口内，只允许该配置数量的机器进行推送通知，默认为1 \",\"此功能实现使用了责任链设计模式，如果项目中没有引入 redis，也可以自定义限流器，实现 NotifyFilter 接口即可，具体参考 NotifyRedisRateLimiterFilter 的实现\"]},\"234\":{\"h\":\"云之家渠道\"},\"235\":{\"h\":\"云之家通知\",\"t\":[\"引入依赖\",\"SpringBoot1x、2x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-notify-yunzhijia</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring-boot-starter-extension-notify-yunzhijia</artifactId> <version>1.2.0-x</version> </dependency> \",\"配置文件\",\"dynamictp: platforms: # 通知报警平台配置 - platform: yunzhijia # 云之家通知 urlKey: 3a7500-1287-4bd-a798-c5c3d8b69c # webhook 地址中的 key receivers: test1,test2 # 接受人 \"]},\"236\":{\"h\":\"agent 场景下使用\"},\"237\":{\"h\":\"注意事项\",\"t\":[\"当 dynamictp 跟一些 javaagent 组件一起使用时，如果这些 agent 会对线程池做增强，可能会导致内存泄露问题。\",\"比如 skywalking 9.0 线程池插件会对提交的任务做增强，导致 dynamictp 在线程池生命周期中先后拿到的不是同一个对象，会导致 一些功能 Map 清理不掉，使用时需注意。\",\"当有使用 skywalking 线程池插件、ttl agent 等时，引入以下依赖可解决这个问题。\",\"SpringBoot1x、2x、Spring5x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-agent</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x、Spring6x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-agent</artifactId> <version>1.2.0-x</version> </dependency> \",\"其他线程池增强 agent 也可能会有类似问题，使用时需引入依赖\"]},\"238\":{\"h\":\"代码使用\"},\"239\":{\"h\":\"线程池定义\",\"t\":[\"建议直接配置在配置中心，但是如果想后期再添加到配置中心，可以先用 @Bean 编码式声明（方便 Spring 依赖注入）\",\"@Configuration public class ThreadPoolConfiguration { /** * 通过{@link DynamicTp} 注解定义普通juc线程池，会享受到该框架增强能力，注解名称优先级高于方法名 * * @return 线程池实例 */ @DynamicTp(\\\"jucThreadPoolExecutor\\\") @Bean public ThreadPoolExecutor jucThreadPoolExecutor() { return (ThreadPoolExecutor) Executors.newFixedThreadPool(1); } /** * 通过{@link DynamicTp} 注解定义spring线程池，会享受到该框架增强能力，注解名称优先级高于方法名 * * @return 线程池实例 */ @DynamicTp(\\\"threadPoolTaskExecutor\\\") @Bean public ThreadPoolTaskExecutor threadPoolTaskExecutor() { return new ThreadPoolTaskExecutor(); } /** * 通过{@link ThreadPoolCreator} 快速创建一些简单配置的线程池，使用默认参数 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * * @return 线程池实例 */ @Bean public DtpExecutor dtpExecutor0() { return ThreadPoolCreator.createDynamicFast(\\\"dtpExecutor0\\\"); } /** * 通过{@link ThreadPoolBuilder} 设置详细参数创建动态线程池 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * @return 线程池实例 */ @Bean public ThreadPoolExecutor dtpExecutor1() { return ThreadPoolBuilder.newBuilder() .threadPoolName(\\\"dtpExecutor1\\\") .threadFactory(\\\"test-dtp-common\\\") .corePoolSize(10) .maximumPoolSize(15) .keepAliveTime(40) .timeUnit(TimeUnit.SECONDS) .workQueue(MEMORY_SAFE_LINKED_BLOCKING_QUEUE.getName(), 2000) .buildDynamic(); } /** * 通过{@link ThreadPoolBuilder} 设置详细参数创建动态线程池 * eager，参考tomcat线程池设计，适用于处理io密集型任务场景，具体参数可以看代码注释 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * @return 线程池实例 */ @Bean public DtpExecutor eagerDtpExecutor() { return ThreadPoolBuilder.newBuilder() .threadPoolName(\\\"eagerDtpExecutor\\\") .threadFactory(\\\"test-eager\\\") .corePoolSize(2) .maximumPoolSize(4) .queueCapacity(2000) .eager(true) .buildDynamic(); } /** * 通过{@link ThreadPoolBuilder} 设置详细参数创建动态线程池 * ordered，适用于处理有序任务场景，任务要实现Ordered接口，具体参数可以看代码注释 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * @return 线程池实例 */ @Bean public OrderedDtpExecutor orderedDtpExecutor() { return ThreadPoolBuilder.newBuilder() .threadPoolName(\\\"orderedDtpExecutor\\\") .threadFactory(\\\"test-ordered\\\") .corePoolSize(4) .maximumPoolSize(4) .queueCapacity(2000) .buildOrdered(); } /** * 通过{@link ThreadPoolBuilder} 设置详细参数创建线程池 * scheduled，适用于处理定时任务场景，具体参数可以看代码注释 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * @return 线程池实例 */ @Bean public ScheduledExecutorService scheduledDtpExecutor() { return ThreadPoolBuilder.newBuilder() .threadPoolName(\\\"scheduledDtpExecutor\\\") .corePoolSize(2) .threadFactory(\\\"test-scheduled\\\") .rejectedExecutionHandler(CALLER_RUNS_POLICY.getName()) .buildScheduled(); } } /** * 通过{@link ThreadPoolBuilder} 设置详细参数创建线程池 * priority，适用于处理优先级任务场景，具体参数可以看代码注释 * tips: 建议直接在配置中心配置就行，不用@Bean声明 * * @return 线程池实例 */ @Bean public PriorityDtpExecutor priorityDtpExecutor() { return ThreadPoolBuilder.newBuilder() .threadPoolName(\\\"priorityDtpExecutor\\\") .corePoolSize(2) .maximumPoolSize(4) .threadFactory(\\\"test-priority\\\") .rejectedExecutionHandler(CALLER_RUNS_POLICY.getName()) .buildPriority(); } \"]},\"240\":{\"h\":\"代码引用\",\"t\":[\"从 DtpRegistry 中根据线程池名称获取，或者通过依赖注入方式（推荐，更优雅）\",\"依赖注入方式使用，优先推荐依赖注入方式，不能使用依赖注入的场景可以使用方式2\",\"@Resource private ThreadPoolExecutor dtpExecutor1; public void exec() { dtpExecutor1.execute(() -> System.out.println(\\\"test\\\")); } \",\"从 DtpRegistry 注册器获取（接口场景可用）\",\"public static void main(String[] args) { DtpExecutor dtpExecutor = DtpRegistry.getDtpExecutor(\\\"dtpExecutor1\\\"); dtpExecutor.execute(() -> System.out.println(\\\"test\\\")); } \",\"更详细使用实例请参考 example 工程\"]},\"241\":{\"h\":\"运行环境\"},\"242\":{\"h\":\"环境说明\",\"t\":[\"DynamicTp 从 1.2.0 版本开始，核心模块解耦了 Spring，其他非 Spring 项目使用可以引入 core 自行二开。\"]},\"243\":{\"h\":\"jdk 版本\",\"t\":[\"支持 jdk8 到 jdk21 版本\",\"使用 jdk9 及以上的版本，若遇反射相关异常，请先确保 jvm 启动参数加上以下参数\",\"--add-opens java.base/java.lang=ALL-UNNAMED \"]},\"244\":{\"h\":\"Spring 版本\",\"t\":[\"支持 Spring 4.x、5.x、6.x 版本\",\"5.x 及以下版本用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring</artifactId> <version>1.2.0</version> </dependency> \",\"6.x 及以上版本用此依赖\",\"<dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-spring</artifactId> <version>1.2.0-x</version> </dependency> \"]},\"245\":{\"h\":\"SpringBoot 版本\",\"t\":[\"良好支持 SpringBoot 2.x、3.x 版本，建议使用这两版本。\",\"SpringBoot 1.x 支持的不是很好，可能有不兼容的地方，如有问题需自行排查。\"]},\"246\":{\"h\":\"全局配置\"},\"247\":{\"h\":\"全局配置\",\"t\":[\"为了减少配置量，我们引入了全局配置功能，项目中可能会定义多个线程池，除了一些核心参数外，其他配置可能都是相同的，新增 globalExecutorProps 配置项，如果线程池某一配置项没配置，则从全局配置中取。\",\"优先级：线程池配置 > 全局配置 > 字段默认值\",\"dynamictp: globalExecutorProps: rejectedHandlerType: CallerRunsPolicy queueType: VariableLinkedBlockingQueue waitForTasksToCompleteOnShutdown: true awaitTerminationSeconds: 3 queueTimeout: 100 taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\", \\\"swTrace\\\"] notifyItems: - type: capacity threshold: 80 interval: 300 - type: liveness threshold: 80 interval: 300 - type: change interval: 2 clusterLimit: 1 - type: reject threshold: 1 interval: 300 - type: run_timeout threshold: 300 interval: 300 - type: queue_timeout threshold: 10 interval: 300 undertowTp: corePoolSize: 100 maximumPoolSize: 200 keepAliveTime: 60 executors: - threadPoolName: dtpExecutor1 executorType: eager corePoolSize: 10 maximumPoolSize: 20 queueCapacity: 2000 threadNamePrefix: test - threadPoolName: jucExecutor autoCreate: false corePoolSize: 20 maximumPoolSize: 40 queueCapacity: 1000 threadNamePrefix: juc - threadPoolName: springTaskExecutor autoCreate: false corePoolSize: 20 maximumPoolSize: 40 queueCapacity: 1000 \"]},\"248\":{\"h\":\"线程池模式\"},\"249\":{\"h\":\"线程池模式\",\"t\":[\"目前框架提供如下 5 种线程池模式，可以根据业务场景选择合适的线程池模式\",\"线程池模式\",\"common 模式：对应线程池 DtpExecutor，DtpExecutor 是该框架的核心顶层设计类，其他类都继承自该类，common 模式是默认的线程池模式，适用于 cpu 密集型场景，当核心线程数满了优先放入队列等待\",\"eager 模式：对应线程池 EagerDtpExecutor，eager 模式适用于 IO 密集型场景，在线程池没达到设置的最大值之前优先创建新线程执行任务而不是放入队列等待，比如 tomcat 线程池、dubbo 线程池都是采用这种模式\",\"ordered 模式：对应线程池 OrderedDtpExecutor，适用于需要保证任务有序执行的场景，比如消费消息队列消息，需保证同一 uid 的消息按序消费\",\"priority 模式：对应线程池 PriorityDtpExecutor，适用于需要根据任务优先级执行的场景，比如优先级高的任务先执行\",\"scheduled 模式：对应线程池 ScheduledDtpExecutor，适用于定时任务场景\"]},\"250\":{\"h\":\"模式设定\",\"t\":[\"通过线程池配置中的 executorType 指定所用模式\",\"dynamictp: executors: # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量 - threadPoolName: dtpExecutor1 # 线程池名称，必填 executorType: common # 线程池类型 common、eager、ordered、scheduled、priority，默认 common corePoolSize: 10 # 核心线程数，默认1 maximumPoolSize: 20 # 最大线程数，默认cpu核数 queueCapacity: 4000 # 队列容量，默认1024 rejectedHandlerType: CallerRunsPolicy # 拒绝策略，查看RejectedTypeEnum枚举类，默认AbortPolicy keepAliveTime: 60 # 空闲线程等待超时时间，默认60 threadNamePrefix: test # 线程名前缀，默认dtp \"]},\"251\":{\"h\":\"接入步骤\"},\"252\":{\"h\":\"接入步骤\",\"t\":[\"接入步骤\",\"引入相应配置中心的依赖 maven 依赖\",\"配置中心配置线程池实例 配置文件\",\"启动类加 @EnableDynamicTp 注解\",\"使用 @Resource or @Autowired or 构造函数进行依赖注入，或通过 DtpRegistry.getExecutor(\\\"name\\\") 获取\",\"通过以上 4 步就可以接入使用了，是不是感觉超级简单呀，注意事项需查看\"]},\"253\":{\"h\":\"日志输出\",\"t\":[\"启动日志输出\",\"服务启动看到有如下日志输出说明接入成功\",\"| __ \\\\ (_) |__ __| | | | |_ _ _ __ __ _ _ __ ___ _ ___| |_ __ | | | | | | | '_ \\\\ / _` | '_ ` _ \\\\| |/ __| | '_ \\\\ | |__| | |_| | | | | (_| | | | | | | | (__| | |_) | |_____/ \\\\__, |_| |_|\\\\__,_|_| |_| |_|_|\\\\___|_| .__/ __/ | | | |___/ |_| :: Dynamic Thread Pool :: :: 1.2.0 :: :: https://dynamictp.cn :: :: https://github.com/dromara/dynamic-tp :: :: https://gitee.com/dromara/dynamic-tp :: DynamicTp register executor: TpMainFields(threadPoolName=dtpExecutor1, corePoolSize=2, maxPoolSize=10, keepAliveTime=50, queueType=TaskQueue, queueCapacity=200, rejectType=CallerRunsPolicy, allowCoreThreadTimeOut=false), source: beanPostProcessor DtpRegistry has been initialized, remote executors: [dtpExecutor1], local executors: [ioIntensiveExecutor, commonExecutor, dtpExecutor2] \"]},\"254\":{\"h\":\"注意事项\",\"t\":[\"注意\",\"若项目中用到了其他 agent 工具，比如 skywalking、ttl 等，他们也会对线程做拦截增强，跟满血 dtp 会有冲突，可能会造成 OOM，需要引入该依赖 agent 模式下依赖\",\"普通 JUC 线程池或者 Spring 线程池想要被框架管理，可以 @Bean 定义时加 @DynamicTp 注解，同时配置文件中添加配置项 autoCreate: false\",\"动态线程池实例服务启动时会根据配置中心的配置动态注册到 Spring 容器中，建议不要用 @Bean 编程式重复声明同一线程池实例，直接配置在配置中心就行\",\"阻塞队列只有 VariableLinkedBlockingQueue 及其子类可以修改 capacity，该类型功能和 LinkedBlockingQueue 相似， 只是 capacity 不是 final 类型，可以修改，VariableLinkedBlockingQueue 参考 RabbitMq 的实现\"]},\"255\":{\"h\":\"拒绝策略\"},\"256\":{\"h\":\"自定义拒绝策略\",\"t\":[\"实现 RejectedExecutionHandler 接口，或继承相关子类\",\"@Slf4j public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy { private final String threadName; public AbortPolicyWithReport(String threadName) { this.threadName = threadName; } @Override public void rejectedExecution(Runnable r, ThreadPoolExecutor e) { String msg = String.format( \\\"Thread pool is EXHAUSTED!\\\" + \\\" Thread Name: %s, Pool Size: %d (active: %d, core: %d, max: %d, largest: %d), Task: %d (completed: %d),\\\" + \\\" Executor status:(isShutdown:%s, isTerminated:%s, isTerminating:%s)!\\\", threadName, e.getPoolSize(), e.getActiveCount(), e.getCorePoolSize(), e.getMaximumPoolSize(), e.getLargestPoolSize(), e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(), e.isTerminating()); log.warn(msg); throw new RejectedExecutionException(msg); } } \",\"SPI 配置\",\"resources/META-INF/services 下配置 java spi 实现\",\"文件名：java.util.concurrent.RejectedExecutionHandler\",\"文件值：org.dromara.dynamictp.core.reject.AbortPolicyWithReport\"]},\"257\":{\"h\":\"任务包装\"},\"258\":{\"h\":\"任务包装器\",\"t\":[\"框架默认提供了一些任务包装器，可以实现特定的功能\",\"任务包装器\",\"MdcTaskWrapper 支持 MDC 上下文传递，名称：mdc\",\"TtlTaskWrapper 支持 ThreadLocal 上下文传递，名称：ttl\",\"SwTraceTaskWrapper 支持 Skywalking TID 传递，名称：swTrace\",\"OpenTelemetryWrapper，支持 OpenTelemetry 上下文传递，名称：OTel\",\"NamedRunnable 支持给任务添加名称\",\"可以继承 TaskWrapper SPI 接口自定义任务包装器\"]},\"259\":{\"h\":\"使用方式\",\"t\":[\"MdcTaskWrapper、TtlTaskWrapper、NamedRunnable 在 core 包中，不需要引入其他依赖\",\"SwTraceTaskWrapper 是 extension 模块提供的扩展，需要引入依赖\",\"SpringBoot1x、2x、Spring5x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-skywalking</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x、Spring6x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-skywalking</artifactId> <version>1.2.0-x</version> </dependency> \",\"OpenTelemetryWrapper 是 extension 模块提供的扩展，需要引入依赖\",\"SpringBoot1x、2x、Spring5x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-opentelemetry</artifactId> <version>1.2.0</version> </dependency> \",\"SpringBoot3x、Spring6x 用此依赖\",\" <dependency> <groupId>org.dromara.dynamictp</groupId> <artifactId>dynamic-tp-extension-opentelemetry</artifactId> <version>1.2.0-x</version> </dependency> \",\"自定义 TaskWrapper 示例\",\"package org.dromara.dynamictp.example.wrapper; import lombok.extern.slf4j.Slf4j; import org.dromara.dynamictp.core.support.task.wrapper.TaskWrapper; /** * CustomTaskWrapper related * * @author yanhom * @since 1.1.0 */ @Slf4j public class CustomTaskWrapper implements TaskWrapper { @Override public String name() { return \\\"custom\\\"; } @Override public Runnable wrap(Runnable runnable) { return new MyRunnable(runnable); } public static class MyRunnable implements Runnable { private final Runnable runnable; public MyRunnable(Runnable runnable) { this.runnable = runnable; } @Override public void run() { log.info(\\\"before run\\\"); runnable.run(); log.info(\\\"after run\\\"); } } } \",\"resources/META-INF/services 下配置 java spi 实现\",\"文件名：org.dromara.dynamictp.core.support.task.wrapper.TaskWrapper\",\"文件值：org.dromara.dynamictp.example.wrapper.CustomTaskWrapper\",\"图片.png\",\"线程池配置文件加如下配置项\",\"dynamictp: executors: # 动态线程池配置，省略其他项，具体看上述配置文件 - threadPoolName: dtpExecutor1 taskWrapperNames: [\\\"ttl\\\", \\\"mdc\\\", \\\"swTrace\\\", \\\"custom\\\"] # 任务包装器名称，继承 TaskWrapper 接口 \"]},\"260\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"261\":{\"h\":\"Configcenter\"},\"262\":{\"h\":\"Guide\"},\"263\":{\"h\":\"Middleware\"},\"264\":{\"h\":\"Introduction\"},\"265\":{\"h\":\"Monitor\"},\"266\":{\"h\":\"Other\"},\"267\":{\"h\":\"Notice\"},\"268\":{\"h\":\"Use\"}},\"dirtCount\":0,\"index\":[[\"示例\",{\"1\":{\"259\":1}}],[\"名称\",{\"1\":{\"258\":4}}],[\"名称规则\",{\"1\":{\"66\":1,\"68\":1,\"84\":1}}],[\"编程式重复声明同一线程池实例\",{\"1\":{\"254\":1}}],[\"编码式声明\",{\"1\":{\"239\":1}}],[\"普通\",{\"1\":{\"254\":1}}],[\"普通线程池和\",{\"1\":{\"103\":1}}],[\"他们也会对线程做拦截增强\",{\"1\":{\"254\":1}}],[\"`\",{\"1\":{\"253\":2}}],[\"步就可以接入使用了\",{\"1\":{\"252\":1}}],[\"步就可完成\",{\"1\":{\"103\":1}}],[\"构造函数进行依赖注入\",{\"1\":{\"252\":1}}],[\"指定所用模式\",{\"1\":{\"250\":1}}],[\"指标上报失败问题\",{\"1\":{\"167\":1}}],[\"指标数据采集支持配置多个采集方式\",{\"1\":{\"196\":1}}],[\"指标数据采集器新增\",{\"1\":{\"161\":1}}],[\"指标数据\",{\"1\":{\"120\":1}}],[\"指标数据以\",{\"1\":{\"107\":1}}],[\"指标阈值告警\",{\"0\":{\"118\":1}}],[\"指标接口\",{\"0\":{\"116\":1}}],[\"指标收集\",{\"1\":{\"94\":1}}],[\"指标采集端点\",{\"1\":{\"122\":1}}],[\"指标采集\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"种线程池模式\",{\"1\":{\"249\":1}}],[\"良好支持\",{\"1\":{\"245\":1}}],[\"工程\",{\"1\":{\"240\":1}}],[\"工具\",{\"1\":{\"254\":1}}],[\"工具包的超时时间\",{\"1\":{\"173\":1}}],[\"工具导入\",{\"0\":{\"56\":1,\"63\":1}}],[\"工具快速导入下述格式的配置\",{\"1\":{\"52\":1,\"58\":1}}],[\"更详细使用实例请参考\",{\"1\":{\"240\":1}}],[\"更优雅\",{\"1\":{\"240\":1}}],[\"更精准的判断是否线程池配置变动进行刷新\",{\"1\":{\"169\":1}}],[\"快速创建一些简单配置的线程池\",{\"1\":{\"239\":1}}],[\"快快升级体验吧\",{\"1\":{\"200\":1}}],[\"快快使用\",{\"1\":{\"67\":1,\"83\":1}}],[\"省略其他项\",{\"1\":{\"233\":1,\"259\":1}}],[\"影响使用体验\",{\"1\":{\"233\":1}}],[\"推送限流\",{\"0\":{\"233\":1}}],[\"推荐\",{\"1\":{\"94\":1,\"240\":1}}],[\"跳转详情\",{\"1\":{\"231\":1}}],[\"适用于定时任务场景\",{\"1\":{\"249\":1}}],[\"适用于需要根据任务优先级执行的场景\",{\"1\":{\"249\":1}}],[\"适用于需要保证任务有序执行的场景\",{\"1\":{\"249\":1}}],[\"适用于\",{\"1\":{\"249\":1}}],[\"适用于处理优先级任务场景\",{\"1\":{\"239\":1}}],[\"适用于处理定时任务场景\",{\"1\":{\"239\":1}}],[\"适用于处理有序任务场景\",{\"1\":{\"239\":1}}],[\"适用于处理io密集型任务场景\",{\"1\":{\"239\":1}}],[\"适用于可以指定任务的处理优先级场景\",{\"1\":{\"161\":1}}],[\"适配模块\",{\"1\":{\"229\":1}}],[\"效果图\",{\"1\":{\"227\":1}}],[\"短信接收人\",{\"1\":{\"225\":1}}],[\"短信平台密钥\",{\"1\":{\"225\":1}}],[\"短信等\",{\"1\":{\"118\":1}}],[\"允许核心线程超时\",{\"1\":{\"225\":1}}],[\"历史最大线程数\",{\"1\":{\"225\":1}}],[\"累加执行超时任务数量\",{\"1\":{\"223\":1}}],[\"累加排队超时任务数量\",{\"1\":{\"223\":1}}],[\"超时后执行\",{\"1\":{\"223\":1}}],[\"超时时间等可以参考帮助文档\",{\"1\":{\"117\":1}}],[\"阶段根据\",{\"1\":{\"223\":1}}],[\"则会触发一次告警通知\",{\"1\":{\"223\":3}}],[\"则从全局配置中取\",{\"1\":{\"157\":1,\"247\":1}}],[\"且会高亮变更的字段\",{\"1\":{\"229\":1}}],[\"且判断如果周期累计值达到配置的阈值\",{\"1\":{\"223\":3}}],[\"且任务队列已满\",{\"1\":{\"223\":1}}],[\"周期值累加\",{\"1\":{\"223\":3}}],[\"总等待超时任务数量\",{\"1\":{\"225\":1}}],[\"总执行超时任务数量\",{\"1\":{\"225\":1}}],[\"总拒绝任务数量\",{\"1\":{\"225\":1}}],[\"总数值累加\",{\"1\":{\"223\":3}}],[\"总结起来其实也就只用两步\",{\"1\":{\"117\":1}}],[\"再提交任务会触发拒绝策略\",{\"1\":{\"223\":1}}],[\"再也不需要部署多个组件写yml配置文件那些繁琐操作了\",{\"1\":{\"120\":1}}],[\"表示队列容量使用率达到\",{\"1\":{\"223\":1}}],[\"表示活跃度达到\",{\"1\":{\"223\":1}}],[\"达到配置的\",{\"1\":{\"223\":2}}],[\"去计算线程池的活跃度\",{\"1\":{\"223\":1}}],[\"去掉事件监听依赖\",{\"1\":{\"198\":1}}],[\"去掉在配置中手动指定线程池配置文件\",{\"1\":{\"169\":2}}],[\"每隔一定时间去计算任务队列的使用率\",{\"1\":{\"223\":1}}],[\"每隔一定时间\",{\"1\":{\"223\":1}}],[\"每一个告警项都可以独立配置是否开启\",{\"1\":{\"223\":1}}],[\"阈值后会触发一次告警\",{\"1\":{\"223\":2}}],[\"阈值配置\",{\"1\":{\"223\":2}}],[\"阈值告警\",{\"1\":{\"113\":1}}],[\"活跃线程数\",{\"1\":{\"225\":1}}],[\"活跃度\",{\"1\":{\"223\":1}}],[\"活性报警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"103\":1,\"233\":1}}],[\"平台名称\",{\"1\":{\"225\":1}}],[\"平台等\",{\"1\":{\"223\":1}}],[\"平台id\",{\"1\":{\"4\":2,\"5\":4,\"11\":2,\"12\":4,\"18\":4,\"24\":2,\"25\":4,\"30\":2,\"31\":4,\"36\":2,\"37\":4,\"42\":2,\"43\":4,\"49\":2,\"50\":4,\"55\":4,\"61\":4}}],[\"为了减少配置量\",{\"1\":{\"247\":1}}],[\"为了项目更好的发展\",{\"1\":{\"221\":1}}],[\"为什么\",{\"0\":{\"141\":1}}],[\"登记\",{\"0\":{\"221\":1},\"1\":{\"221\":2}}],[\"哔哩哔哩\",{\"1\":{\"220\":1}}],[\"东方福利网\",{\"1\":{\"220\":1}}],[\"衢州东鱼物联网技术有限公司\",{\"1\":{\"220\":1}}],[\"携程\",{\"1\":{\"220\":1}}],[\"广州乐摇摇\",{\"1\":{\"220\":1}}],[\"广泛性\",{\"1\":{\"98\":1}}],[\"西安朝前智能科技有限公司\",{\"1\":{\"220\":1}}],[\"杭州群赞网络科技有限公司\",{\"1\":{\"220\":1}}],[\"利宝保险有限公司\",{\"1\":{\"220\":1}}],[\"利用nacos作为配置中心动态修改线程池核心参数\",{\"1\":{\"128\":1}}],[\"利用\",{\"1\":{\"94\":1}}],[\"深圳点猫科技有限公司\",{\"1\":{\"220\":1}}],[\"深圳集贤科技有限公司\",{\"1\":{\"220\":1}}],[\"深圳市时代华盛网络科技有限公司\",{\"1\":{\"220\":1}}],[\"深圳\",{\"1\":{\"220\":1}}],[\"壹融站信息技术\",{\"1\":{\"220\":1}}],[\"牛信网络科技有限公司\",{\"1\":{\"220\":1}}],[\"视旅科技\",{\"1\":{\"220\":1}}],[\"北京如易行科技有限公司\",{\"1\":{\"220\":1}}],[\"湖南通运商旅\",{\"1\":{\"220\":1}}],[\"按登记时间排序\",{\"1\":{\"220\":1}}],[\"按需开启\",{\"1\":{\"122\":1}}],[\"木予\",{\"1\":{\"218\":1}}],[\"法lcey\",{\"1\":{\"218\":1}}],[\"睿\",{\"1\":{\"218\":1}}],[\"向南\",{\"1\":{\"218\":1}}],[\"很棒\",{\"1\":{\"218\":1}}],[\"很好的项目\",{\"1\":{\"218\":1}}],[\"很实用\",{\"1\":{\"218\":2}}],[\"很难覆盖到所有的版本\",{\"1\":{\"145\":1}}],[\"受益匪浅\",{\"1\":{\"218\":2}}],[\"武\",{\"1\":{\"218\":1}}],[\"继续加油\",{\"1\":{\"218\":1}}],[\"继承\",{\"1\":{\"111\":1,\"225\":2,\"259\":1}}],[\"继承taskwrapper接口\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"233\":1}}],[\"喝杯咖啡\",{\"1\":{\"218\":1}}],[\"喝星巴克\",{\"1\":{\"218\":1}}],[\"￥66\",{\"1\":{\"218\":1}}],[\"￥10\",{\"1\":{\"218\":1}}],[\"￥20\",{\"1\":{\"218\":5}}],[\"￥50\",{\"1\":{\"218\":3}}],[\"￥5\",{\"1\":{\"218\":3}}],[\"投放链接\",{\"1\":{\"218\":1}}],[\"附言\",{\"1\":{\"218\":1}}],[\"金额\",{\"1\":{\"218\":1}}],[\"联系我们\",{\"1\":{\"217\":1}}],[\"联系社区\",{\"0\":{\"132\":1}}],[\"日均\",{\"1\":{\"217\":1}}],[\"日志输出\",{\"0\":{\"253\":1}}],[\"日志输出优化\",{\"1\":{\"185\":1}}],[\"日志格式输出磁盘\",{\"1\":{\"107\":1}}],[\"左右\",{\"1\":{\"217\":2}}],[\"官网的流量日均\",{\"1\":{\"217\":1}}],[\"官方没有提供\",{\"1\":{\"70\":1}}],[\"全体推广一次\",{\"1\":{\"217\":1}}],[\"全局配置platforms\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"全局配置\",{\"0\":{\"246\":1,\"247\":1},\"1\":{\"4\":2,\"5\":1,\"11\":2,\"12\":1,\"18\":1,\"24\":2,\"25\":1,\"30\":2,\"31\":1,\"36\":2,\"37\":1,\"42\":2,\"43\":1,\"49\":2,\"50\":1,\"55\":1,\"61\":1,\"247\":1}}],[\"社群里\",{\"1\":{\"217\":1}}],[\"年\",{\"1\":{\"217\":2}}],[\"长达\",{\"1\":{\"217\":2}}],[\"元\",{\"1\":{\"217\":3}}],[\"赞助时间\",{\"1\":{\"218\":1}}],[\"赞助人id\",{\"1\":{\"218\":1}}],[\"赞助人列表\",{\"0\":{\"218\":1}}],[\"赞助按捐赠的时间排序\",{\"1\":{\"218\":1}}],[\"赞助达\",{\"1\":{\"217\":2}}],[\"赞助达到\",{\"1\":{\"217\":1}}],[\"赞助者列表\",{\"1\":{\"217\":2}}],[\"赞助任意金额\",{\"1\":{\"217\":1}}],[\"赞助\",{\"1\":{\"217\":2}}],[\"❤️\",{\"1\":{\"216\":1}}],[\"扫描下面微信二维码进行赞赏\",{\"1\":{\"216\":1}}],[\"轻轻点击一次上边的广告卡片🙃\",{\"1\":{\"216\":1}}],[\"轻量简单\",{\"1\":{\"103\":1}}],[\"并且在\",{\"1\":{\"217\":1}}],[\"并可在赞助者列表里附上投放链接\",{\"1\":{\"217\":1}}],[\"并向您的朋友推荐或分享dynamictp🚀\",{\"1\":{\"216\":1}}],[\"并不会影响到队列里已有任务的执行\",{\"1\":{\"143\":1}}],[\"仿照tomcat线程池设计\",{\"1\":{\"212\":1}}],[\"交给spring容器管理\",{\"1\":{\"210\":1}}],[\"尽可能降低因线程池设置而导致的积压风险\",{\"1\":{\"200\":1}}],[\"就rocketmq来说\",{\"1\":{\"200\":1}}],[\"就可能会导致内存泄露问题\",{\"1\":{\"141\":1}}],[\"经常会遇到的其中一个问题就是消息积压问题\",{\"1\":{\"200\":1}}],[\"经过测试\",{\"1\":{\"137\":1}}],[\"经过多个版本的迭代\",{\"1\":{\"103\":1}}],[\"应该是很多互联网系统都会使用到的中间件\",{\"1\":{\"200\":1}}],[\"应用只支持\",{\"1\":{\"52\":1}}],[\"应用接入\",{\"0\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"请先确保\",{\"1\":{\"243\":1}}],[\"请在此进行登记\",{\"1\":{\"221\":1}}],[\"请作者喝一杯咖啡☕️\",{\"1\":{\"216\":1}}],[\"请求拒绝的风险\",{\"1\":{\"200\":1}}],[\"请不要直接使用该值\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"尝试使用下\",{\"1\":{\"200\":1}}],[\"那么你大概率遇到过\",{\"1\":{\"200\":1}}],[\"那么我们是否可以结合配置中心来做运行时线程池参数的动态调整呢\",{\"1\":{\"98\":1}}],[\"明细\",{\"1\":{\"200\":1}}],[\"低版本\",{\"1\":{\"199\":1}}],[\"低耦合\",{\"1\":{\"113\":1}}],[\"见\",{\"1\":{\"196\":1}}],[\"传递\",{\"1\":{\"196\":1,\"258\":1}}],[\"传入\",{\"1\":{\"162\":1}}],[\"距离v1\",{\"1\":{\"200\":1}}],[\"距离\",{\"1\":{\"195\":1}}],[\"责任链模式重构\",{\"1\":{\"193\":1,\"198\":1}}],[\"彻底解耦\",{\"1\":{\"193\":1}}],[\"林林林\",{\"1\":{\"191\":1,\"192\":1}}],[\"要修改的核心线程数大于当前最大线程数不能修改问题优化\",{\"1\":{\"189\":1}}],[\"要求\",{\"1\":{\"134\":1}}],[\"感谢开源\",{\"1\":{\"218\":7}}],[\"感谢\",{\"1\":{\"183\":9,\"184\":3,\"185\":5,\"187\":3,\"188\":1,\"191\":1,\"192\":2,\"194\":2,\"196\":6,\"221\":1}}],[\"丰富\",{\"1\":{\"181\":1}}],[\"异常\",{\"1\":{\"180\":1}}],[\"减少外部依赖\",{\"1\":{\"179\":1}}],[\"减少配置量\",{\"1\":{\"1\":1,\"4\":1,\"8\":1,\"11\":1,\"15\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":1,\"33\":1,\"36\":1,\"39\":1,\"42\":1,\"45\":1,\"49\":1,\"52\":1,\"58\":1,\"157\":1,\"250\":1}}],[\"序列化工具\",{\"1\":{\"179\":1}}],[\"根据配置推送相应报警群\",{\"1\":{\"183\":1}}],[\"根据依赖选择\",{\"1\":{\"179\":1}}],[\"根据自己项目做调整\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"增加必要校验\",{\"1\":{\"212\":1}}],[\"增加线程池别名配置\",{\"1\":{\"201\":1}}],[\"增加校验判断逻辑\",{\"1\":{\"199\":1}}],[\"增加spring\",{\"1\":{\"183\":2}}],[\"增加对producer线程池的管理\",{\"1\":{\"183\":1}}],[\"增加对rabbitmq消费线程池的管理\",{\"1\":{\"183\":1}}],[\"增加对rocketmq\",{\"1\":{\"183\":1}}],[\"增加对\",{\"1\":{\"183\":1}}],[\"增加\",{\"1\":{\"179\":2,\"183\":1}}],[\"增强线程池后\",{\"1\":{\"176\":1}}],[\"增强普通线程池后没返回代理\",{\"1\":{\"172\":1}}],[\"增强\",{\"0\":{\"140\":1},\"1\":{\"154\":1,\"157\":1}}],[\"功能\",{\"1\":{\"179\":1}}],[\"功能特性\",{\"0\":{\"102\":1,\"103\":1}}],[\"排队超时后执行\",{\"1\":{\"223\":1}}],[\"排队超时\",{\"1\":{\"179\":1}}],[\"信息\",{\"1\":{\"225\":1}}],[\"信息可以自己扩展\",{\"1\":{\"177\":1}}],[\"信息的问题\",{\"1\":{\"176\":1}}],[\"统一管理依赖\",{\"1\":{\"179\":1}}],[\"统一封装管理\",{\"1\":{\"177\":1}}],[\"统计\",{\"1\":{\"101\":1,\"144\":1}}],[\"初始化错误赋值的bug\",{\"1\":{\"184\":1}}],[\"初始化晚于线程池实例初始化问题\",{\"1\":{\"180\":1}}],[\"初始化顺序不确定导致的\",{\"1\":{\"176\":1}}],[\"初始化失败问题\",{\"1\":{\"167\":1}}],[\"初始化失败的问题\",{\"1\":{\"167\":1}}],[\"失败的问题\",{\"1\":{\"176\":1}}],[\"强转\",{\"1\":{\"176\":1}}],[\"高低版本不兼容问题\",{\"1\":{\"184\":1,\"189\":1}}],[\"高低版本兼容性报错问题\",{\"1\":{\"176\":1}}],[\"高可扩展\",{\"1\":{\"103\":1}}],[\"高可用性\",{\"1\":{\"98\":1}}],[\"扩展信息\",{\"1\":{\"225\":1}}],[\"扩展\",{\"1\":{\"175\":1}}],[\"细化告警配置\",{\"1\":{\"175\":1}}],[\"升级\",{\"1\":{\"175\":1}}],[\"黑科技模块\",{\"1\":{\"175\":1}}],[\"添加无参构造函数\",{\"1\":{\"192\":1}}],[\"添加插件机制\",{\"1\":{\"175\":1}}],[\"添加\",{\"1\":{\"175\":1,\"199\":1}}],[\"添加超时时间控制\",{\"1\":{\"152\":1}}],[\"各三方中间件线程池被代理后\",{\"1\":{\"173\":1}}],[\"没兼容框架内自定义线程池的场景\",{\"1\":{\"172\":1}}],[\"没有移除\",{\"1\":{\"167\":1}}],[\"没有将\",{\"1\":{\"162\":1}}],[\"核数等指标\",{\"1\":{\"171\":1}}],[\"核心模块都提供spi接口可供自定义扩展\",{\"1\":{\"214\":1}}],[\"核心模块中移除对\",{\"1\":{\"150\":1}}],[\"核心模块解耦了\",{\"1\":{\"138\":1,\"242\":1}}],[\"核心线程数\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"225\":2,\"250\":1}}],[\"降低接入成本\",{\"1\":{\"169\":2}}],[\"降低配置复杂度\",{\"1\":{\"161\":1}}],[\"成员属性初始化失败问题\",{\"1\":{\"167\":1}}],[\"成为赞助商\",{\"0\":{\"217\":1}}],[\"成为\",{\"0\":{\"134\":1}}],[\"插件包从\",{\"1\":{\"164\":1}}],[\"机器人签名不为空时报错的问题\",{\"1\":{\"162\":1}}],[\"机制\",{\"1\":{\"122\":1}}],[\"执行完成任务数\",{\"1\":{\"225\":1}}],[\"执行超时\",{\"1\":{\"179\":1}}],[\"执行超时后是否中断线程\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1}}],[\"执行的问题\",{\"1\":{\"162\":1}}],[\"错乱问题\",{\"1\":{\"162\":1,\"167\":1}}],[\"错误问题\",{\"1\":{\"158\":1}}],[\"重写\",{\"1\":{\"223\":2}}],[\"重构调整\",{\"1\":{\"203\":1}}],[\"重构部分通知告警模块实现\",{\"1\":{\"203\":1}}],[\"重构了好一些功能\",{\"1\":{\"200\":1}}],[\"重构抽象\",{\"1\":{\"193\":1,\"198\":1}}],[\"重构所有\",{\"1\":{\"169\":1}}],[\"重构\",{\"1\":{\"169\":2,\"179\":1,\"193\":1,\"198\":1}}],[\"重复创建调度任务的问题\",{\"1\":{\"162\":1}}],[\"重启后测试访问指标接口\",{\"1\":{\"116\":1}}],[\"少鹏\",{\"1\":{\"161\":1,\"162\":1}}],[\"控制告警信息里的环境取值\",{\"1\":{\"161\":1}}],[\"控制任务执行超时后是否需要中断当前线程\",{\"1\":{\"161\":1}}],[\"发布已经有差不多\",{\"1\":{\"195\":1}}],[\"发布记录\",{\"0\":{\"174\":1,\"178\":1,\"182\":1,\"186\":1,\"190\":1,\"195\":1,\"200\":1}}],[\"发出的消息接受人为空问题\",{\"1\":{\"158\":1}}],[\"发版记录\",{\"0\":{\"148\":1,\"149\":1,\"153\":1,\"156\":1,\"160\":1,\"165\":1,\"170\":1}}],[\"问题\",{\"1\":{\"158\":1,\"176\":1,\"192\":1}}],[\"丢失问题\",{\"1\":{\"158\":1}}],[\"若项目中用到了其他\",{\"1\":{\"254\":1}}],[\"若遇反射相关异常\",{\"1\":{\"243\":1}}],[\"若配置的线程池名称相同\",{\"1\":{\"157\":1}}],[\"若想使用\",{\"1\":{\"157\":1}}],[\"标识是否自动生成\",{\"1\":{\"157\":1}}],[\"标准线程池\",{\"1\":{\"101\":1}}],[\"字段数据类型错误问题修复\",{\"1\":{\"188\":1}}],[\"字段\",{\"1\":{\"157\":1,\"161\":3,\"187\":1,\"233\":1}}],[\"字段默认值\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"247\":1}}],[\"除了一些核心参数外\",{\"1\":{\"157\":1,\"247\":1}}],[\"除非您想使用默认的\",{\"1\":{\"7\":1}}],[\"情况下尝试去拿\",{\"1\":{\"157\":1}}],[\"单测覆盖率\",{\"1\":{\"156\":1}}],[\"单位\",{\"1\":{\"4\":4,\"5\":3,\"11\":4,\"12\":3,\"18\":3,\"24\":4,\"25\":3,\"30\":4,\"31\":3,\"36\":4,\"37\":3,\"42\":4,\"43\":3,\"49\":4,\"50\":3,\"55\":3,\"61\":3,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"101\":1,\"233\":1}}],[\"原线程池优雅关闭\",{\"1\":{\"173\":1}}],[\"原线程池的问题\",{\"1\":{\"172\":1}}],[\"原因是\",{\"1\":{\"156\":1}}],[\"原生线程池或\",{\"1\":{\"157\":1}}],[\"原生线程池或者\",{\"1\":{\"139\":1}}],[\"原生的\",{\"1\":{\"140\":1}}],[\"了\",{\"1\":{\"156\":1}}],[\"次数的问题\",{\"1\":{\"154\":1}}],[\"部分代码优化\",{\"1\":{\"207\":1}}],[\"部分代码优化重构\",{\"1\":{\"163\":1,\"168\":1,\"173\":1,\"177\":1,\"181\":1,\"185\":1}}],[\"部分代码设计优化重构\",{\"1\":{\"152\":1,\"159\":1}}],[\"部署安装文档\",{\"1\":{\"115\":1}}],[\"部署的时候\",{\"1\":{\"26\":1}}],[\"认证\",{\"1\":{\"152\":1}}],[\"客户端初始化支持\",{\"1\":{\"152\":1}}],[\"调参通知\",{\"0\":{\"228\":1,\"229\":1}}],[\"调参被覆盖问题\",{\"1\":{\"197\":1}}],[\"调整线程池告警配置初始化时机\",{\"1\":{\"192\":1}}],[\"调整为实现\",{\"1\":{\"192\":1}}],[\"调整代码风格\",{\"1\":{\"189\":1}}],[\"调整告警项的默认阈值\",{\"1\":{\"173\":1}}],[\"调用报线程池关闭的错误\",{\"1\":{\"151\":1}}],[\"调度线程池\",{\"1\":{\"103\":1}}],[\"被框架管理后\",{\"1\":{\"158\":1}}],[\"被框架管理起来\",{\"1\":{\"94\":1}}],[\"被关闭\",{\"1\":{\"151\":1}}],[\"限流器在\",{\"1\":{\"151\":1}}],[\"修复钉钉手机端报警信息高亮失效问题\",{\"1\":{\"202\":1}}],[\"修复钉钉告警不能\",{\"1\":{\"176\":1}}],[\"修复钉钉告警\",{\"1\":{\"158\":1}}],[\"修复通知渠道配置修改不能动态更新问题\",{\"1\":{\"202\":1}}],[\"修复并发导致通知报警信息发送多条的问题\",{\"1\":{\"202\":1}}],[\"修复核心线程预热设置\",{\"1\":{\"197\":1}}],[\"修复提前使用因告警项没初始化导致的\",{\"1\":{\"192\":1}}],[\"修复dtppostprocessor类中annotatedbeandefinition强制转换失败问题\",{\"1\":{\"184\":1}}],[\"修复webserver\",{\"1\":{\"184\":1}}],[\"修复配置变更后不通知的问题\",{\"1\":{\"180\":1}}],[\"修复修复拒绝策略为\",{\"1\":{\"176\":1}}],[\"修复因\",{\"1\":{\"176\":1}}],[\"修复企微告警配置多个接受人不能正确\",{\"1\":{\"176\":1}}],[\"修复企微告警无\",{\"1\":{\"176\":1}}],[\"修复其他\",{\"1\":{\"176\":1}}],[\"修复代理三方线程池时直接继承\",{\"1\":{\"172\":1}}],[\"修复使用注解注入\",{\"1\":{\"167\":1}}],[\"修复线程池别名不一致导致\",{\"1\":{\"167\":1}}],[\"修复飞书告警失败问题\",{\"1\":{\"180\":1}}],[\"修复飞书告警\",{\"1\":{\"162\":1}}],[\"修复飞书报警填写了\",{\"1\":{\"158\":1}}],[\"修复异常拒绝任务时跳过\",{\"1\":{\"162\":1}}],[\"修复告警时\",{\"1\":{\"162\":1}}],[\"修复上下文刷新后\",{\"1\":{\"162\":1}}],[\"修复动态更新\",{\"1\":{\"158\":1}}],[\"修复定时任务只能运行\",{\"1\":{\"154\":1}}],[\"修复执行\",{\"1\":{\"151\":1}}],[\"修复\",{\"1\":{\"151\":2,\"154\":2,\"158\":5,\"162\":2,\"167\":5,\"172\":2,\"176\":1,\"180\":2,\"184\":1,\"192\":1,\"197\":1}}],[\"之前版本中\",{\"1\":{\"157\":1}}],[\"之间时\",{\"1\":{\"151\":1}}],[\"之后访问\",{\"1\":{\"7\":1}}],[\"兼容\",{\"1\":{\"194\":1,\"197\":1}}],[\"兼容低版本\",{\"1\":{\"194\":1}}],[\"兼容高版本\",{\"1\":{\"151\":1}}],[\"兼容当\",{\"1\":{\"151\":1}}],[\"兼容性\",{\"1\":{\"103\":1}}],[\"框架默认提供了一些任务包装器\",{\"1\":{\"258\":1}}],[\"框架\",{\"1\":{\"227\":1}}],[\"框架目前提供以下告警功能\",{\"1\":{\"223\":1}}],[\"框架线程池管理\",{\"1\":{\"187\":2}}],[\"框架的问题\",{\"1\":{\"162\":1}}],[\"框架集成\",{\"1\":{\"149\":1}}],[\"框架核心功能都提供\",{\"1\":{\"103\":1}}],[\"欢迎大家升级体验哦\",{\"1\":{\"195\":1}}],[\"欢迎提\",{\"1\":{\"145\":1}}],[\"欢迎了解使用star支持哦\",{\"1\":{\"120\":1}}],[\"出队效果会受到新更新的值的影响\",{\"1\":{\"143\":1}}],[\"出队的阻塞效果是通过加锁\",{\"1\":{\"143\":1}}],[\"判断比较已有元素数和队列容量实现的\",{\"1\":{\"143\":1}}],[\"入队\",{\"1\":{\"143\":1}}],[\"反馈\",{\"1\":{\"142\":1}}],[\"怎么跳过\",{\"1\":{\"156\":1}}],[\"怎么回事\",{\"0\":{\"142\":1,\"145\":1}}],[\"怎么解决\",{\"0\":{\"140\":1}}],[\"关闭\",{\"1\":{\"141\":1}}],[\"移除这些线程池插件\",{\"1\":{\"141\":1}}],[\"清理不掉\",{\"1\":{\"141\":1,\"154\":1,\"237\":1}}],[\"先后拿到的不是同一个对象\",{\"1\":{\"141\":1}}],[\"导致告警信息里的\",{\"1\":{\"167\":1}}],[\"导致功能\",{\"1\":{\"154\":1}}],[\"导致\",{\"1\":{\"141\":1,\"237\":1}}],[\"组件一起使用时\",{\"1\":{\"141\":1,\"237\":1}}],[\"会享受到该框架增强能力\",{\"1\":{\"239\":2}}],[\"会导致\",{\"1\":{\"237\":1}}],[\"会导致一些功能\",{\"1\":{\"141\":1}}],[\"会限制实际进行推送的节点个数\",{\"1\":{\"233\":1}}],[\"会优先支持登记用户的需求及问题反馈\",{\"1\":{\"221\":1}}],[\"会删除主线程\",{\"1\":{\"176\":1}}],[\"会有冲突\",{\"1\":{\"254\":1}}],[\"会有一定的性能损失\",{\"1\":{\"141\":1}}],[\"会有内存泄露问题\",{\"0\":{\"141\":1}}],[\"会对线程池做增强\",{\"1\":{\"141\":1,\"237\":1}}],[\"会从配置中心拉取到线程池配置\",{\"1\":{\"139\":1}}],[\"你需要调整下依赖包的顺序\",{\"1\":{\"140\":1}}],[\"你还在为\",{\"1\":{\"67\":1,\"83\":1}}],[\"报错\",{\"1\":{\"158\":1}}],[\"报错问题\",{\"1\":{\"151\":1}}],[\"报\",{\"1\":{\"158\":1}}],[\"报这个错误证明加载到了原生的\",{\"1\":{\"140\":1}}],[\"报警时间\",{\"1\":{\"225\":1}}],[\"报警渠道接入飞书\",{\"1\":{\"201\":1}}],[\"报警\",{\"1\":{\"103\":1}}],[\"报警信息推送办公平台\",{\"1\":{\"103\":1}}],[\"报警判断\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"报警平台id\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1}}],[\"报警间隔\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"225\":1,\"233\":1}}],[\"报警阈值\",{\"1\":{\"4\":2,\"11\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"225\":1,\"233\":1}}],[\"报警项类型\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"报警项\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"225\":1,\"233\":1}}],[\"报警检测\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"文档首页的特别赞助广告展示栏位\",{\"1\":{\"217\":1}}],[\"文档中已经说明了\",{\"1\":{\"139\":1}}],[\"文攀锋的贡献\",{\"1\":{\"184\":1}}],[\"文件值\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"文件名\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"文件配置\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"然后确保项目能正常拉取到配置中心的配置\",{\"1\":{\"142\":1}}],[\"然后生成\",{\"1\":{\"139\":1}}],[\"然后通过\",{\"1\":{\"138\":1}}],[\"然后就可以实时监控线程池数据指标变动了\",{\"1\":{\"122\":1}}],[\"然后就是配置\",{\"1\":{\"122\":1}}],[\"从\",{\"1\":{\"138\":1,\"240\":2,\"242\":1}}],[\"优先级\",{\"1\":{\"247\":1}}],[\"优先推荐依赖注入方式\",{\"1\":{\"240\":1}}],[\"优先建议升级\",{\"1\":{\"137\":1}}],[\"优化三方中间件参数刷新逻辑\",{\"1\":{\"199\":1}}],[\"优化项目日志输出\",{\"1\":{\"194\":1}}],[\"优化只有打开dynamictp开关才加载第三方adapter类\",{\"1\":{\"185\":1}}],[\"优化submit提交的任务执行异常时\",{\"1\":{\"185\":1}}],[\"优化获取本机ip地址的方式\",{\"1\":{\"185\":1}}],[\"优化在jdk8下\",{\"1\":{\"185\":1}}],[\"优化告警功能\",{\"1\":{\"181\":1}}],[\"优化当引入\",{\"1\":{\"181\":1}}],[\"优化\",{\"1\":{\"163\":1,\"168\":2,\"177\":1,\"189\":1}}],[\"优化线程池配置文件提示功能\",{\"1\":{\"152\":1}}],[\"优雅关闭线程池时\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"优雅关闭线程池\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"需保证同一\",{\"1\":{\"249\":1}}],[\"需在代码中手动创建线程池\",{\"1\":{\"157\":1}}],[\"需使用者自行测试\",{\"1\":{\"137\":1}}],[\"需要引入依赖\",{\"1\":{\"259\":2}}],[\"需要引入该依赖\",{\"1\":{\"254\":1}}],[\"需要对此进行监控\",{\"1\":{\"200\":1}}],[\"需要替换的执行器命名为\",{\"1\":{\"151\":1}}],[\"需要在类加载的时候加载到我们自己重写的类才可以\",{\"1\":{\"140\":1}}],[\"需要保证所有的测试用例都通过\",{\"1\":{\"135\":1}}],[\"需要关联至少一个\",{\"1\":{\"135\":1}}],[\"需要该\",{\"1\":{\"122\":1}}],[\"需要有高可用的配置管理推送服务\",{\"1\":{\"98\":1}}],[\"需要有套监控报警机制在事前\",{\"1\":{\"98\":1}}],[\"需要有套机制在运行过程中动态去调整参数\",{\"1\":{\"98\":1}}],[\"需要更改配置\",{\"1\":{\"6\":1}}],[\"常见问题\",{\"0\":{\"136\":1}}],[\"检查\",{\"1\":{\"135\":1}}],[\"检查等操作会消耗一定的时间\",{\"1\":{\"101\":1,\"144\":1}}],[\"须通过\",{\"1\":{\"135\":1}}],[\"时触发告警\",{\"1\":{\"223\":2}}],[\"时会导致服务启动失败\",{\"1\":{\"156\":1}}],[\"时通过引入核心模块即可\",{\"1\":{\"149\":1}}],[\"时\",{\"1\":{\"135\":2,\"166\":1,\"167\":1,\"176\":1}}],[\"时发出告警\",{\"1\":{\"118\":1}}],[\"到\",{\"1\":{\"135\":1,\"151\":1,\"175\":1,\"243\":1}}],[\"到这里监控就搭建起来了\",{\"1\":{\"122\":1}}],[\"个月时间\",{\"1\":{\"195\":1}}],[\"个\",{\"1\":{\"134\":1}}],[\"积极回答问题和进行宣传\",{\"1\":{\"134\":1}}],[\"理解核心代码逻辑\",{\"1\":{\"134\":1}}],[\"熟读源码\",{\"1\":{\"134\":1}}],[\"拉群\",{\"1\":{\"132\":1}}],[\"备注\",{\"1\":{\"132\":1,\"217\":1}}],[\"加入邮件相关配置\",{\"1\":{\"227\":1}}],[\"加入社区群\",{\"1\":{\"134\":1}}],[\"加我个人微信拉群\",{\"1\":{\"132\":1}}],[\"加群交流\",{\"0\":{\"131\":1}}],[\"人\",{\"1\":{\"132\":1}}],[\"群友一起交流讨论\",{\"1\":{\"132\":1}}],[\"跟满血\",{\"1\":{\"254\":1}}],[\"跟一些\",{\"1\":{\"141\":1,\"237\":1}}],[\"跟\",{\"1\":{\"132\":1}}],[\"赤耳小永\",{\"0\":{\"128\":1}}],[\"公众号\",{\"0\":{\"126\":1}}],[\"美团动态线程池实践思路\",{\"1\":{\"124\":1}}],[\"美团动态线程池实践思路开源项目\",{\"1\":{\"124\":1}}],[\"美团内部已经有该理论成熟的应用经验\",{\"1\":{\"103\":1}}],[\"我在哪儿\",{\"1\":{\"124\":1}}],[\"我是谁\",{\"1\":{\"124\":1}}],[\"我们引入了全局配置功能\",{\"1\":{\"247\":1}}],[\"我们接入的三方包很多\",{\"1\":{\"145\":1}}],[\"我们是依赖特定的版本做的\",{\"1\":{\"145\":1}}],[\"我们动态调整的只是这个变量的值\",{\"1\":{\"143\":1}}],[\"我们不能对此做增强\",{\"1\":{\"140\":1}}],[\"我们也是支持的\",{\"1\":{\"139\":1}}],[\"我们这里以常用的钉钉为例\",{\"1\":{\"118\":1}}],[\"我们举例对\",{\"1\":{\"118\":1}}],[\"我们可以在\",{\"1\":{\"117\":1}}],[\"我们改变了线程池以往的使用姿势\",{\"1\":{\"103\":1}}],[\"我们对线程池\",{\"1\":{\"103\":1}}],[\"我们对开源项目\",{\"1\":{\"70\":1}}],[\"掘金\",{\"0\":{\"124\":1,\"125\":1,\"127\":1,\"128\":1}}],[\"简单的指定地址的静态配置\",{\"1\":{\"122\":1}}],[\"看你所用的注册中心支不支持这种方式\",{\"1\":{\"122\":1}}],[\"数据可视化\",{\"1\":{\"122\":1}}],[\"数据采集\",{\"1\":{\"122\":2}}],[\"数据库\",{\"1\":{\"113\":1}}],[\"首先要了解阻塞队列的原理\",{\"1\":{\"143\":1}}],[\"首先确保按照接入指南正确的引入了依赖\",{\"1\":{\"142\":1}}],[\"首先线程池配置文件中开启\",{\"1\":{\"122\":1}}],[\"首页\",{\"0\":{\"0\":1}}],[\"网上教程很多\",{\"1\":{\"122\":1}}],[\"网络框架\",{\"1\":{\"92\":1}}],[\"事件\",{\"1\":{\"169\":1}}],[\"事先你得安装好\",{\"1\":{\"122\":1}}],[\"事中就能让开发人员感知到线程池的运行状况\",{\"1\":{\"98\":1}}],[\"纳入监控并告警通知\",{\"1\":{\"120\":1}}],[\"小结\",{\"0\":{\"120\":1}}],[\"严重告警\",{\"1\":{\"119\":1}}],[\"叮叮叮叮\",{\"0\":{\"119\":1}}],[\"完美世界\",{\"1\":{\"220\":1}}],[\"完善\",{\"1\":{\"163\":1,\"168\":1}}],[\"完毕\",{\"0\":{\"119\":1}}],[\"完成\",{\"1\":{\"134\":1}}],[\"完成啦\",{\"1\":{\"117\":1}}],[\"完成✅\",{\"1\":{\"117\":1}}],[\"将通知告警基础包从\",{\"1\":{\"164\":1}}],[\"将\",{\"1\":{\"140\":1,\"164\":1,\"193\":1}}],[\"将刚设置的接收人关联\",{\"1\":{\"118\":1}}],[\"将配置放到本地配置文件中\",{\"1\":{\"39\":1}}],[\"确定\",{\"1\":{\"118\":2}}],[\"选择钉钉机器人通知方式\",{\"1\":{\"118\":1}}],[\"选择配置的指标对象\",{\"1\":{\"118\":1}}],[\"获取\",{\"1\":{\"252\":1}}],[\"获取不到注解的情况\",{\"1\":{\"194\":1}}],[\"获取对应access\",{\"1\":{\"118\":1}}],[\"获取相应的值\",{\"1\":{\"98\":1}}],[\"企业微信\",{\"1\":{\"118\":1}}],[\"企微\",{\"1\":{\"94\":1}}],[\"消费端线程池管理\",{\"1\":{\"201\":1}}],[\"消费端是使用线程池进行处理消息的\",{\"1\":{\"200\":1}}],[\"消费积压而烦恼吗\",{\"1\":{\"83\":1}}],[\"消息通知方式支持\",{\"1\":{\"118\":1}}],[\"系统添加\",{\"0\":{\"118\":1}}],[\"系统里的阈值告警通知\",{\"1\":{\"117\":1}}],[\"让告警消息与接收人绑定\",{\"1\":{\"118\":1}}],[\"让告警消息知道要发给谁\",{\"1\":{\"118\":1}}],[\"让\",{\"1\":{\"117\":1}}],[\"负责人收到通知处理问题\",{\"1\":{\"117\":1}}],[\"负责自动刷新不生效\",{\"1\":{\"32\":1}}],[\"能及时的通知到我们对应的负责人\",{\"1\":{\"117\":1}}],[\"当核心线程数满了优先放入队列等待\",{\"1\":{\"249\":1}}],[\"当有使用\",{\"1\":{\"237\":1}}],[\"当前线程数\",{\"1\":{\"225\":1}}],[\"当前值\",{\"1\":{\"225\":1}}],[\"当前要设置核心线程数不能大于上次设置的最大线程数限制\",{\"1\":{\"197\":1}}],[\"当线程运行超时数量大于1时发出告警\",{\"1\":{\"118\":1}}],[\"当\",{\"1\":{\"117\":1,\"141\":1,\"237\":1}}],[\"当然只是看肯定是不完美的\",{\"1\":{\"117\":1}}],[\"随时查看监控详情指标信息来观测其服务状态\",{\"1\":{\"117\":1}}],[\"点击监控历史详情tab\",{\"1\":{\"117\":1}}],[\"点击监控列表项的操作\",{\"1\":{\"117\":1}}],[\"点击新增\",{\"1\":{\"117\":1}}],[\"现在坐等告警消息过来啦\",{\"0\":{\"119\":1}}],[\"现在我们已经添加好对\",{\"1\":{\"117\":1}}],[\"现在大多数的互联网项目都会采用微服务化部署\",{\"1\":{\"98\":1}}],[\"服务集群每个节点都会产生通知告警信息进行推送\",{\"1\":{\"233\":1}}],[\"服务名称\",{\"1\":{\"225\":2}}],[\"服务端提供端线程池管理\",{\"1\":{\"201\":1}}],[\"服务端线程池管理\",{\"1\":{\"191\":1}}],[\"服务ip\",{\"1\":{\"117\":1}}],[\"服务启动后会开启一个定时监控任务\",{\"1\":{\"223\":2}}],[\"服务启动报错\",{\"0\":{\"140\":1}}],[\"服务启动时也会判断配置中心配置和相应组件线程池参数是否一致\",{\"1\":{\"229\":1}}],[\"服务启动时\",{\"1\":{\"139\":1}}],[\"服务启动时会从配置中心拉取配置生成线程池对象放到\",{\"1\":{\"103\":1}}],[\"服务启动时从配置中心拉取配置\",{\"1\":{\"94\":1}}],[\"服务启动获取第三方中间件的线程池\",{\"1\":{\"94\":1}}],[\"服务启动会自动创建线程池实例\",{\"1\":{\"210\":1}}],[\"服务启动会自动从\",{\"1\":{\"80\":1}}],[\"服务启动会根据此配置拉取配置\",{\"1\":{\"6\":1}}],[\"服务启动并不会立即初始化\",{\"1\":{\"72\":1}}],[\"服务启动看到有如下日志输出说明接入成功\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"253\":1}}],[\"新增通知告警集群限流插件\",{\"1\":{\"196\":1}}],[\"新增通知策略\",{\"1\":{\"118\":1}}],[\"新增内存安全队列\",{\"1\":{\"196\":1}}],[\"新增id字段\",{\"1\":{\"183\":1}}],[\"新增初始化器\",{\"1\":{\"166\":1}}],[\"新增规则引擎框架\",{\"1\":{\"157\":1}}],[\"新增全局配置功能\",{\"1\":{\"157\":1}}],[\"新增\",{\"1\":{\"157\":2,\"161\":1,\"166\":1,\"187\":2,\"196\":2,\"247\":1}}],[\"新增接收人\",{\"1\":{\"118\":2}}],[\"新增消息通知接收人\",{\"1\":{\"118\":1}}],[\"新增阈值\",{\"1\":{\"118\":1}}],[\"新增dynamictp监控\",{\"1\":{\"117\":1}}],[\"新建\",{\"1\":{\"7\":1}}],[\"菜单\",{\"1\":{\"117\":1,\"118\":2}}],[\"路径\",{\"1\":{\"117\":1,\"118\":2}}],[\"二\",{\"0\":{\"117\":1}}],[\"开发的\",{\"1\":{\"137\":1}}],[\"开发手册\",{\"1\":{\"135\":1}}],[\"开发中\",{\"1\":{\"98\":1}}],[\"开源不易\",{\"1\":{\"216\":1}}],[\"开源动态线程池dynamic\",{\"1\":{\"125\":1}}],[\"开源了\",{\"1\":{\"124\":1}}],[\"开启一个处理执行超时的\",{\"1\":{\"223\":1}}],[\"开启一个处理排队超时的\",{\"1\":{\"223\":1}}],[\"开启\",{\"1\":{\"116\":1,\"122\":1}}],[\"它将提供\",{\"0\":{\"116\":1}}],[\"环境说明\",{\"0\":{\"242\":1}}],[\"环境下使用\",{\"1\":{\"196\":1}}],[\"环境变量中设置\",{\"1\":{\"141\":1}}],[\"环境\",{\"0\":{\"115\":1},\"1\":{\"225\":2}}],[\"环境和\",{\"0\":{\"115\":1}}],[\"您将获得\",{\"1\":{\"217\":4}}],[\"您已拥有\",{\"0\":{\"115\":1}}],[\"您相信只需配置yml就能立刻适配一个k8s或docker等新的监控类型吗\",{\"1\":{\"113\":1}}],[\"操作前提\",{\"0\":{\"115\":1}}],[\"操作系统\",{\"1\":{\"113\":1}}],[\"希望能帮助开发者和中小团队快速搭建自有监控系统\",{\"1\":{\"113\":1}}],[\"易工品\",{\"1\":{\"220\":1}}],[\"易扩展\",{\"1\":{\"113\":1}}],[\"易用友好的实时监控系统\",{\"1\":{\"113\":1}}],[\"其他类都继承自该类\",{\"1\":{\"249\":1}}],[\"其他线程池增强\",{\"1\":{\"237\":1}}],[\"其他配置可能都是相同的\",{\"1\":{\"157\":1,\"247\":1}}],[\"其他非\",{\"1\":{\"149\":1,\"242\":1}}],[\"其他参数如采集间隔\",{\"1\":{\"117\":1}}],[\"其实也很简单\",{\"1\":{\"122\":1}}],[\"其将http\",{\"1\":{\"113\":1}}],[\"其中至少有两个新\",{\"1\":{\"134\":1}}],[\"其中\",{\"1\":{\"94\":1}}],[\"云原生等监控\",{\"1\":{\"113\":1}}],[\"云之家通知\",{\"0\":{\"235\":1},\"1\":{\"235\":1}}],[\"云之家渠道\",{\"0\":{\"234\":1}}],[\"云之家报警\",{\"1\":{\"103\":1}}],[\"云之家\",{\"1\":{\"94\":1}}],[\"拥有强大自定义监控能力\",{\"1\":{\"113\":1}}],[\"是\",{\"1\":{\"259\":2}}],[\"是不是感觉超级简单呀\",{\"1\":{\"252\":1}}],[\"是不是很烦恼呢\",{\"1\":{\"200\":1}}],[\"是该框架的核心顶层设计类\",{\"1\":{\"249\":1}}],[\"是经过动态代理包装过的\",{\"1\":{\"223\":1}}],[\"是向前兼容的\",{\"1\":{\"200\":1}}],[\"是一个大版本\",{\"1\":{\"149\":1}}],[\"是一款开源\",{\"1\":{\"113\":1}}],[\"是被定义为\",{\"1\":{\"140\":1}}],[\"是基于\",{\"1\":{\"137\":1}}],[\"是否有响应json数据如下\",{\"1\":{\"116\":1}}],[\"是否开启报警\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"是否开启监控指标采集\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"是否预热所有核心线程\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"是否允许核心线程池超时\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"是否启用\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"介绍文章\",{\"0\":{\"123\":1}}],[\"介绍\",{\"0\":{\"113\":1}}],[\"和\",{\"1\":{\"111\":1,\"223\":1,\"225\":2}}],[\"抽象类\",{\"1\":{\"111\":1,\"225\":2}}],[\"地址中的\",{\"1\":{\"235\":1}}],[\"地址\",{\"1\":{\"107\":1}}],[\"说明已经开始正常采集指标配置\",{\"1\":{\"106\":1,\"122\":1}}],[\"管理台看到如下图所示\",{\"1\":{\"106\":1,\"122\":1}}],[\"来修复\",{\"1\":{\"145\":1}}],[\"来做\",{\"1\":{\"141\":1}}],[\"来监视线程池的性能指标\",{\"1\":{\"105\":1}}],[\"来模拟不同\",{\"1\":{\"101\":1}}],[\"属性配置监控指标采集类型\",{\"1\":{\"105\":1}}],[\"线上不要用\",{\"1\":{\"122\":1}}],[\"线上大规模应用\",{\"1\":{\"103\":1}}],[\"线程存活时间\",{\"1\":{\"225\":1}}],[\"线程\",{\"1\":{\"180\":1}}],[\"线程名前缀\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"线程池想要被框架管理\",{\"1\":{\"254\":1}}],[\"线程池或者\",{\"1\":{\"254\":1}}],[\"线程池都是采用这种模式\",{\"1\":{\"249\":1}}],[\"线程池模式\",{\"0\":{\"248\":1,\"249\":1},\"1\":{\"249\":1}}],[\"线程池实例\",{\"1\":{\"239\":8}}],[\"线程池定义\",{\"0\":{\"239\":1}}],[\"线程池用到的\",{\"1\":{\"223\":1}}],[\"线程池线程数达到配置的最大线程数\",{\"1\":{\"223\":1}}],[\"线程池活跃度告警\",{\"1\":{\"223\":2}}],[\"线程池活性达到设置的告警阈值\",{\"1\":{\"94\":1}}],[\"线程池活性\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"线程池交由spring管理其生命周期\",{\"1\":{\"212\":1}}],[\"线程池完全配置在配置中心\",{\"1\":{\"210\":1}}],[\"线程池耗尽\",{\"1\":{\"200\":1}}],[\"线程池耗尽的情况\",{\"1\":{\"200\":1}}],[\"线程池耗尽而烦恼吗\",{\"1\":{\"67\":1}}],[\"线程池的测试例子\",{\"1\":{\"199\":1}}],[\"线程池的动态调参能力\",{\"1\":{\"183\":1}}],[\"线程池获取失败\",{\"1\":{\"197\":1}}],[\"线程池初始化失败问题修复\",{\"1\":{\"188\":1}}],[\"线程池内部注册器模块优化\",{\"1\":{\"181\":1}}],[\"线程池代理后一直触发任务超时告警的问题\",{\"1\":{\"172\":1}}],[\"线程池报错的问题\",{\"1\":{\"167\":1}}],[\"线程池插件\",{\"1\":{\"237\":1}}],[\"线程池插件一起使用有内存泄露问题\",{\"1\":{\"166\":1}}],[\"线程池插件会对提交的任务做增强\",{\"1\":{\"141\":1,\"237\":1}}],[\"线程池支持更多参数动态调整\",{\"1\":{\"159\":1}}],[\"线程池支持任务包装器\",{\"1\":{\"159\":1}}],[\"线程池任务装饰器丢失问题\",{\"1\":{\"158\":1}}],[\"线程池任务包装更强大\",{\"1\":{\"103\":1}}],[\"线程池适配模块\",{\"1\":{\"157\":1,\"158\":1}}],[\"线程池可置为\",{\"1\":{\"157\":1}}],[\"线程池增强功能都由\",{\"1\":{\"141\":1}}],[\"线程池后\",{\"0\":{\"140\":1}}],[\"线程池能被管理吗\",{\"0\":{\"139\":1}}],[\"线程池和\",{\"0\":{\"139\":1}}],[\"线程池源码解析及通知告警篇\",{\"1\":{\"124\":1}}],[\"线程池监控指标\",{\"1\":{\"181\":1}}],[\"线程池监控\",{\"0\":{\"117\":1},\"1\":{\"194\":1}}],[\"线程池指标数据会以\",{\"1\":{\"105\":2}}],[\"线程池吞吐量的对比\",{\"1\":{\"101\":1}}],[\"线程池运行过程中的各项指标一般感知不到\",{\"1\":{\"98\":1}}],[\"线程池已经是一个\",{\"1\":{\"98\":1}}],[\"线程池相对开发人员来说是个黑盒\",{\"1\":{\"98\":1}}],[\"线程池主要参数变更通知\",{\"1\":{\"94\":1}}],[\"线程池并没用\",{\"1\":{\"90\":1}}],[\"线程池只在异步请求时生效\",{\"1\":{\"80\":1}}],[\"线程池构建者的\",{\"1\":{\"76\":1}}],[\"线程池在第一次访问时才进行初始化\",{\"1\":{\"72\":1}}],[\"线程池享有动态调参\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"线程池\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":2,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":3,\"92\":1,\"124\":1,\"139\":1,\"159\":1,\"172\":1,\"187\":1,\"249\":1}}],[\"线程池管理功能\",{\"1\":{\"200\":1}}],[\"线程池管理支持\",{\"1\":{\"179\":1,\"187\":1,\"196\":1}}],[\"线程池管理模块\",{\"1\":{\"94\":2}}],[\"线程池管理\",{\"0\":{\"65\":1,\"67\":1,\"69\":1,\"71\":1,\"73\":1,\"75\":1,\"77\":1,\"79\":1,\"81\":1,\"83\":1,\"85\":1,\"87\":1,\"89\":1,\"91\":1},\"1\":{\"187\":3,\"196\":2,\"201\":2}}],[\"线程池类型\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"线程池别名\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"90\":1}}],[\"线程池名称在项目启动日志里寻找\",{\"1\":{\"72\":1,\"82\":1,\"86\":1,\"88\":1}}],[\"线程池名称规则\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1}}],[\"线程池名称\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"74\":1,\"90\":1,\"92\":1,\"225\":2,\"250\":1}}],[\"线程池配置添加\",{\"1\":{\"187\":1}}],[\"线程池配置增加\",{\"1\":{\"161\":1}}],[\"线程池配置新增\",{\"1\":{\"157\":1,\"161\":1}}],[\"线程池配置\",{\"1\":{\"4\":2,\"5\":1,\"11\":2,\"12\":1,\"18\":1,\"24\":2,\"25\":1,\"30\":2,\"31\":1,\"36\":2,\"37\":1,\"42\":2,\"43\":1,\"49\":2,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"247\":1}}],[\"线程池配置文件加如下配置项\",{\"1\":{\"259\":1}}],[\"线程池配置文件格式和上述其他配置中心一致\",{\"1\":{\"14\":1}}],[\"线程池配置文件\",{\"0\":{\"3\":1,\"10\":1,\"17\":1,\"23\":1,\"29\":1,\"35\":1,\"41\":1,\"47\":1,\"54\":1,\"60\":1}}],[\"生命周期管理\",{\"1\":{\"103\":1}}],[\"生成线程池实例注册到内部线程池注册中心以及\",{\"1\":{\"94\":1}}],[\"依靠\",{\"1\":{\"103\":1}}],[\"依赖注入方式使用\",{\"1\":{\"240\":1}}],[\"依赖注入\",{\"1\":{\"239\":1}}],[\"依赖优化\",{\"1\":{\"181\":1}}],[\"依赖之前就可以了\",{\"1\":{\"140\":1}}],[\"依赖放在\",{\"1\":{\"140\":1}}],[\"依赖采集到相应的存储平台里\",{\"1\":{\"105\":1}}],[\"依赖\",{\"0\":{\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1},\"1\":{\"122\":1,\"141\":1,\"252\":1}}],[\"注册器获取\",{\"1\":{\"240\":1}}],[\"注册到\",{\"1\":{\"157\":1}}],[\"注\",{\"1\":{\"218\":1}}],[\"注解定义spring线程池\",{\"1\":{\"239\":1}}],[\"注解定义普通juc线程池\",{\"1\":{\"239\":1}}],[\"注解名称优先级高于方法名\",{\"1\":{\"239\":2}}],[\"注解\",{\"1\":{\"139\":1,\"252\":1,\"254\":1}}],[\"注解对\",{\"1\":{\"138\":1}}],[\"注解即可\",{\"1\":{\"103\":1}}],[\"注意事项需查看\",{\"1\":{\"252\":1}}],[\"注意事项\",{\"0\":{\"237\":1,\"254\":1}}],[\"注意非\",{\"1\":{\"33\":1}}],[\"注意\",{\"1\":{\"6\":2,\"27\":1,\"200\":1,\"254\":1}}],[\"定义线程池时加\",{\"1\":{\"139\":1}}],[\"定义\",{\"1\":{\"111\":1,\"225\":2}}],[\"定义时加\",{\"1\":{\"103\":1,\"254\":1}}],[\"定时采集线程池指标数据\",{\"1\":{\"103\":2}}],[\"定时将指标注册到\",{\"1\":{\"94\":1}}],[\"定时以\",{\"1\":{\"94\":1}}],[\"比如优先级高的任务先执行\",{\"1\":{\"249\":1}}],[\"比如消费消息队列消息\",{\"1\":{\"249\":1}}],[\"比如\",{\"1\":{\"141\":1,\"142\":1,\"223\":2,\"237\":1,\"249\":1,\"254\":1}}],[\"比如基于\",{\"1\":{\"95\":1}}],[\"比\",{\"1\":{\"103\":1}}],[\"等时\",{\"1\":{\"237\":1}}],[\"等待执行任务数\",{\"1\":{\"225\":1}}],[\"等平台\",{\"1\":{\"177\":1}}],[\"等等\",{\"1\":{\"175\":1}}],[\"等监控指标\",{\"1\":{\"171\":1}}],[\"等依赖版本升级\",{\"1\":{\"168\":1}}],[\"等指标监控相关代码\",{\"1\":{\"168\":1}}],[\"等低版本\",{\"1\":{\"166\":1}}],[\"等都是支持的\",{\"1\":{\"122\":1}}],[\"等组件的线程池管理\",{\"1\":{\"103\":1}}],[\"等组件线程池\",{\"1\":{\"94\":1}}],[\"等\",{\"1\":{\"103\":1,\"254\":1}}],[\"多次修改参数间隔生效的问题\",{\"1\":{\"192\":1}}],[\"多类型支持\",{\"1\":{\"113\":1}}],[\"多模式\",{\"1\":{\"103\":1}}],[\"多配置中心支持\",{\"1\":{\"103\":1}}],[\"多种指标\",{\"1\":{\"103\":1}}],[\"多个用逗号隔开\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"运行环境\",{\"0\":{\"241\":1}}],[\"运行报警\",{\"0\":{\"222\":1}}],[\"运行超时等统计功能\",{\"1\":{\"157\":1}}],[\"运行超时线程数量thread\",{\"1\":{\"118\":1}}],[\"运行监控\",{\"1\":{\"103\":1}}],[\"运行情况不能及时感知到\",{\"1\":{\"98\":1}}],[\"钉钉\",{\"1\":{\"103\":1,\"118\":1,\"214\":1,\"227\":1}}],[\"钉钉账号手机号\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"相似\",{\"1\":{\"254\":1}}],[\"相关代码优化\",{\"1\":{\"210\":1,\"212\":1}}],[\"相关模块\",{\"1\":{\"168\":1}}],[\"相关属性字段自动提示功能\",{\"1\":{\"166\":1}}],[\"相关特性只在\",{\"1\":{\"175\":1}}],[\"相关特性以独立\",{\"1\":{\"149\":1}}],[\"相关特性支持在独立\",{\"1\":{\"138\":1}}],[\"相关特性支持在独立的\",{\"1\":{\"138\":1}}],[\"相关采集器依赖\",{\"1\":{\"94\":1}}],[\"相当丝滑\",{\"1\":{\"103\":1}}],[\"分支\",{\"1\":{\"135\":1}}],[\"分支进行开发\",{\"1\":{\"135\":1}}],[\"分钟搞定\",{\"1\":{\"103\":1}}],[\"分别对应\",{\"1\":{\"70\":1}}],[\"顺利\",{\"1\":{\"103\":1}}],[\"所有文档页面的广告栏位\",{\"1\":{\"217\":1}}],[\"所有人问题\",{\"1\":{\"176\":1}}],[\"所有人\",{\"1\":{\"158\":1}}],[\"所有配置均放在配置中心\",{\"1\":{\"103\":1}}],[\"所以说线程池的设置也会直接或者间接影响到消费速度\",{\"1\":{\"200\":1}}],[\"所以\",{\"1\":{\"156\":1}}],[\"所以我们自己重写了\",{\"1\":{\"140\":1}}],[\"所以如果使用传统\",{\"1\":{\"138\":1}}],[\"所属监控名称\",{\"1\":{\"119\":1}}],[\"所属监控id\",{\"1\":{\"119\":1}}],[\"所属线程池platformids\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"所需参数\",{\"1\":{\"117\":1}}],[\"✅\",{\"1\":{\"103\":1}}],[\"具体参数可以看代码注释\",{\"1\":{\"239\":4}}],[\"具体参考\",{\"1\":{\"233\":1}}],[\"具体看上述配置文件\",{\"1\":{\"233\":1,\"259\":1}}],[\"具体看官方说明\",{\"1\":{\"33\":1}}],[\"具体代码请看\",{\"1\":{\"223\":1}}],[\"具体查看官网\",{\"1\":{\"200\":1}}],[\"具体啥原因导致积压需要具体问题具体分析\",{\"1\":{\"200\":1}}],[\"具体请查看\",{\"1\":{\"141\":1}}],[\"具体如下图\",{\"1\":{\"118\":1}}],[\"具有以下特性\",{\"1\":{\"103\":1}}],[\"集成内部\",{\"1\":{\"177\":1}}],[\"集成步骤\",{\"0\":{\"122\":1}}],[\"集成接入文档\",{\"1\":{\"115\":1}}],[\"集成管理常用第三方组件的线程池\",{\"1\":{\"103\":1}}],[\"集成常用三方中间件内部线程池管理\",{\"1\":{\"103\":1}}],[\"集成失败\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"配合像\",{\"1\":{\"103\":1}}],[\"配置类中一些字段默认值调整\",{\"1\":{\"168\":1}}],[\"配置提示完整化\",{\"1\":{\"163\":1}}],[\"配置在\",{\"1\":{\"157\":1}}],[\"配置项\",{\"1\":{\"157\":1,\"247\":1}}],[\"配置告警通知策略\",{\"1\":{\"118\":1}}],[\"配置关联的告警通知策略⚠️\",{\"1\":{\"118\":1}}],[\"配置接收人参数如下\",{\"1\":{\"118\":1}}],[\"配置接收人\",{\"1\":{\"118\":1}}],[\"配置监控\",{\"1\":{\"117\":1}}],[\"配置后\",{\"1\":{\"106\":1,\"122\":1}}],[\"配置如下图\",{\"1\":{\"122\":1}}],[\"配置如下\",{\"1\":{\"100\":1}}],[\"配置中心配置线程池实例\",{\"1\":{\"252\":1}}],[\"配置中心支持nacos\",{\"1\":{\"214\":1}}],[\"配置中心支持zookeeper\",{\"1\":{\"212\":1}}],[\"配置中心支持consul\",{\"1\":{\"210\":1}}],[\"配置中心接入\",{\"1\":{\"196\":1}}],[\"配置中心\",{\"1\":{\"103\":1,\"214\":1}}],[\"配置中心是现在大多数互联网系统都会使用的组件\",{\"1\":{\"98\":1}}],[\"配置中心地址\",{\"1\":{\"26\":1}}],[\"配置变更会推送通知消息\",{\"1\":{\"229\":1}}],[\"配置变更通知\",{\"1\":{\"103\":1}}],[\"配置变更需要及时推送到客户端\",{\"1\":{\"98\":1}}],[\"配置变更监听模块\",{\"1\":{\"94\":2}}],[\"配置文件支持json格式\",{\"1\":{\"205\":1}}],[\"配置文件格式兼容\",{\"1\":{\"199\":1}}],[\"配置文件配置\",{\"1\":{\"166\":1}}],[\"配置文件\",{\"1\":{\"111\":1,\"225\":1,\"235\":1,\"252\":1}}],[\"配置文件解析\",{\"1\":{\"103\":1,\"214\":1}}],[\"配置文件的解析\",{\"1\":{\"94\":1}}],[\"配置文件中配置\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"配置引入\",{\"0\":{\"44\":1}}],[\"配置流程\",{\"0\":{\"7\":1}}],[\"配置\",{\"0\":{\"6\":1,\"13\":1,\"20\":1,\"26\":1,\"32\":1,\"38\":1,\"51\":1,\"57\":1,\"64\":1},\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"52\":1,\"64\":1,\"111\":1,\"122\":2,\"225\":1,\"256\":1}}],[\"目标\",{\"1\":{\"103\":1}}],[\"目前框架提供如下\",{\"1\":{\"249\":1}}],[\"目前框架提供了五种监控数据采集方式\",{\"1\":{\"105\":1}}],[\"目前\",{\"1\":{\"137\":1,\"217\":1}}],[\"目前最新版本\",{\"1\":{\"103\":1}}],[\"目前主要用于输出线程池监控指标数据到指定文件\",{\"1\":{\"95\":1}}],[\"目前已经实现的有\",{\"1\":{\"95\":1}}],[\"目前只能拿到服务启动时能获取到的线程池\",{\"1\":{\"76\":1}}],[\"目前只支持\",{\"1\":{\"51\":1}}],[\"主要功能是对\",{\"1\":{\"149\":1}}],[\"主要实现以下目标\",{\"1\":{\"103\":1}}],[\"主要是围绕第三方中间件线程池集成来改动的\",{\"1\":{\"200\":1}}],[\"主要是一些单元测试\",{\"1\":{\"95\":1}}],[\"主要是一些各个模板都会用到的类\",{\"1\":{\"95\":1}}],[\"主要是适配一些第三方组件的线程池管理\",{\"1\":{\"95\":1}}],[\"做框架\",{\"1\":{\"179\":1}}],[\"做各种框架线程池的适配器\",{\"1\":{\"179\":1}}],[\"做了解耦\",{\"1\":{\"149\":1}}],[\"做开源项目最难的就是做版本兼容了\",{\"1\":{\"145\":1}}],[\"做监控\",{\"1\":{\"122\":1}}],[\"做监控大盘\",{\"1\":{\"94\":2}}],[\"做一些扩展增强\",{\"1\":{\"103\":1}}],[\"基于此可以对框架做自定义开发扩展\",{\"1\":{\"175\":1}}],[\"基于\",{\"1\":{\"135\":1,\"233\":1}}],[\"基于开源的配置中心的轻量动态线程池dynamic\",{\"1\":{\"127\":1}}],[\"基于以上背景分析\",{\"1\":{\"103\":1}}],[\"基于上述项目提供的三种模式\",{\"1\":{\"70\":1}}],[\"吞吐量柱状图\",{\"1\":{\"101\":1}}],[\"吞吐量数据表\",{\"1\":{\"101\":1}}],[\"9\",{\"0\":{\"153\":1,\"156\":1,\"190\":1},\"1\":{\"141\":1,\"149\":1,\"151\":1,\"156\":1,\"157\":1,\"166\":1,\"237\":1}}],[\"99\",{\"1\":{\"101\":1}}],[\"96505\",{\"1\":{\"101\":1}}],[\"900\",{\"1\":{\"217\":1}}],[\"9098\",{\"1\":{\"122\":1}}],[\"90\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1,\"98\":1}}],[\"损失比\",{\"1\":{\"101\":1}}],[\"对应线程池\",{\"1\":{\"249\":5}}],[\"对应依赖\",{\"1\":{\"106\":1}}],[\"对\",{\"1\":{\"141\":1}}],[\"对开源感兴趣\",{\"1\":{\"134\":1}}],[\"对某个重要指标配置告警阈值\",{\"1\":{\"118\":1}}],[\"对业务代码零侵入\",{\"1\":{\"103\":1}}],[\"对大多数场景来说都适用\",{\"1\":{\"101\":1,\"144\":1}}],[\"对接办公平台\",{\"1\":{\"94\":1}}],[\"一些功能\",{\"1\":{\"237\":1}}],[\"一个报警窗口内\",{\"1\":{\"233\":1}}],[\"一\",{\"0\":{\"116\":1}}],[\"一系列的增强\",{\"1\":{\"101\":1,\"144\":1}}],[\"一定程度上能减少你的烦恼\",{\"1\":{\"67\":1,\"83\":1}}],[\"而不是\",{\"1\":{\"151\":1}}],[\"而单机\",{\"1\":{\"101\":1,\"144\":1}}],[\"而\",{\"1\":{\"101\":1,\"144\":1}}],[\"而且也能减少研发动态线程池组件本身的难度和接入的工作量\",{\"1\":{\"98\":1}}],[\"而且配置中心相对都是高可用的\",{\"1\":{\"98\":1}}],[\"带来的性能损耗会比较大\",{\"1\":{\"101\":1,\"144\":1}}],[\"密集型场景\",{\"1\":{\"249\":2}}],[\"密集型场景使用的线程池\",{\"1\":{\"103\":1}}],[\"密集型操作\",{\"1\":{\"101\":1}}],[\"密集型的\",{\"1\":{\"98\":2}}],[\"与\",{\"1\":{\"101\":1}}],[\"与之结合可以极大提高系统可用性\",{\"1\":{\"98\":1}}],[\"性能怎么样\",{\"0\":{\"144\":1}}],[\"性能对比\",{\"0\":{\"101\":1}}],[\"性能测试\",{\"0\":{\"99\":1}}],[\"参与社区的建设\",{\"1\":{\"134\":1}}],[\"参与开发\",{\"0\":{\"133\":1}}],[\"参照此帮助文档\",{\"1\":{\"118\":1}}],[\"参数为\",{\"1\":{\"167\":1}}],[\"参数\",{\"1\":{\"100\":1}}],[\"参考\",{\"1\":{\"254\":1}}],[\"参考tomcat线程池设计\",{\"1\":{\"239\":1}}],[\"参考阿里巴巴\",{\"1\":{\"135\":1}}],[\"参考美团线程池实践\",{\"1\":{\"103\":1}}],[\"参考这篇文章\",{\"1\":{\"6\":1}}],[\"参考spring线程池设计\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"虚拟机\",{\"1\":{\"100\":1}}],[\"微信群都已满\",{\"1\":{\"132\":1}}],[\"微基准测试工具\",{\"1\":{\"100\":1}}],[\"微服务组件中的分布式配置中心\",{\"1\":{\"98\":1}}],[\"此功能实现使用了责任链设计模式\",{\"1\":{\"233\":1}}],[\"此时会报类型转换异常\",{\"1\":{\"157\":1}}],[\"此时您的配置文件里应该将\",{\"1\":{\"7\":1}}],[\"此次基准测试使用\",{\"1\":{\"100\":1}}],[\"测试过程中没发现\",{\"1\":{\"156\":1}}],[\"测试\",{\"1\":{\"144\":1}}],[\"测试使用\",{\"1\":{\"122\":1}}],[\"测试使用可以直接用\",{\"1\":{\"122\":1}}],[\"测试逻辑见\",{\"1\":{\"101\":1}}],[\"测试单线程模式下使用\",{\"1\":{\"101\":1}}],[\"测试环境配置\",{\"0\":{\"100\":1}}],[\"测试线程池\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"68\":1}}],[\"及其子类可以修改\",{\"1\":{\"254\":1}}],[\"及上次告警时间为当前时间\",{\"1\":{\"223\":3}}],[\"及包名改为\",{\"1\":{\"178\":1}}],[\"及之前版本为了防止内存泄露会关闭这些功能\",{\"1\":{\"157\":1}}],[\"及之前版本核心模块强依赖\",{\"1\":{\"149\":1}}],[\"及时通知给我们\",{\"1\":{\"117\":1}}],[\"及时处理\",{\"1\":{\"98\":1}}],[\"及以上的版本\",{\"1\":{\"243\":1}}],[\"及以上版本用此依赖\",{\"1\":{\"244\":1}}],[\"及以上版本均能良好支持\",{\"1\":{\"137\":1}}],[\"及以上版本\",{\"1\":{\"33\":1}}],[\"及以上版本对应\",{\"1\":{\"33\":1}}],[\"及以下版本用此依赖\",{\"1\":{\"244\":1}}],[\"及以下版本\",{\"1\":{\"33\":1}}],[\"及以下版本对应\",{\"1\":{\"33\":1}}],[\"也能正常使用\",{\"1\":{\"138\":1}}],[\"也就是自动到注册中心发现服务\",{\"1\":{\"122\":1}}],[\"也可能会有类似问题\",{\"1\":{\"237\":1}}],[\"也可以自定义限流器\",{\"1\":{\"233\":1}}],[\"也可以用其他\",{\"1\":{\"106\":1}}],[\"也可以被框架管理\",{\"1\":{\"103\":1}}],[\"也可以通过\",{\"1\":{\"103\":1}}],[\"也可通过内部提供的\",{\"1\":{\"94\":1}}],[\"也有\",{\"1\":{\"98\":1}}],[\"既有\",{\"1\":{\"98\":1}}],[\"项目使用可以引入\",{\"1\":{\"242\":1}}],[\"项目的接入集成\",{\"1\":{\"149\":1}}],[\"项目成员\",{\"0\":{\"146\":1,\"147\":1}}],[\"项目\",{\"1\":{\"138\":1,\"175\":1}}],[\"项目能使用吗\",{\"0\":{\"138\":1}}],[\"项目中可能会定义多个线程池\",{\"1\":{\"157\":1,\"247\":1}}],[\"项目中可能存在很多线程池\",{\"1\":{\"98\":1}}],[\"项目中使用\",{\"1\":{\"150\":1}}],[\"项目中引入\",{\"1\":{\"122\":1}}],[\"项目背景\",{\"0\":{\"97\":1}}],[\"想要提高系统性能\",{\"1\":{\"98\":1}}],[\"在线程池没达到设置的最大值之前优先创建新线程执行任务而不是放入队列等待\",{\"1\":{\"249\":1}}],[\"在线程池生命周期中先后拿到的不是同一个对象\",{\"1\":{\"237\":1}}],[\"在集群机器数量很多的情况下同时可能会产生大量的通知告警信息\",{\"1\":{\"233\":1}}],[\"在执行具体的拒绝策略之前会执行\",{\"1\":{\"223\":1}}],[\"在多\",{\"1\":{\"158\":1}}],[\"在低版本时\",{\"1\":{\"158\":1}}],[\"在没有配置\",{\"1\":{\"156\":1}}],[\"在处理有内部属性引用自身这类任务时的栈溢出问题\",{\"1\":{\"154\":1}}],[\"在单机\",{\"1\":{\"144\":1}}],[\"在任务执行的不同阶段\",{\"1\":{\"141\":1}}],[\"在操作与使用方面更加的便捷\",{\"1\":{\"120\":1}}],[\"在钉钉端配置机器人\",{\"1\":{\"118\":1}}],[\"在监控页面填写\",{\"1\":{\"117\":1}}],[\"在\",{\"0\":{\"114\":1,\"116\":1,\"117\":1,\"118\":1},\"1\":{\"98\":1,\"101\":1,\"103\":1,\"118\":1,\"142\":1,\"144\":1,\"217\":1,\"259\":1}}],[\"综上\",{\"1\":{\"98\":1}}],[\"答案是肯定的\",{\"1\":{\"98\":1}}],[\"扮演的就是动态修改配置\",{\"1\":{\"98\":1}}],[\"这块可以去了解下他的\",{\"1\":{\"122\":1}}],[\"这块要讲的是集成\",{\"1\":{\"122\":1}}],[\"这个版本框架源码调整还是比较大的\",{\"1\":{\"200\":1}}],[\"这个版本新增了好些功能\",{\"1\":{\"195\":1}}],[\"这个版本就废掉了\",{\"1\":{\"156\":1}}],[\"这个希望大家能理解\",{\"1\":{\"145\":1}}],[\"这个就不展开讲了\",{\"1\":{\"122\":1}}],[\"这个指标进行阈值设置\",{\"1\":{\"118\":1}}],[\"这篇实践文章带我们体验了如何使用\",{\"1\":{\"120\":1}}],[\"这样不利于其他非\",{\"1\":{\"149\":1}}],[\"这样会损失掉一些增强功能\",{\"1\":{\"141\":1}}],[\"这样就能决定哪些告警发给哪个人\",{\"1\":{\"118\":1}}],[\"这样才是一个完整的监控告警流程\",{\"1\":{\"117\":1}}],[\"这里要问了\",{\"1\":{\"156\":1}}],[\"这里要加上动态线程池配置文件\",{\"1\":{\"6\":1}}],[\"这里使用\",{\"1\":{\"122\":1}}],[\"这里我们就配置当此指标thread\",{\"1\":{\"118\":1}}],[\"这种可视化监控平台做大盘监控\",{\"1\":{\"103\":1}}],[\"这种情况业务逻辑本身的耗时非常小\",{\"1\":{\"101\":1,\"144\":1}}],[\"这些方法有\",{\"1\":{\"98\":1}}],[\"大版本有\",{\"1\":{\"137\":1}}],[\"大概可以知道它对核心参数基本都有提供\",{\"1\":{\"98\":1}}],[\"大家日常开发中可能也经常会这样组织代码\",{\"1\":{\"95\":1}}],[\"动态调整队列大小\",{\"0\":{\"143\":1}}],[\"动态调整tomcat\",{\"1\":{\"124\":1}}],[\"动态调参等功能尽可能降低\",{\"1\":{\"200\":1}}],[\"动态调参\",{\"1\":{\"103\":1}}],[\"动态线程池实例服务启动时会根据配置中心的配置动态注册到\",{\"1\":{\"254\":1}}],[\"动态线程池dynamictp源码解读系列四之adapter模块\",{\"1\":{\"129\":1}}],[\"动态线程池dynamictp源码解读系列三之监控告警\",{\"1\":{\"129\":1}}],[\"动态线程池dynamictp源码解读系列二之starter模块\",{\"1\":{\"129\":1}}],[\"动态线程池dynamictp源码系列一之相关类简介\",{\"1\":{\"129\":1}}],[\"动态线程池dynamictp系列一之使用\",{\"1\":{\"126\":1}}],[\"动态线程池dynamictp系列二之源码分析\",{\"1\":{\"126\":1}}],[\"动态线程池dynamictp系列三之源码分析\",{\"1\":{\"126\":1}}],[\"动态线程池dynamictp系列四之监控告警\",{\"1\":{\"126\":1}}],[\"动态线程池dynamictp系列五之源码分析\",{\"1\":{\"126\":1}}],[\"动态线程池dynamic\",{\"1\":{\"125\":2}}],[\"动态线程池\",{\"1\":{\"124\":1}}],[\"动态线程池框架\",{\"1\":{\"124\":1}}],[\"动态线程池配置\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"233\":1,\"250\":1,\"259\":1}}],[\"动态线程池配置文件放置在配置中心\",{\"1\":{\"7\":1}}],[\"动态线程池配置文件\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"动态可监控线程池框架\",{\"1\":{\"98\":1}}],[\"直接配置在配置中心就行\",{\"1\":{\"254\":1}}],[\"直接import即可使用\",{\"1\":{\"214\":1}}],[\"直接到\",{\"1\":{\"156\":1}}],[\"直接参考就行\",{\"1\":{\"14\":1}}],[\"直到出现问题\",{\"1\":{\"98\":1}}],[\"改代码重新发布服务\",{\"1\":{\"98\":1}}],[\"上次报警时间\",{\"1\":{\"225\":1}}],[\"上海惟秀科技有限公司\",{\"1\":{\"220\":1}}],[\"上海营联信息技术有限公司\",{\"1\":{\"220\":1}}],[\"上下文传递\",{\"1\":{\"196\":1,\"258\":3}}],[\"上下文传递扩展等\",{\"1\":{\"95\":1}}],[\"上个版本是\",{\"1\":{\"156\":1}}],[\"上线后发现需要调整\",{\"1\":{\"98\":1}}],[\"凭经验设置参数值\",{\"1\":{\"98\":1}}],[\"但是如果想后期再添加到配置中心\",{\"1\":{\"239\":1}}],[\"但是不知道那几个核心参数设置多少比较合适\",{\"1\":{\"98\":1}}],[\"但线程池的核心参数并不好确定\",{\"1\":{\"98\":1}}],[\"但有监控告警功能\",{\"1\":{\"39\":1}}],[\"痛点\",{\"1\":{\"98\":1}}],[\"过程中你是否有以下痛点呢\",{\"1\":{\"98\":1}}],[\"技术架构\",{\"1\":{\"96\":1}}],[\"架构图\",{\"0\":{\"96\":1}}],[\"架构设计\",{\"0\":{\"93\":1}}],[\"放一些扩展功能实现\",{\"1\":{\"95\":1}}],[\"包中\",{\"1\":{\"259\":1}}],[\"包迁移到\",{\"1\":{\"193\":1}}],[\"包\",{\"1\":{\"181\":1,\"223\":1}}],[\"包装后\",{\"1\":{\"158\":1}}],[\"包括\",{\"1\":{\"103\":1,\"217\":1}}],[\"包括动态调整参数\",{\"1\":{\"95\":1}}],[\"包含grafana配置面板json文件\",{\"1\":{\"214\":1}}],[\"包含线程池维度\",{\"1\":{\"103\":1}}],[\"包含\",{\"1\":{\"94\":3}}],[\"复用代码\",{\"1\":{\"95\":1}}],[\"解决配置类型为\",{\"1\":{\"192\":1}}],[\"解决实际推送的告警信息看着不准的问题\",{\"1\":{\"181\":1}}],[\"解决在有其他\",{\"1\":{\"157\":1}}],[\"解耦依赖\",{\"1\":{\"95\":1}}],[\"解析配置文件内容\",{\"1\":{\"94\":1}}],[\"后导致\",{\"1\":{\"158\":1}}],[\"后续也将会完善提高\",{\"1\":{\"156\":1}}],[\"后续入队\",{\"1\":{\"143\":1}}],[\"后续会接入其他常用组件的线程池管理\",{\"1\":{\"95\":1}}],[\"后将\",{\"1\":{\"7\":1}}],[\"图片\",{\"1\":{\"95\":1,\"111\":1,\"225\":1,\"259\":1}}],[\"以下\",{\"1\":{\"194\":1}}],[\"以下版本动态线程池不生效的问题\",{\"1\":{\"162\":1}}],[\"以下是具体发版详情\",{\"1\":{\"156\":1}}],[\"以下的时候\",{\"1\":{\"101\":1,\"144\":1}}],[\"以面试官视角万字解读线程池10大经典面试题\",{\"1\":{\"124\":1}}],[\"以上开发人员都会选择使用的基础工具\",{\"1\":{\"98\":1}}],[\"以上情况都是使用姿势有误\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"以及动态调参\",{\"1\":{\"200\":1}}],[\"以及一些扩展方法\",{\"1\":{\"98\":1}}],[\"以及串联整个项目流程都在此处\",{\"1\":{\"95\":1}}],[\"以多\",{\"1\":{\"95\":1}}],[\"代码引用\",{\"0\":{\"240\":1}}],[\"代码使用\",{\"0\":{\"238\":1}}],[\"代码风格要求\",{\"1\":{\"135\":1}}],[\"代码零侵入\",{\"1\":{\"103\":1}}],[\"代码中用到了不少\",{\"1\":{\"149\":1}}],[\"代码中创建了一个\",{\"1\":{\"98\":1}}],[\"代码中通过依赖注入\",{\"1\":{\"94\":1}}],[\"代码结构\",{\"0\":{\"95\":1},\"1\":{\"95\":1}}],[\"进行\",{\"1\":{\"100\":1,\"157\":1}}],[\"进行相应的处理\",{\"1\":{\"94\":1}}],[\"进行了适配\",{\"1\":{\"70\":1}}],[\"三大版本之间差别较大\",{\"1\":{\"137\":1}}],[\"三个版本\",{\"1\":{\"137\":1}}],[\"三个名称\",{\"1\":{\"70\":1}}],[\"三次即触发\",{\"1\":{\"118\":1}}],[\"三\",{\"0\":{\"118\":1}}],[\"三种方式定时获取\",{\"1\":{\"103\":1}}],[\"三方组件的包需要自己引入\",{\"1\":{\"200\":1}}],[\"三方组件线程池管理模块\",{\"1\":{\"94\":1}}],[\"三方中间件线程池管理支持通知告警功能\",{\"1\":{\"196\":1}}],[\"三方中间件线程池通知告警支持别名配置\",{\"1\":{\"196\":1}}],[\"三方中间件线程池支持运行过程异常打印\",{\"1\":{\"159\":1}}],[\"三方中间件线程池增强实现时\",{\"1\":{\"145\":1}}],[\"三方中间件线程池增强失败\",{\"0\":{\"145\":1}}],[\"三方包管理模块\",{\"1\":{\"94\":1}}],[\"三项是实时触发\",{\"1\":{\"94\":1}}],[\"该类型功能和\",{\"1\":{\"254\":1}}],[\"该框架的核心代码都在这个模块里\",{\"1\":{\"95\":1}}],[\"该报警项累计值\",{\"1\":{\"94\":3}}],[\"该报警项前后两次报警区间累加值\",{\"1\":{\"94\":3}}],[\"该项目也是\",{\"1\":{\"70\":1}}],[\"两项是依赖监控模块的定时任务触发\",{\"1\":{\"94\":1}}],[\"两项指标\",{\"1\":{\"94\":3}}],[\"两种配置\",{\"1\":{\"58\":1}}],[\"触发配置阈值实时推送告警信息\",{\"1\":{\"103\":1}}],[\"触发设置的报警策略时报警\",{\"1\":{\"103\":1}}],[\"触发拒绝策略告警\",{\"1\":{\"94\":1}}],[\"触发任务拒绝告警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"阻塞队列只有\",{\"1\":{\"254\":1}}],[\"阻塞队列添加拒绝策略\",{\"1\":{\"194\":1}}],[\"阻塞队列容量达到设置的告警阈值\",{\"1\":{\"94\":1}}],[\"阻塞等待线程池中任务执行时间\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"邮件通知需要单独引入下面依赖\",{\"1\":{\"227\":1}}],[\"邮件通知\",{\"0\":{\"226\":1,\"227\":1}}],[\"邮件微信钉钉飞书短信\",{\"1\":{\"113\":1}}],[\"邮件发送扩展\",{\"1\":{\"95\":1}}],[\"邮件\",{\"1\":{\"94\":1,\"103\":1,\"118\":1}}],[\"飞书通知渠道\",{\"1\":{\"227\":1}}],[\"飞书\",{\"1\":{\"94\":1,\"103\":1,\"118\":1}}],[\"暴露出dynamictp指标接口\",{\"1\":{\"116\":1}}],[\"暴露端点\",{\"1\":{\"108\":1}}],[\"暴露\",{\"1\":{\"105\":1}}],[\"暴露自定义\",{\"1\":{\"94\":1}}],[\"暴露相关端点\",{\"1\":{\"94\":1}}],[\"引入相应配置中心的依赖\",{\"1\":{\"252\":1}}],[\"引入相应依赖\",{\"1\":{\"103\":1}}],[\"引入以下依赖可解决这个问题\",{\"1\":{\"237\":1}}],[\"引入以下依赖即可\",{\"1\":{\"157\":1}}],[\"引入依赖\",{\"1\":{\"235\":1}}],[\"引入时间轮重构任务超时\",{\"1\":{\"179\":1}}],[\"引入的线程池插件\",{\"1\":{\"166\":1}}],[\"引入了一个低级的\",{\"1\":{\"156\":1}}],[\"引入\",{\"1\":{\"94\":1,\"106\":1,\"141\":1,\"179\":1,\"189\":1}}],[\"引入下述依赖\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"结合告警\",{\"1\":{\"200\":1}}],[\"结合\",{\"1\":{\"94\":2}}],[\"输出到磁盘指定目录\",{\"1\":{\"94\":1}}],[\"已有任务会正常执行\",{\"1\":{\"143\":1}}],[\"已集成\",{\"1\":{\"94\":1,\"103\":1}}],[\"已支持企微\",{\"1\":{\"103\":1}}],[\"已支持钉钉\",{\"1\":{\"94\":1}}],[\"已支持以下三种方式\",{\"1\":{\"94\":1}}],[\"已实现\",{\"1\":{\"94\":1}}],[\"内部\",{\"1\":{\"177\":1}}],[\"内部用的线程池是自定义的\",{\"1\":{\"140\":1}}],[\"内部使用时忽略大小写\",{\"1\":{\"155\":1}}],[\"内部使用\",{\"1\":{\"92\":1}}],[\"内容详情\",{\"1\":{\"119\":1}}],[\"内置三大webserver\",{\"1\":{\"201\":1}}],[\"内置的三大\",{\"1\":{\"95\":1}}],[\"内置实现\",{\"1\":{\"94\":1}}],[\"监听配置中心配置变动\",{\"1\":{\"94\":1}}],[\"监控指标数据采集\",{\"1\":{\"214\":1}}],[\"监控指标数据采集支持json日志输出\",{\"1\":{\"214\":1}}],[\"监控告警模块增加任务排队等候超时\",{\"1\":{\"210\":1}}],[\"监控数据输出新增输出到应用日志中的\",{\"1\":{\"196\":1}}],[\"监控数据新增线程池别名\",{\"1\":{\"175\":1}}],[\"监控数据采集\",{\"1\":{\"103\":1}}],[\"监控数据采集器类型\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"监控面板升级\",{\"1\":{\"171\":1}}],[\"监控及源码解析篇\",{\"1\":{\"124\":1}}],[\"监控往往伴随着告警阈值\",{\"1\":{\"117\":1}}],[\"监控页面配置ip端口添加监控即可\",{\"1\":{\"117\":1}}],[\"监控页面添加\",{\"0\":{\"117\":1}}],[\"监控端口\",{\"1\":{\"117\":1}}],[\"监控管理mxbean\",{\"1\":{\"109\":1}}],[\"监控报警\",{\"1\":{\"95\":1}}],[\"监控模块新增\",{\"1\":{\"171\":1}}],[\"监控模块\",{\"1\":{\"94\":2}}],[\"监控\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"103\":1,\"117\":1,\"120\":2,\"155\":1}}],[\"监控时间间隔\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"监控日志数据路径\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"模块提供的扩展\",{\"1\":{\"259\":2}}],[\"模块默认集成企微\",{\"1\":{\"227\":1}}],[\"模块代码组织结构\",{\"1\":{\"203\":1}}],[\"模块代码\",{\"1\":{\"193\":1,\"198\":1}}],[\"模块中\",{\"1\":{\"193\":2}}],[\"模块相关代码重构\",{\"1\":{\"189\":1}}],[\"模块新增\",{\"1\":{\"187\":5,\"191\":1}}],[\"模块引入\",{\"1\":{\"175\":1}}],[\"模块的\",{\"1\":{\"169\":1}}],[\"模块移动到\",{\"1\":{\"164\":2}}],[\"模块下自动装配的功能类进行声明\",{\"1\":{\"138\":1}}],[\"模块\",{\"1\":{\"95\":8,\"151\":1,\"164\":2,\"179\":1,\"193\":2,\"196\":1,\"198\":2,\"223\":1}}],[\"模块划分\",{\"0\":{\"94\":1}}],[\"模式设定\",{\"0\":{\"250\":1}}],[\"模式适用于\",{\"1\":{\"249\":1}}],[\"模式是默认的线程池模式\",{\"1\":{\"249\":1}}],[\"模式下依赖\",{\"1\":{\"254\":1}}],[\"模式下报错问题\",{\"1\":{\"151\":1}}],[\"模式下引入的依赖不一样\",{\"1\":{\"142\":1}}],[\"模式下和普通\",{\"1\":{\"142\":1}}],[\"模式\",{\"1\":{\"51\":1,\"172\":1,\"249\":5}}],[\"x\",{\"1\":{\"137\":4,\"166\":3,\"175\":1,\"244\":5,\"245\":3}}],[\"xxxxxxxxxxxxxxxx\",{\"1\":{\"227\":1}}],[\"xx\",{\"1\":{\"100\":1}}],[\"xml\",{\"1\":{\"138\":1}}],[\"xmx1024m\",{\"1\":{\"100\":1}}],[\"xmn256m\",{\"1\":{\"100\":1}}],[\"xnio\",{\"1\":{\"92\":2}}],[\"x<\",{\"1\":{\"2\":1,\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"227\":1,\"233\":1,\"235\":1,\"237\":1,\"244\":1,\"259\":2}}],[\"阿里云商业版\",{\"1\":{\"179\":1}}],[\"阿里云\",{\"1\":{\"84\":1}}],[\"同步请求不会使用\",{\"1\":{\"80\":1}}],[\"同时会推送通知消息\",{\"1\":{\"229\":1}}],[\"同时会推送参数修改通知\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"同时重置周期累加值为\",{\"1\":{\"223\":3}}],[\"同时修复了三个小bug\",{\"1\":{\"200\":1}}],[\"同时优化重构了一些代码设计\",{\"1\":{\"195\":1}}],[\"同时配置文件中添加配置项\",{\"1\":{\"139\":1,\"254\":1}}],[\"同时也提供\",{\"1\":{\"103\":1}}],[\"同时提供\",{\"1\":{\"103\":2}}],[\"同时支持以下三种\",{\"1\":{\"67\":1}}],[\"实在智能\",{\"1\":{\"220\":1}}],[\"实时监控\",{\"1\":{\"200\":1}}],[\"实时监控线程池的运行状态\",{\"1\":{\"103\":1}}],[\"实时生效\",{\"1\":{\"103\":1}}],[\"实时生效的角色\",{\"1\":{\"98\":1}}],[\"实时获取两种采集方式\",{\"1\":{\"94\":1}}],[\"实现的滑动窗口限流\",{\"1\":{\"233\":1}}],[\"实现优雅关闭线程池功能\",{\"1\":{\"179\":1}}],[\"实现\",{\"1\":{\"103\":1,\"111\":2,\"225\":3,\"233\":1,\"256\":2,\"259\":1}}],[\"实现对运行中线程池参数的动态修改\",{\"1\":{\"103\":1}}],[\"实现通知告警功能\",{\"1\":{\"94\":1}}],[\"实现监控指标采集以及输出\",{\"1\":{\"94\":1}}],[\"实现监听特定的配置刷新事件\",{\"1\":{\"14\":1}}],[\"实现线程池参数的刷新\",{\"1\":{\"94\":1}}],[\"实例信息\",{\"1\":{\"225\":2}}],[\"实例注册到\",{\"1\":{\"139\":1}}],[\"实例\",{\"1\":{\"80\":1,\"157\":1}}],[\"容量使用率\",{\"1\":{\"223\":1}}],[\"容量报警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"容器开启活跃线程池数获取功能\",{\"1\":{\"199\":1}}],[\"容器以及内部注册器中\",{\"1\":{\"139\":1}}],[\"容器关闭前尽可能多的处理队列中的任务\",{\"1\":{\"103\":1}}],[\"容器\",{\"1\":{\"95\":1}}],[\"容器中获取\",{\"1\":{\"103\":1}}],[\"容器中获取所有被\",{\"1\":{\"80\":1}}],[\"容器中\",{\"1\":{\"94\":1,\"103\":1,\"157\":1,\"254\":1}}],[\"容器管理的\",{\"1\":{\"80\":1}}],[\"端metrics端点\",{\"1\":{\"117\":1}}],[\"端暴露出\",{\"0\":{\"116\":1}}],[\"端点接口支持三方中间件线程池状态获取\",{\"1\":{\"199\":1}}],[\"端点实时获取最新指标数据\",{\"1\":{\"103\":1}}],[\"端点\",{\"1\":{\"94\":1,\"105\":1}}],[\"端口号\",{\"1\":{\"78\":1}}],[\"端线程池\",{\"1\":{\"68\":1,\"78\":1}}],[\"端线程池管理\",{\"1\":{\"66\":1,\"70\":1}}],[\"懒加载的线程池获取不到\",{\"1\":{\"76\":1}}],[\"最新版本\",{\"1\":{\"163\":1}}],[\"最佳实践是将线程池配置在远程配置中心\",{\"1\":{\"139\":1}}],[\"最后点击确定添加即可\",{\"1\":{\"117\":1}}],[\"最多最活跃的\",{\"1\":{\"70\":1}}],[\"最大线程数\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"225\":2,\"250\":1}}],[\"只是\",{\"1\":{\"254\":1}}],[\"只是这样使用到的就不是满血\",{\"1\":{\"139\":1}}],[\"只允许该配置数量的机器进行推送通知\",{\"1\":{\"233\":1}}],[\"只引入用到的包\",{\"1\":{\"181\":1}}],[\"只需要一条docker命令即可安装体验heartbeat\",{\"1\":{\"120\":1}}],[\"只需要自定义一个\",{\"1\":{\"14\":1}}],[\"只需页面上简单点一点就能把\",{\"1\":{\"120\":1}}],[\"只需配置yml就能使用这些协议去自定义采集任何您想要采集的指标\",{\"1\":{\"113\":1}}],[\"只需\",{\"1\":{\"103\":1}}],[\"只支持服务\",{\"1\":{\"78\":1}}],[\"只支持\",{\"1\":{\"70\":1}}],[\"只增强服务\",{\"1\":{\"68\":1}}],[\"协议端口\",{\"1\":{\"68\":2}}],[\"😅😅😅\",{\"1\":{\"67\":1,\"83\":1}}],[\"😭😭😭\",{\"1\":{\"67\":1,\"83\":1}}],[\"队列剩余容量\",{\"1\":{\"225\":1}}],[\"队列任务数量\",{\"1\":{\"225\":1}}],[\"队列类型\",{\"1\":{\"225\":2}}],[\"队列里的任务怎么处理\",{\"0\":{\"143\":1}}],[\"队列维度\",{\"1\":{\"103\":1}}],[\"队列大小不能修改\",{\"1\":{\"90\":1,\"92\":1}}],[\"队列大小不能调整\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"队列容量告警\",{\"1\":{\"223\":2}}],[\"队列容量只是内部的一个变量\",{\"1\":{\"143\":1}}],[\"队列容量阈值报警\",{\"1\":{\"103\":1}}],[\"队列容量\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"225\":2,\"250\":1}}],[\"队列容量使用率\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"启动类加\",{\"1\":{\"252\":1}}],[\"启动类加注解导入相应线程池配置\",{\"1\":{\"44\":1}}],[\"启动参数加上以下参数\",{\"1\":{\"243\":1}}],[\"启动时只通过\",{\"1\":{\"185\":1}}],[\"启动优化\",{\"1\":{\"185\":1}}],[\"启动日志输出\",{\"1\":{\"253\":1}}],[\"启动日志\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"+useconcmarksweepgc\",{\"1\":{\"100\":1}}],[\"+\",{\"1\":{\"66\":4,\"68\":4,\"76\":2,\"78\":2,\"80\":1,\"82\":1,\"94\":1,\"225\":39,\"231\":15,\"256\":2}}],[\"支持给任务添加名称\",{\"1\":{\"258\":1}}],[\"支持的不是很好\",{\"1\":{\"245\":1}}],[\"支持前后告警间隔计数\",{\"1\":{\"210\":1}}],[\"支持三方中间件通知告警\",{\"1\":{\"203\":1}}],[\"支持飞书验签\",{\"1\":{\"187\":1}}],[\"支持通知告警\",{\"1\":{\"179\":1}}],[\"支持通过\",{\"1\":{\"103\":1}}],[\"支持不同告警项配置不同接受人\",{\"1\":{\"175\":1}}],[\"支持更丰富指标查看\",{\"1\":{\"171\":1}}],[\"支持兼容\",{\"1\":{\"166\":1}}],[\"支持那些版本\",{\"0\":{\"137\":1}}],[\"支持对应用服务\",{\"1\":{\"113\":1}}],[\"支持多种主流配置中心\",{\"1\":{\"103\":1}}],[\"支持开源\",{\"1\":{\"84\":1}}],[\"支持\",{\"0\":{\"215\":1},\"1\":{\"58\":1,\"64\":1,\"66\":1,\"157\":1,\"163\":1,\"166\":2,\"175\":3,\"179\":1,\"187\":1,\"196\":5,\"201\":4,\"216\":1,\"243\":1,\"244\":1,\"258\":4}}],[\"通知项配置\",{\"1\":{\"233\":1}}],[\"通知限流\",{\"0\":{\"232\":1}}],[\"通知时间\",{\"1\":{\"225\":1}}],[\"通知\",{\"1\":{\"120\":1}}],[\"通知报警事件\",{\"1\":{\"94\":1}}],[\"通知报警平台id\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"通知报警平台配置\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"225\":1,\"235\":1}}],[\"通知告警平台支持云之家\",{\"1\":{\"175\":1}}],[\"通知告警\",{\"1\":{\"103\":2}}],[\"通知告警类型如下\",{\"1\":{\"94\":1}}],[\"通知告警模块\",{\"1\":{\"94\":2}}],[\"通知告警完整的功能\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"通知线程池管理模块实现配置参数的刷新\",{\"1\":{\"94\":1}}],[\"通过以上\",{\"1\":{\"252\":1}}],[\"通过线程池配置中的\",{\"1\":{\"250\":1}}],[\"通过监听\",{\"1\":{\"169\":1}}],[\"通过上面的两步我们就完成了对\",{\"1\":{\"117\":1}}],[\"通过上面几步\",{\"1\":{\"117\":1}}],[\"通过引入相关\",{\"1\":{\"105\":1}}],[\"通过执行一些\",{\"1\":{\"101\":1}}],[\"通过\",{\"0\":{\"56\":1,\"63\":1},\"1\":{\"94\":1,\"105\":2,\"109\":1,\"144\":1,\"187\":1,\"231\":1,\"239\":8}}],[\"zk已支持json\",{\"1\":{\"205\":1}}],[\"zk\",{\"1\":{\"64\":1,\"122\":1,\"152\":1}}],[\"zkui\",{\"1\":{\"52\":1,\"58\":1}}],[\"zookpeer\",{\"1\":{\"52\":1,\"58\":1}}],[\"zookeeper<\",{\"1\":{\"53\":2,\"59\":2}}],[\"zookeeper\",{\"0\":{\"52\":1,\"58\":1},\"1\":{\"52\":1,\"57\":1,\"58\":1,\"64\":2,\"94\":1,\"103\":1,\"152\":1,\"214\":1}}],[\"zhaogz\",{\"1\":{\"187\":1}}],[\"zhang\",{\"1\":{\"166\":1,\"168\":1,\"175\":2,\"177\":1,\"179\":2,\"181\":1,\"196\":1}}],[\"zhifei\",{\"1\":{\"175\":1}}],[\"zh\",{\"1\":{\"6\":1}}],[\"设置详细参数创建线程池\",{\"1\":{\"239\":2}}],[\"设置详细参数创建动态线程池\",{\"1\":{\"239\":3}}],[\"设置\",{\"1\":{\"173\":1}}],[\"设置钉钉机器人access\",{\"1\":{\"118\":1}}],[\"设置安全自定义关键词hertzbeat\",{\"1\":{\"118\":1}}],[\"设置配置中心命名空间\",{\"1\":{\"51\":1}}],[\"设置为\",{\"1\":{\"7\":1}}],[\"=>\",{\"1\":{\"66\":3,\"68\":3,\"70\":3,\"72\":3,\"74\":2,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3,\"90\":3,\"92\":3,\"225\":6}}],[\"=2\",{\"1\":{\"56\":2,\"63\":2}}],[\"=1\",{\"1\":{\"56\":1,\"63\":1}}],[\"=mdc\",{\"1\":{\"56\":1,\"63\":1}}],[\"=ttl\",{\"1\":{\"56\":1,\"63\":1}}],[\"=\",{\"1\":{\"44\":2,\"66\":4,\"68\":4,\"70\":8,\"72\":4,\"76\":4,\"78\":4,\"80\":4,\"82\":4,\"84\":4,\"86\":4,\"88\":4,\"90\":4,\"111\":1,\"141\":1,\"223\":2,\"225\":4,\"231\":6,\"240\":1,\"256\":2,\"259\":1}}],[\"无\",{\"1\":{\"218\":13}}],[\"无需代码编程式配置\",{\"1\":{\"210\":1}}],[\"无需agent\",{\"1\":{\"113\":1}}],[\"无法被uncaughtexceptionhandler处理\",{\"1\":{\"185\":1}}],[\"无感知性\",{\"1\":{\"98\":1}}],[\"无动态调参功能\",{\"1\":{\"39\":1}}],[\"无配置中心可以用此依赖\",{\"1\":{\"39\":1}}],[\"无配置中心应用接入\",{\"0\":{\"39\":1}}],[\"逗号分隔\",{\"1\":{\"38\":1}}],[\"版本升级5\",{\"1\":{\"185\":1}}],[\"版本在跟\",{\"1\":{\"166\":1}}],[\"版本在\",{\"1\":{\"151\":1}}],[\"版本开始支持集群限流\",{\"1\":{\"233\":1}}],[\"版本开始\",{\"1\":{\"138\":1,\"242\":1}}],[\"版本\",{\"0\":{\"243\":1,\"244\":1,\"245\":1},\"1\":{\"33\":1,\"67\":1,\"100\":1,\"137\":1,\"243\":1,\"244\":1,\"245\":1}}],[\"版本兼容问题\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"用户\",{\"1\":{\"220\":1}}],[\"用爱发电\",{\"0\":{\"216\":1}}],[\"用什么方式发\",{\"1\":{\"118\":1}}],[\"用于配置框架内部日志的输出\",{\"1\":{\"95\":1}}],[\"用下一个依赖\",{\"1\":{\"33\":1}}],[\"用此依赖\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"27\":1,\"28\":2,\"33\":1,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"259\":4}}],[\"必须配置\",{\"1\":{\"32\":1}}],[\"必填\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"场景用前一个依赖\",{\"1\":{\"27\":1}}],[\"场景下使用\",{\"0\":{\"236\":1},\"1\":{\"27\":1,\"33\":2,\"187\":1}}],[\"非常棒的项目\",{\"1\":{\"218\":1}}],[\"非常感谢您对开源精神的支持\",{\"1\":{\"216\":1}}],[\"非常简单\",{\"1\":{\"122\":1}}],[\"非常大的时候\",{\"1\":{\"101\":1,\"144\":1}}],[\"非常麻烦\",{\"1\":{\"98\":1}}],[\"非\",{\"0\":{\"138\":1},\"1\":{\"27\":1,\"158\":1}}],[\"非验签模式没有此值\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2}}],[\"yunzhijia\",{\"1\":{\"235\":1}}],[\"yunzhijia<\",{\"1\":{\"235\":2}}],[\"yaokai的贡献\",{\"1\":{\"185\":1}}],[\"yanhom\",{\"0\":{\"124\":1},\"1\":{\"111\":1,\"161\":1,\"162\":1,\"166\":6,\"167\":2,\"168\":7,\"169\":1,\"171\":3,\"172\":2,\"173\":3,\"175\":3,\"176\":4,\"177\":2,\"179\":2,\"180\":2,\"181\":2,\"225\":2,\"231\":1,\"259\":1}}],[\"yamlpropertysourcefactory\",{\"1\":{\"44\":1}}],[\"yaml\",{\"1\":{\"26\":1,\"38\":1}}],[\"yidongnan\",{\"1\":{\"70\":1}}],[\"yml\",{\"0\":{\"4\":1,\"6\":1,\"11\":1,\"13\":1,\"20\":1,\"24\":1,\"26\":1,\"30\":1,\"32\":1,\"36\":1,\"38\":1,\"42\":1,\"48\":1,\"49\":1,\"51\":1,\"57\":1,\"64\":1},\"1\":{\"1\":3,\"6\":2,\"8\":2,\"13\":1,\"15\":2,\"21\":3,\"27\":3,\"32\":1,\"33\":3,\"38\":2,\"39\":1,\"44\":1,\"45\":3,\"51\":1,\"52\":2,\"58\":2,\"94\":1}}],[\"kibana\",{\"1\":{\"231\":2}}],[\"kie\",{\"1\":{\"26\":2}}],[\"kyao的贡献\",{\"1\":{\"183\":1}}],[\"kyao\",{\"1\":{\"161\":1,\"167\":3,\"171\":1,\"172\":1,\"175\":3,\"176\":1,\"177\":1}}],[\"kamtohung的贡献\",{\"1\":{\"183\":1,\"185\":1}}],[\"kamtohung\",{\"1\":{\"161\":3,\"163\":2,\"166\":1,\"167\":1,\"176\":1,\"177\":1,\"179\":3,\"180\":2,\"181\":3}}],[\"kvclient\",{\"1\":{\"152\":1}}],[\"k8s\",{\"1\":{\"122\":1}}],[\"kevin\",{\"1\":{\"218\":1}}],[\"keepalivetime=50\",{\"1\":{\"253\":1}}],[\"keepalivetime=60\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"keepalivetime\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":2,\"68\":3,\"70\":2,\"72\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"157\":1,\"188\":1,\"239\":1,\"247\":1,\"250\":1}}],[\"keys\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"key\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"13\":1,\"18\":1,\"20\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"64\":1,\"235\":1}}],[\"jos\",{\"1\":{\"218\":1}}],[\"job\",{\"1\":{\"106\":1,\"122\":3}}],[\"juejin\",{\"1\":{\"200\":1}}],[\"jucexecutor\",{\"1\":{\"247\":1}}],[\"jucthreadpoolexecutor\",{\"1\":{\"239\":2}}],[\"juc\",{\"0\":{\"139\":1},\"1\":{\"90\":1,\"101\":1,\"103\":1,\"139\":1,\"157\":1,\"159\":1,\"172\":1,\"183\":1,\"247\":1,\"254\":1}}],[\"jackson\",{\"1\":{\"179\":1,\"185\":1}}],[\"javax\",{\"1\":{\"227\":1}}],[\"javaagent\",{\"1\":{\"141\":1,\"237\":1}}],[\"java学思\",{\"0\":{\"126\":1}}],[\"java\",{\"1\":{\"98\":1,\"100\":1,\"111\":1,\"135\":1,\"225\":1,\"243\":2,\"256\":2,\"259\":1}}],[\"jdbc等协议规范可配置化\",{\"1\":{\"113\":1}}],[\"jdk9\",{\"1\":{\"243\":1}}],[\"jdk21\",{\"1\":{\"243\":1}}],[\"jdk8\",{\"1\":{\"243\":1}}],[\"jdk11\",{\"1\":{\"197\":1}}],[\"jdk1\",{\"1\":{\"175\":1}}],[\"jdk17\",{\"1\":{\"166\":1}}],[\"jdk\",{\"0\":{\"243\":1},\"1\":{\"100\":1}}],[\"jvmti\",{\"1\":{\"168\":1,\"175\":1}}],[\"jvm\",{\"1\":{\"100\":1,\"243\":1}}],[\"jmh\",{\"1\":{\"100\":1,\"144\":1}}],[\"jmx\",{\"0\":{\"109\":1},\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"103\":1,\"105\":2,\"109\":1,\"111\":1,\"113\":1,\"158\":1,\"161\":1}}],[\"jettytp\",{\"1\":{\"74\":3}}],[\"jetty\",{\"0\":{\"73\":1},\"1\":{\"74\":3,\"94\":1,\"95\":1,\"103\":1,\"124\":1,\"172\":1,\"179\":1,\"201\":1,\"214\":1}}],[\"jsonutil\",{\"1\":{\"111\":2,\"179\":1}}],[\"jsonlog\",{\"1\":{\"94\":1,\"103\":1}}],[\"json\",{\"0\":{\"19\":1,\"62\":1},\"1\":{\"58\":1,\"64\":4,\"94\":1,\"105\":2,\"107\":1,\"122\":1,\"179\":1}}],[\"方便\",{\"1\":{\"239\":1}}],[\"方便问题追踪\",{\"1\":{\"201\":1}}],[\"方便集成管理各种三方包线程池\",{\"1\":{\"175\":1}}],[\"方便在其他非\",{\"1\":{\"150\":1}}],[\"方便使用者参照\",{\"1\":{\"95\":1}}],[\"方便扩展\",{\"1\":{\"95\":1}}],[\"方便管理\",{\"1\":{\"39\":1,\"52\":1,\"58\":1}}],[\"方式\",{\"1\":{\"122\":1,\"161\":1}}],[\"方式采集指标数据\",{\"1\":{\"105\":1}}],[\"方式实时请求\",{\"1\":{\"108\":1}}],[\"方式实时获取指标数据\",{\"1\":{\"105\":1}}],[\"方式实时访问\",{\"1\":{\"94\":1}}],[\"方式安装请参考这篇文章\",{\"1\":{\"6\":1}}],[\"方式安装\",{\"1\":{\"6\":1}}],[\"方法来增加堆内存信息\",{\"1\":{\"231\":1}}],[\"方法来增加跳转详情链接\",{\"1\":{\"231\":1}}],[\"方法和\",{\"1\":{\"223\":1}}],[\"方法会去做拒绝数量累加\",{\"1\":{\"223\":1}}],[\"方法完善丰富\",{\"1\":{\"168\":1}}],[\"方法的增强\",{\"1\":{\"141\":1}}],[\"方法根据线程池名称来获取线程池实例\",{\"1\":{\"94\":1}}],[\"方法\",{\"1\":{\"14\":1,\"98\":1,\"111\":1,\"223\":5,\"225\":2}}],[\"提升告警信息可读易懂性\",{\"1\":{\"201\":1}}],[\"提升代码的可维护性\",{\"1\":{\"95\":1}}],[\"提醒的问题\",{\"1\":{\"176\":1}}],[\"提交任务时设置标识名称\",{\"1\":{\"201\":1}}],[\"提交\",{\"0\":{\"135\":1},\"1\":{\"135\":3}}],[\"提供完整使用示例\",{\"1\":{\"214\":1}}],[\"提供io密集型线程池\",{\"1\":{\"212\":1}}],[\"提供任务包装类namedrunable\",{\"1\":{\"201\":1}}],[\"提供任务包装功能\",{\"1\":{\"103\":1}}],[\"提供实现\",{\"1\":{\"187\":3,\"188\":1,\"191\":1,\"192\":2,\"194\":2,\"196\":6}}],[\"提供\",{\"1\":{\"175\":1}}],[\"提供了增强线程池\",{\"1\":{\"103\":1}}],[\"提供了三种\",{\"1\":{\"14\":1}}],[\"提供多种通知告警维度\",{\"1\":{\"103\":1}}],[\"提供独立功能模块的依赖封装\",{\"1\":{\"95\":1}}],[\"提供一个简单使用示例\",{\"1\":{\"95\":1}}],[\"提供定时任务采集\",{\"1\":{\"94\":1}}],[\"提示\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1,\"66\":1,\"67\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"100\":1,\"101\":1,\"117\":1,\"120\":1,\"148\":1,\"152\":1,\"155\":1,\"159\":1,\"164\":1,\"169\":1,\"173\":1,\"177\":1,\"181\":1,\"185\":1,\"189\":1,\"194\":1,\"199\":1,\"203\":1,\"208\":1,\"210\":1,\"212\":1}}],[\"下的所有线程池在服务启动时会自动生成\",{\"1\":{\"157\":1}}],[\"下的情况\",{\"1\":{\"101\":1}}],[\"下配置\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"14\":1}}],[\"下述配置项的值都是随便填写的\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"类型\",{\"1\":{\"254\":1}}],[\"类型时\",{\"1\":{\"192\":1}}],[\"类新增一些内存安全快捷创建线程池方法\",{\"1\":{\"196\":1}}],[\"类似\",{\"1\":{\"92\":1}}],[\"类名\",{\"1\":{\"76\":1}}],[\"类\",{\"1\":{\"14\":1,\"223\":1}}],[\"的消息按序消费\",{\"1\":{\"249\":1}}],[\"的永久留名\",{\"1\":{\"217\":2}}],[\"的使用\",{\"1\":{\"177\":1}}],[\"的问题\",{\"1\":{\"176\":1}}],[\"的实现\",{\"1\":{\"175\":1,\"233\":1,\"254\":1}}],[\"的实时监控指标数据\",{\"1\":{\"117\":1}}],[\"的情况\",{\"1\":{\"151\":1,\"158\":1}}],[\"的依赖\",{\"1\":{\"150\":1}}],[\"的形式提供\",{\"1\":{\"149\":1}}],[\"的特性\",{\"1\":{\"149\":1}}],[\"的数据源\",{\"1\":{\"122\":1}}],[\"的可以加我发你\",{\"1\":{\"122\":1}}],[\"的指标异常时\",{\"1\":{\"117\":1}}],[\"的线程池指标超出我们的期望值或异常时\",{\"1\":{\"117\":1}}],[\"的线程池管理\",{\"1\":{\"95\":1}}],[\"的历史监控指标数据图表📈\",{\"1\":{\"117\":1}}],[\"的监控\",{\"1\":{\"117\":1}}],[\"的监控了\",{\"1\":{\"117\":1}}],[\"的监听器\",{\"1\":{\"94\":1}}],[\"的强大自定义\",{\"1\":{\"113\":1}}],[\"的性能损耗就比较小了\",{\"1\":{\"101\":1,\"144\":1}}],[\"的源码\",{\"1\":{\"98\":1}}],[\"的流控扩展\",{\"1\":{\"95\":1}}],[\"的方式组织代码\",{\"1\":{\"95\":1}}],[\"的事件机制和核心逻辑解耦\",{\"1\":{\"94\":1}}],[\"的三方中间件线程池管理功能吧\",{\"1\":{\"67\":1,\"83\":1}}],[\"的\",{\"1\":{\"14\":1,\"118\":1,\"120\":1,\"140\":1,\"172\":1,\"175\":1,\"200\":1,\"223\":4}}],[\"即可浏览\",{\"1\":{\"117\":2}}],[\"即可\",{\"1\":{\"14\":1,\"139\":1}}],[\"即为配置文件里的\",{\"1\":{\"7\":1}}],[\"有限公司\",{\"1\":{\"220\":1}}],[\"有内存溢出风险\",{\"1\":{\"154\":1}}],[\"有内部自研的配置中心\",{\"1\":{\"14\":1}}],[\"有以下几种解决方案\",{\"1\":{\"141\":1}}],[\"有一颗用爱发电的心\",{\"1\":{\"134\":1}}],[\"有一套自己的服务治理体系\",{\"1\":{\"98\":1}}],[\"有道云笔记\",{\"0\":{\"129\":1}}],[\"有序线程池实现\",{\"1\":{\"179\":1}}],[\"有序线程池\",{\"1\":{\"103\":1}}],[\"有版本兼容性问题可以提\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"自行二开\",{\"1\":{\"242\":1}}],[\"自动配置等相关\",{\"1\":{\"95\":1}}],[\"自己维护了一个\",{\"1\":{\"90\":1}}],[\"自选用任意一种调用即可实现动态刷新功能\",{\"1\":{\"14\":1}}],[\"自研配置中心接入\",{\"0\":{\"14\":1}}],[\"自定义拒绝策略\",{\"0\":{\"256\":1}}],[\"自定义通知渠道\",{\"0\":{\"224\":1,\"225\":1}}],[\"自定义无法接入问题\",{\"1\":{\"192\":1}}],[\"自定义采集类型\",{\"0\":{\"111\":1}}],[\"自定义采集\",{\"0\":{\"110\":1}}],[\"自定义配置\",{\"1\":{\"26\":2}}],[\"自定义\",{\"1\":{\"4\":2,\"5\":4,\"11\":2,\"12\":4,\"18\":4,\"24\":2,\"25\":4,\"30\":2,\"31\":4,\"36\":2,\"37\":4,\"42\":2,\"43\":4,\"49\":2,\"50\":4,\"55\":4,\"61\":4,\"259\":1}}],[\"里\",{\"1\":{\"7\":1}}],[\"创建时添加\",{\"1\":{\"212\":1}}],[\"创建继承自\",{\"1\":{\"14\":1}}],[\"创建\",{\"1\":{\"7\":1}}],[\"创建项目\",{\"1\":{\"7\":1}}],[\"或继承相关子类\",{\"1\":{\"256\":1}}],[\"或通过\",{\"1\":{\"252\":1}}],[\"或许能帮助到你\",{\"1\":{\"98\":1}}],[\"或者通过依赖注入方式\",{\"1\":{\"240\":1}}],[\"或者对项目有什么想法或者建议\",{\"1\":{\"132\":1}}],[\"或者\",{\"1\":{\"94\":1,\"138\":1}}],[\"或者不配置\",{\"1\":{\"7\":1}}],[\"或加群反馈\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"作为\",{\"1\":{\"7\":1}}],[\"安装完之后接着往下看\",{\"1\":{\"122\":1}}],[\"安装\",{\"1\":{\"7\":1,\"122\":1}}],[\"安全设置在签名校验模式下才的秘钥\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"安全设置在验签模式下才的秘钥\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"本示例使用servicestage环境变量\",{\"1\":{\"26\":1}}],[\"本地或\",{\"1\":{\"7\":1}}],[\"本配置优先级\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"接收人\",{\"1\":{\"225\":2}}],[\"接线程池对象\",{\"1\":{\"157\":1}}],[\"接下来我们就来一步一步演示如何配置\",{\"1\":{\"117\":1}}],[\"接口自定义任务包装器\",{\"1\":{\"258\":1}}],[\"接口场景可用\",{\"1\":{\"240\":1}}],[\"接口\",{\"1\":{\"166\":1,\"192\":1,\"256\":1,\"259\":1}}],[\"接口数据\",{\"0\":{\"116\":1}}],[\"接口供用户自定义个性化实现\",{\"1\":{\"103\":1}}],[\"接口即可\",{\"1\":{\"103\":1,\"233\":1}}],[\"接口可自定义扩展实现\",{\"1\":{\"103\":3}}],[\"接口扩展其他实现\",{\"1\":{\"94\":4}}],[\"接受参数刷新\",{\"1\":{\"94\":1}}],[\"接受配置监听模块的刷新事件\",{\"1\":{\"94\":1}}],[\"接受人\",{\"1\":{\"235\":1}}],[\"接受人username\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"接受人企微账号\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"接入步骤\",{\"0\":{\"251\":1,\"252\":1},\"1\":{\"252\":1}}],[\"接入公司\",{\"0\":{\"219\":1,\"220\":1}}],[\"接入后服务启动不能正常创建线程池\",{\"0\":{\"142\":1}}],[\"接入流程\",{\"0\":{\"112\":1,\"121\":1}}],[\"接入只需简单\",{\"1\":{\"103\":1}}],[\"接入也很简单\",{\"1\":{\"14\":1}}],[\"接入\",{\"0\":{\"7\":1}}],[\"使用方式\",{\"0\":{\"259\":1}}],[\"使用默认参数\",{\"1\":{\"239\":1}}],[\"使用时需引入依赖\",{\"1\":{\"237\":1}}],[\"使用时需注意\",{\"1\":{\"237\":1}}],[\"使用时直接获取就行\",{\"1\":{\"139\":1}}],[\"使用时直接从\",{\"1\":{\"103\":1}}],[\"使用引入以下依赖\",{\"1\":{\"233\":1}}],[\"使用率\",{\"1\":{\"171\":1}}],[\"使用过程中有任何问题\",{\"1\":{\"132\":1}}],[\"使用起来极其简单\",{\"1\":{\"103\":1}}],[\"使用它也不用过于担心配置推送失败这类问题\",{\"1\":{\"98\":1}}],[\"使用线程池\",{\"1\":{\"98\":1}}],[\"使用痛点\",{\"0\":{\"98\":1}}],[\"使用步骤\",{\"0\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"使用文本的key\",{\"1\":{\"26\":1}}],[\"使用\",{\"1\":{\"6\":1,\"200\":1,\"243\":1,\"252\":1}}],[\"使用不到的项或者使用默认值的项都可以删除\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"hdgaadd\",{\"1\":{\"188\":1}}],[\"hkhuang的贡献\",{\"1\":{\"185\":1}}],[\"hutool\",{\"1\":{\"168\":1,\"173\":1,\"181\":1,\"185\":1,\"189\":1}}],[\"huawei配置中心servicecomb的支持\",{\"1\":{\"183\":1}}],[\"huawei<\",{\"1\":{\"22\":2}}],[\"huawei\",{\"0\":{\"21\":1}}],[\"hailang\",{\"1\":{\"187\":1}}],[\"hailang的贡献\",{\"1\":{\"183\":1}}],[\"has\",{\"1\":{\"119\":1,\"253\":1}}],[\"handler\",{\"1\":{\"98\":1,\"108\":1}}],[\"heapmax=\",{\"1\":{\"231\":1}}],[\"heapmax\",{\"1\":{\"231\":2}}],[\"heapcommitted=\",{\"1\":{\"231\":1}}],[\"heapcommitted\",{\"1\":{\"231\":2}}],[\"heapused=\",{\"1\":{\"231\":1}}],[\"heapused\",{\"1\":{\"231\":2}}],[\"heapinit=\",{\"1\":{\"231\":1}}],[\"heapinit\",{\"1\":{\"231\":2}}],[\"help\",{\"1\":{\"117\":1,\"118\":1}}],[\"hertzbeat告警通知\",{\"1\":{\"119\":1}}],[\"hertzbeat\",{\"0\":{\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"117\":1,\"118\":1},\"1\":{\"113\":2,\"115\":1,\"117\":10,\"118\":5,\"120\":6}}],[\"hystrixtp\",{\"1\":{\"72\":2}}],[\"hystrix<\",{\"1\":{\"72\":2}}],[\"hystrix\",{\"0\":{\"71\":1},\"1\":{\"72\":5,\"94\":1,\"95\":1,\"103\":1,\"197\":1,\"199\":1,\"201\":1}}],[\"host\",{\"1\":{\"13\":1,\"227\":1}}],[\"home\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"19\":1,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":1,\"61\":2,\"62\":1,\"63\":1}}],[\"https\",{\"1\":{\"6\":2,\"70\":1,\"117\":1,\"118\":1,\"120\":2,\"150\":1,\"151\":5,\"152\":3,\"154\":1,\"157\":5,\"158\":7,\"200\":1,\"231\":1,\"253\":3}}],[\"http\",{\"1\":{\"6\":2,\"20\":1,\"26\":1,\"94\":1,\"105\":1,\"108\":1,\"173\":1}}],[\"n\",{\"1\":{\"225\":41}}],[\"newbuilder\",{\"1\":{\"239\":5}}],[\"newfixedthreadpool\",{\"1\":{\"239\":1}}],[\"new\",{\"1\":{\"225\":2,\"239\":1,\"256\":1,\"259\":1}}],[\"netty\",{\"1\":{\"78\":1,\"92\":1}}],[\"nettytp\",{\"1\":{\"70\":1}}],[\"nettygrpcserverlifecycle\",{\"1\":{\"70\":1}}],[\"net\",{\"1\":{\"6\":1,\"227\":1}}],[\"ny\",{\"1\":{\"192\":1}}],[\"nyah\",{\"1\":{\"162\":1}}],[\"npe\",{\"1\":{\"156\":1,\"176\":1,\"192\":1}}],[\"null\",{\"1\":{\"116\":1,\"225\":1,\"231\":1}}],[\"nioxnioworker\",{\"1\":{\"92\":1}}],[\"nio\",{\"1\":{\"92\":1}}],[\"not\",{\"1\":{\"260\":1}}],[\"notice\",{\"0\":{\"267\":1},\"1\":{\"225\":2,\"231\":1}}],[\"notifier\",{\"1\":{\"223\":1,\"225\":5,\"231\":2}}],[\"notifyredisratelimiterfilter\",{\"1\":{\"233\":1}}],[\"notifyfilter\",{\"1\":{\"233\":1}}],[\"notifyplatform\",{\"1\":{\"225\":1}}],[\"notify\",{\"1\":{\"189\":1,\"193\":2,\"198\":1,\"227\":5,\"235\":2}}],[\"notifyitem\",{\"1\":{\"66\":3,\"68\":3,\"70\":6,\"72\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3}}],[\"notifyitems=\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"notifyitems\",{\"1\":{\"4\":1,\"5\":19,\"11\":1,\"12\":19,\"18\":19,\"19\":1,\"24\":1,\"25\":19,\"30\":1,\"31\":19,\"36\":1,\"37\":19,\"42\":1,\"43\":19,\"49\":1,\"50\":19,\"55\":19,\"56\":19,\"61\":19,\"62\":1,\"63\":19,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1,\"247\":1}}],[\"notifyenabled=true\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"notifyenabled\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"187\":1}}],[\"notifytypeenum枚举类\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"nosuchmethoderror\",{\"1\":{\"158\":1}}],[\"node\",{\"1\":{\"64\":2}}],[\"nacosrefresher\",{\"1\":{\"169\":1}}],[\"nacos<\",{\"1\":{\"28\":2,\"34\":2}}],[\"nacos\",{\"0\":{\"27\":1,\"33\":1},\"1\":{\"27\":2,\"32\":3,\"33\":4,\"38\":1,\"94\":1,\"103\":1,\"107\":4,\"142\":1}}],[\"namedrunnable\",{\"1\":{\"258\":1,\"259\":1}}],[\"name\",{\"1\":{\"7\":1,\"13\":1,\"20\":1,\"26\":1,\"32\":2,\"51\":4,\"57\":1,\"64\":1,\"66\":2,\"94\":1,\"107\":4,\"108\":2,\"120\":1,\"122\":1,\"252\":1,\"256\":1,\"259\":1}}],[\"namespace\",{\"1\":{\"7\":5,\"51\":1,\"169\":1}}],[\"namespaces\",{\"1\":{\"6\":1}}],[\"第三方组件线程池管理已集成springboot内置三大webserver\",{\"1\":{\"214\":1}}],[\"第三方线程池\",{\"1\":{\"175\":1}}],[\"第三个通知平台为飞书\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"第二步在\",{\"1\":{\"117\":1}}],[\"第二个是动态线程池配置\",{\"1\":{\"38\":1}}],[\"第二个通知平台为钉钉\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"第一步暴露\",{\"1\":{\"117\":1}}],[\"第一次访问时看到有如下日志输出说明接入成功\",{\"1\":{\"72\":1}}],[\"第一个是项目主配置\",{\"1\":{\"38\":1}}],[\"第一个通知平台为微信\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"第四个通知平台为邮件\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"不需要引入其他依赖\",{\"1\":{\"259\":1}}],[\"不是\",{\"1\":{\"254\":1}}],[\"不能使用依赖注入的场景可以使用方式2\",{\"1\":{\"240\":1}}],[\"不用\",{\"1\":{\"239\":6}}],[\"不用手工修改地址\",{\"1\":{\"26\":1}}],[\"不一致会用配置中心的配置进行刷新\",{\"1\":{\"229\":1}}],[\"不启用时可以通过手动配置关闭\",{\"1\":{\"181\":1}}],[\"不支持超时告警的问题\",{\"1\":{\"167\":1}}],[\"不生效问题\",{\"1\":{\"158\":1,\"197\":1}}],[\"不确定性\",{\"1\":{\"98\":1}}],[\"不配置的项用默认值\",{\"1\":{\"201\":1}}],[\"不配置默认拿上层platforms配置的所有平台\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"不配置自动会按默认值配置\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"不配置自动会按默认值\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1}}],[\"不统计\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2}}],[\"found\",{\"1\":{\"260\":1}}],[\"format\",{\"1\":{\"13\":1,\"256\":1}}],[\"from\",{\"0\":{\"140\":1},\"1\":{\"227\":1}}],[\"freememory\",{\"1\":{\"116\":1}}],[\"features\",{\"0\":{\"183\":1,\"187\":1,\"191\":1,\"196\":1,\"201\":1,\"205\":1,\"210\":1,\"212\":1,\"214\":1}}],[\"feature\",{\"0\":{\"150\":1,\"157\":1,\"161\":1,\"166\":1,\"171\":1,\"175\":1,\"179\":1},\"1\":{\"134\":1}}],[\"findannotationonbean\",{\"1\":{\"194\":1}}],[\"final\",{\"0\":{\"140\":1},\"1\":{\"111\":1,\"140\":1,\"225\":3,\"254\":1,\"256\":1,\"259\":1}}],[\"files\",{\"1\":{\"51\":1}}],[\"filesource\",{\"1\":{\"26\":1}}],[\"file\",{\"1\":{\"32\":2,\"51\":1}}],[\"filetype\",{\"1\":{\"14\":1}}],[\"f336fd\",{\"1\":{\"80\":1,\"82\":1,\"86\":1,\"88\":1}}],[\"fabian4的贡献\",{\"1\":{\"183\":3}}],[\"fastjson\",{\"1\":{\"179\":1}}],[\"fair\",{\"1\":{\"107\":4,\"108\":1,\"116\":1}}],[\"factory\",{\"1\":{\"44\":1}}],[\"false\",{\"1\":{\"4\":3,\"11\":3,\"19\":2,\"20\":1,\"24\":3,\"30\":3,\"36\":3,\"42\":3,\"49\":3,\"62\":2,\"107\":6,\"108\":1,\"116\":2,\"139\":1,\"141\":1,\"157\":3,\"227\":1,\"247\":2,\"254\":1}}],[\"f80dad441fcd655438f4a08dcd6a\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"空闲线程等待超时时间\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"查看压测详情\",{\"1\":{\"144\":1}}],[\"查看监控列表即可看到我们的添加项\",{\"1\":{\"117\":1}}],[\"查看rejectedtypeenum枚举类\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"查看源码queuetypeenum枚举类\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"查看源码\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"查看源码notifyitem类\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1}}],[\"拒绝等场景下日志输出\",{\"1\":{\"183\":1}}],[\"拒绝触发报警\",{\"1\":{\"103\":1}}],[\"拒绝策略告警\",{\"1\":{\"223\":2}}],[\"拒绝策略告警优化\",{\"1\":{\"210\":1}}],[\"拒绝策略等等\",{\"1\":{\"103\":1}}],[\"拒绝策略\",{\"0\":{\"255\":1},\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"225\":2,\"250\":1}}],[\"拒绝报警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"81\",{\"1\":{\"116\":1}}],[\"835879\",{\"1\":{\"101\":1}}],[\"8<=10<=200\",{\"1\":{\"74\":1}}],[\"8848\",{\"1\":{\"32\":1,\"38\":1}}],[\"8500\",{\"1\":{\"13\":1}}],[\"8\",{\"0\":{\"195\":1},\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"100\":1,\"151\":1,\"156\":3,\"175\":1,\"185\":1,\"208\":1,\"227\":1,\"233\":1}}],[\"8000\",{\"1\":{\"101\":1}}],[\"8002=executorwrapper\",{\"1\":{\"78\":1}}],[\"8002\",{\"1\":{\"78\":3}}],[\"8091\",{\"1\":{\"51\":1}}],[\"8070\",{\"1\":{\"7\":1}}],[\"8080\",{\"1\":{\"6\":2}}],[\"80\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"51\":1,\"62\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"223\":4,\"233\":1,\"247\":2}}],[\"61\",{\"1\":{\"152\":1}}],[\"64\",{\"1\":{\"100\":1}}],[\"6000\",{\"1\":{\"101\":1}}],[\"60\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":3,\"68\":2,\"70\":3,\"72\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3,\"90\":3,\"92\":3,\"157\":1,\"247\":1,\"250\":1}}],[\"6\",{\"0\":{\"165\":1},\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"94\":1,\"101\":1,\"107\":1,\"108\":2,\"208\":1,\"244\":2}}],[\"psuder\",{\"1\":{\"218\":1}}],[\"pv\",{\"1\":{\"217\":1}}],[\"peachyy\",{\"1\":{\"177\":1}}],[\"pending=0\",{\"1\":{\"74\":1}}],[\"platfrom\",{\"1\":{\"183\":1}}],[\"platform=email\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platform=lark\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platform=ding\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platform=wechat\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platformid=4\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platformid=3\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platformid=2\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platformid=1\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"platformids=1\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"platformids=2\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"platformids\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"56\":3,\"62\":2,\"63\":3,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":1,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2}}],[\"platformid\",{\"1\":{\"4\":4,\"11\":4,\"19\":4,\"24\":4,\"30\":4,\"36\":4,\"42\":4,\"49\":4,\"62\":4,\"225\":1}}],[\"platform\",{\"1\":{\"4\":4,\"11\":4,\"19\":4,\"24\":4,\"30\":4,\"36\":4,\"42\":4,\"49\":4,\"62\":4,\"225\":8,\"231\":1,\"235\":1}}],[\"platforms=\",{\"1\":{\"72\":3}}],[\"platforms=null\",{\"1\":{\"66\":3,\"68\":3,\"70\":6,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3}}],[\"platforms\",{\"1\":{\"4\":1,\"5\":17,\"11\":1,\"12\":17,\"18\":17,\"19\":1,\"24\":1,\"25\":17,\"30\":1,\"31\":17,\"36\":1,\"37\":17,\"42\":1,\"43\":17,\"49\":1,\"50\":17,\"55\":17,\"56\":17,\"61\":17,\"62\":1,\"63\":17,\"225\":1,\"235\":1}}],[\"plugin\",{\"1\":{\"164\":1}}],[\"piemon\",{\"1\":{\"162\":1}}],[\"pulls\",{\"1\":{\"152\":1}}],[\"pull\",{\"1\":{\"151\":5,\"152\":2}}],[\"public\",{\"1\":{\"14\":7,\"26\":1,\"98\":12,\"111\":4,\"225\":9,\"231\":3,\"239\":9,\"240\":2,\"256\":3,\"259\":6}}],[\"p\",{\"1\":{\"120\":1}}],[\"password\",{\"1\":{\"227\":1}}],[\"pair<string\",{\"1\":{\"225\":1,\"231\":1}}],[\"pair\",{\"1\":{\"225\":1,\"231\":1}}],[\"pannel\",{\"1\":{\"122\":2}}],[\"path\",{\"1\":{\"122\":1}}],[\"package\",{\"1\":{\"111\":1,\"225\":2,\"231\":1,\"259\":1}}],[\"paas\",{\"1\":{\"26\":1}}],[\"png\",{\"1\":{\"95\":1,\"111\":1,\"122\":1,\"225\":1,\"259\":1}}],[\"policy\",{\"1\":{\"239\":2}}],[\"polaris<\",{\"1\":{\"46\":2}}],[\"polaris\",{\"0\":{\"45\":1},\"1\":{\"45\":1,\"51\":1,\"94\":1,\"103\":1}}],[\"post\",{\"1\":{\"200\":1}}],[\"poolstats\",{\"1\":{\"111\":2}}],[\"poolsize\",{\"1\":{\"107\":4,\"116\":1}}],[\"poolname\",{\"1\":{\"107\":4,\"116\":1}}],[\"pool\",{\"1\":{\"66\":3,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"107\":4,\"108\":5,\"118\":2,\"119\":1,\"253\":1,\"256\":2}}],[\"port\",{\"1\":{\"13\":1,\"51\":1,\"116\":1,\"227\":1}}],[\"pr要求\",{\"1\":{\"135\":1}}],[\"pr\",{\"0\":{\"135\":1},\"1\":{\"134\":1,\"135\":3,\"145\":1}}],[\"println\",{\"1\":{\"240\":2}}],[\"private\",{\"1\":{\"111\":1,\"225\":2,\"231\":2,\"240\":1,\"256\":1,\"259\":1}}],[\"prioritydtpexecutor\",{\"1\":{\"161\":1,\"239\":3,\"249\":1}}],[\"priority\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"239\":2,\"249\":1,\"250\":1}}],[\"prefixes\",{\"1\":{\"13\":1}}],[\"prestartallcorethreads=false\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"prestartallcorethreads\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"197\":1}}],[\"producer线程池的管理\",{\"1\":{\"183\":1}}],[\"protected\",{\"1\":{\"98\":2,\"225\":4,\"231\":5}}],[\"prometheus<\",{\"1\":{\"122\":1}}],[\"prometheus+grafana\",{\"0\":{\"121\":1},\"1\":{\"122\":2}}],[\"prometheus\",{\"1\":{\"94\":1,\"105\":1,\"106\":2,\"122\":7,\"167\":1}}],[\"provider\",{\"1\":{\"68\":2,\"78\":1}}],[\"propertysource\",{\"1\":{\"44\":1}}],[\"properties格式配置\",{\"1\":{\"205\":1}}],[\"properties\",{\"0\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1},\"1\":{\"14\":1,\"20\":1,\"52\":1,\"58\":1,\"64\":1,\"94\":1,\"192\":1,\"227\":1}}],[\"profiles\",{\"1\":{\"13\":1,\"32\":2,\"57\":1}}],[\"other\",{\"0\":{\"266\":1}}],[\"otel\",{\"1\":{\"258\":1}}],[\"out\",{\"1\":{\"240\":2}}],[\"oom\",{\"1\":{\"141\":1,\"254\":1}}],[\"optional\",{\"1\":{\"227\":1}}],[\"optimize\",{\"0\":{\"152\":1,\"155\":1,\"159\":1,\"163\":1,\"168\":1,\"173\":1,\"177\":1,\"181\":1,\"185\":1,\"189\":1,\"194\":1,\"199\":1}}],[\"ops\",{\"1\":{\"101\":1}}],[\"opens\",{\"1\":{\"243\":1}}],[\"opentelemetry<\",{\"1\":{\"259\":2}}],[\"opentelemetry\",{\"1\":{\"179\":1,\"258\":1}}],[\"opentelemetrywrapper\",{\"1\":{\"103\":1,\"162\":1,\"258\":1,\"259\":1}}],[\"openjdk\",{\"1\":{\"100\":2}}],[\"openid\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"158\":1}}],[\"or\",{\"1\":{\"252\":2}}],[\"org\",{\"1\":{\"90\":1,\"92\":1,\"111\":6,\"178\":1,\"225\":6,\"231\":7,\"256\":1,\"259\":4}}],[\"ordereddtpexecutor\",{\"1\":{\"103\":1,\"179\":1,\"187\":1,\"239\":3,\"249\":1}}],[\"ordered\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"239\":2,\"249\":1,\"250\":1}}],[\"ons\",{\"1\":{\"84\":1}}],[\"onapplicationevent\",{\"1\":{\"14\":1}}],[\"okhttpclient\",{\"1\":{\"80\":1}}],[\"okhttpclienttp=executorwrapper\",{\"1\":{\"80\":1}}],[\"okhttpclienttp\",{\"1\":{\"80\":2}}],[\"okhttp3tp\",{\"1\":{\"80\":2}}],[\"okhttp3<\",{\"1\":{\"80\":2}}],[\"okhttp3\",{\"0\":{\"79\":1},\"1\":{\"80\":6,\"94\":1,\"95\":1,\"103\":1,\"151\":1,\"175\":1,\"187\":1}}],[\"object>\",{\"1\":{\"14\":1}}],[\"override\",{\"1\":{\"14\":2,\"111\":2,\"225\":6,\"231\":6,\"256\":1,\"259\":3}}],[\"采用时间轮处理任务执行超时逻辑\",{\"1\":{\"223\":1}}],[\"采用时间轮处理任务排队超时逻辑\",{\"1\":{\"223\":1}}],[\"采用\",{\"1\":{\"189\":1}}],[\"采用监控门面\",{\"1\":{\"105\":1}}],[\"采用默认值的可以不配置该项\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"250\":1}}],[\"采集器\",{\"1\":{\"111\":1}}],[\"采集指标\",{\"1\":{\"106\":1,\"109\":1,\"122\":1}}],[\"采集指标数据\",{\"1\":{\"94\":1}}],[\"采集类型\",{\"0\":{\"104\":1,\"105\":1},\"1\":{\"105\":1}}],[\"采集类型非logging不用配置\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"都有默认值\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"250\":1}}],[\"任务要实现ordered接口\",{\"1\":{\"239\":1}}],[\"任务总数\",{\"1\":{\"225\":1}}],[\"任务提交时用\",{\"1\":{\"223\":1}}],[\"任务包装器\",{\"0\":{\"258\":1},\"1\":{\"196\":2,\"258\":1}}],[\"任务包装器名称\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"233\":1,\"259\":1}}],[\"任务包装\",{\"0\":{\"257\":1},\"1\":{\"103\":1,\"157\":1}}],[\"任务增强\",{\"1\":{\"103\":1}}],[\"任务维度\",{\"1\":{\"103\":1}}],[\"任务执行或等待超时报警\",{\"1\":{\"103\":1}}],[\"任务执行超时监控告警\",{\"1\":{\"210\":1}}],[\"任务执行超时\",{\"1\":{\"183\":1}}],[\"任务执行超时阈值\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"任务执行超时告警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"94\":1,\"223\":2}}],[\"任务等待超时告警\",{\"1\":{\"94\":1}}],[\"任务在队列等待超时阈值\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"任务队列\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"任务排队超时告警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"223\":2}}],[\"任务超时报警\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"意思是活性达到70\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"意思是队列使用率达到70\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"7\",{\"0\":{\"160\":1,\"200\":1},\"1\":{\"137\":1,\"156\":1,\"157\":1,\"162\":1,\"194\":1,\"195\":1}}],[\"77\",{\"1\":{\"101\":1}}],[\"78\",{\"1\":{\"101\":1}}],[\"789789\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"75\",{\"1\":{\"101\":1}}],[\"7108551236609114149\",{\"1\":{\"200\":1}}],[\"71\",{\"1\":{\"101\":1}}],[\"70\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"告警间隔内多次触发不会发送告警通知\",{\"1\":{\"223\":5}}],[\"告警间隔时间\",{\"1\":{\"223\":1}}],[\"告警类型\",{\"0\":{\"223\":1}}],[\"告警类型新增邮件告警渠道\",{\"1\":{\"191\":1}}],[\"告警平台\",{\"1\":{\"214\":1}}],[\"告警平台支持企微\",{\"1\":{\"214\":1}}],[\"告警平台配置增加\",{\"1\":{\"161\":1}}],[\"告警项自定义配置\",{\"1\":{\"201\":1}}],[\"告警信息扩展\",{\"0\":{\"230\":1,\"231\":1}}],[\"告警信息同时会高亮与该告警项相关的字段\",{\"1\":{\"223\":1}}],[\"告警信息优化\",{\"1\":{\"177\":1}}],[\"告警信息里添加打印tid\",{\"1\":{\"183\":1}}],[\"告警信息里添加系统负载\",{\"1\":{\"171\":1}}],[\"告警信息里新增堆内存占比相关信息\",{\"1\":{\"166\":1}}],[\"告警触发时间\",{\"1\":{\"119\":1}}],[\"告警级别\",{\"1\":{\"119\":1}}],[\"告警级别为严重告警\",{\"1\":{\"118\":1}}],[\"告警目标对象\",{\"1\":{\"119\":1}}],[\"告警接收人\",{\"1\":{\"118\":1}}],[\"告警阈值\",{\"1\":{\"118\":1,\"223\":1}}],[\"告警通知\",{\"1\":{\"113\":1,\"118\":2}}],[\"告警\",{\"1\":{\"4\":2,\"11\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"120\":1,\"155\":1,\"175\":1,\"200\":1}}],[\"告警渠道\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"变更通知\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"rlpadadtcugh4152e\",{\"1\":{\"227\":1}}],[\"ruoan777\",{\"1\":{\"181\":2}}],[\"runs\",{\"1\":{\"239\":2}}],[\"runnable\",{\"1\":{\"98\":2,\"157\":1,\"256\":1,\"259\":12}}],[\"running\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"118\":2,\"119\":1}}],[\"run\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"118\":2,\"119\":2,\"120\":1,\"175\":1,\"223\":2,\"247\":1,\"259\":4}}],[\"runtimeoutcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"runtimeout=200\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"runtimeout=300\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"runtimeout\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"223\":1}}],[\"r\",{\"1\":{\"98\":2,\"256\":1}}],[\"rocketmqtp\",{\"1\":{\"84\":6}}],[\"rocketmq<\",{\"1\":{\"84\":2}}],[\"rocketmq\",{\"0\":{\"83\":1},\"1\":{\"83\":1,\"84\":6,\"94\":1,\"95\":1,\"103\":1,\"158\":1,\"175\":1,\"179\":1,\"187\":1,\"201\":1}}],[\"root\",{\"1\":{\"57\":1,\"64\":1}}],[\"rabbitmqtp\",{\"1\":{\"82\":1}}],[\"rabbitmq<\",{\"1\":{\"82\":2}}],[\"rabbitmq\",{\"0\":{\"81\":1},\"1\":{\"82\":5,\"94\":1,\"95\":1,\"103\":1,\"254\":1}}],[\"r=\",{\"1\":{\"74\":1}}],[\"rpc\",{\"1\":{\"66\":2,\"187\":3}}],[\"register\",{\"1\":{\"253\":1}}],[\"registry\",{\"1\":{\"122\":1}}],[\"renbiao002\",{\"1\":{\"196\":1}}],[\"reactive\",{\"1\":{\"196\":1}}],[\"refactor\",{\"0\":{\"164\":1,\"169\":1,\"193\":1,\"198\":1,\"203\":1,\"207\":1}}],[\"refreshed\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"refresher\",{\"1\":{\"14\":1,\"169\":1}}],[\"refresh\",{\"1\":{\"14\":5,\"32\":2,\"38\":1,\"51\":5}}],[\"redick01\",{\"0\":{\"125\":1},\"1\":{\"179\":1,\"194\":1,\"196\":3}}],[\"redis<\",{\"1\":{\"233\":2}}],[\"redis\",{\"1\":{\"95\":1,\"151\":2,\"196\":1,\"233\":2}}],[\"resource\",{\"1\":{\"240\":1,\"252\":1}}],[\"resources\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"reserved=0\",{\"1\":{\"74\":1}}],[\"reservedthreadexecutor\",{\"1\":{\"74\":1}}],[\"related\",{\"1\":{\"111\":1,\"225\":2,\"231\":1,\"259\":1}}],[\"release\",{\"1\":{\"33\":1}}],[\"remote\",{\"1\":{\"253\":1}}],[\"remoting\",{\"1\":{\"108\":1}}],[\"remaining\",{\"1\":{\"108\":1}}],[\"return\",{\"1\":{\"14\":1,\"111\":1,\"225\":5,\"231\":10,\"239\":16,\"259\":2}}],[\"rejecttype=callerrunspolicy\",{\"1\":{\"253\":1}}],[\"rejectcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"rejecthandlername\",{\"1\":{\"107\":2,\"116\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"256\":1}}],[\"rejectedexecution\",{\"1\":{\"256\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"98\":2,\"223\":1,\"239\":2,\"256\":2}}],[\"rejectedaware\",{\"1\":{\"223\":1}}],[\"rejectedhandlertype=callerrunspolicy\",{\"1\":{\"5\":2,\"12\":2,\"18\":2,\"25\":2,\"31\":2,\"37\":2,\"43\":2,\"50\":2,\"55\":2,\"56\":1,\"61\":2,\"63\":1}}],[\"rejectedhandlertype\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"157\":1,\"247\":1,\"250\":1}}],[\"reject\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"108\":2,\"175\":1,\"247\":1,\"256\":1}}],[\"receivers=123456\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"receivers=18888888888\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"receivers=test1\",{\"1\":{\"5\":2,\"12\":2,\"18\":2,\"25\":2,\"31\":2,\"37\":2,\"43\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"63\":2}}],[\"receivers\",{\"1\":{\"4\":4,\"11\":4,\"19\":4,\"24\":4,\"30\":4,\"36\":4,\"42\":4,\"49\":4,\"62\":4,\"225\":3,\"235\":1}}],[\"wrap\",{\"1\":{\"259\":1}}],[\"wrapper\",{\"1\":{\"158\":1,\"259\":4}}],[\"warn\",{\"1\":{\"256\":1}}],[\"wait\",{\"1\":{\"108\":1}}],[\"waittaskcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"waitfortaskstocompleteonshutdown=true\",{\"1\":{\"5\":2,\"12\":2,\"18\":2,\"25\":2,\"31\":2,\"37\":2,\"43\":2,\"50\":2,\"55\":2,\"56\":1,\"61\":2,\"63\":1,\"168\":1}}],[\"waitfortaskstocompleteonshutdown\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"247\":1}}],[\"workqueue\",{\"1\":{\"239\":1}}],[\"wuhui\",{\"1\":{\"169\":1}}],[\"windsearcher的贡献\",{\"1\":{\"183\":2,\"184\":2,\"185\":1}}],[\"windsearcher\",{\"0\":{\"129\":1},\"1\":{\"175\":1}}],[\"when\",{\"1\":{\"51\":1}}],[\"www\",{\"1\":{\"6\":1}}],[\"wenpan的贡献\",{\"1\":{\"183\":1}}],[\"weibo\",{\"1\":{\"78\":1}}],[\"webserver线程池配置\",{\"1\":{\"92\":1}}],[\"webserver\",{\"1\":{\"90\":1,\"140\":1,\"179\":1,\"196\":1}}],[\"webserver<\",{\"1\":{\"74\":2,\"90\":2,\"92\":2}}],[\"web\",{\"1\":{\"74\":1,\"90\":1,\"92\":1,\"95\":1,\"116\":1,\"122\":1}}],[\"weberver线程池配置\",{\"1\":{\"74\":1}}],[\"webhook\",{\"1\":{\"4\":3,\"5\":3,\"11\":3,\"12\":3,\"18\":3,\"24\":3,\"25\":3,\"30\":3,\"31\":3,\"36\":3,\"37\":3,\"42\":3,\"43\":3,\"49\":3,\"50\":3,\"55\":3,\"61\":3,\"118\":1,\"161\":1,\"235\":1}}],[\"wechat\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"72\":3}}],[\"v1\",{\"0\":{\"149\":1,\"153\":1,\"156\":1,\"160\":1,\"165\":1,\"170\":1,\"174\":1,\"178\":1,\"182\":1,\"186\":1,\"190\":1,\"195\":1,\"200\":1,\"204\":1,\"209\":1,\"211\":1,\"213\":1},\"1\":{\"103\":1,\"149\":2,\"195\":1}}],[\"vm\",{\"1\":{\"100\":1}}],[\"value\",{\"1\":{\"44\":1,\"98\":1}}],[\"value配置项作为yaml格式配置\",{\"1\":{\"26\":1}}],[\"variablelinkedblockingqueue\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"107\":1,\"157\":1,\"175\":1,\"247\":1,\"254\":2}}],[\"void\",{\"1\":{\"14\":4,\"98\":8,\"111\":1,\"225\":1,\"240\":2,\"256\":1,\"259\":1}}],[\"version>\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"q\",{\"0\":{\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1}}],[\"qps\",{\"1\":{\"101\":5,\"144\":2}}],[\"q=0\",{\"1\":{\"74\":1}}],[\"qtp32153965\",{\"1\":{\"74\":1}}],[\"query\",{\"1\":{\"231\":2}}],[\"queueremainingcapacity\",{\"1\":{\"107\":4,\"116\":1}}],[\"queuesize\",{\"1\":{\"107\":4,\"116\":1,\"223\":1}}],[\"queuedthreadpool\",{\"1\":{\"74\":1}}],[\"queued\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1}}],[\"queuecapacity=200\",{\"1\":{\"253\":1}}],[\"queuecapacity=2000\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"queuecapacity\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"107\":4,\"116\":1,\"157\":4,\"223\":1,\"239\":2,\"247\":3,\"250\":1}}],[\"queue\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"108\":4,\"175\":1,\"239\":1,\"247\":1}}],[\"queuetimeoutcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"queuetimeout=100\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"queuetimeout=300\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"queuetimeout\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"223\":1,\"247\":1}}],[\"queuetype=taskqueue\",{\"1\":{\"253\":1}}],[\"queuetype=variablelinkedblockingqueue\",{\"1\":{\"5\":2,\"12\":2,\"18\":2,\"25\":2,\"31\":2,\"37\":2,\"43\":2,\"50\":2,\"55\":2,\"56\":1,\"61\":2,\"63\":1}}],[\"queuetype\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"107\":4,\"116\":1,\"157\":1,\"247\":1}}],[\"quick\",{\"1\":{\"6\":1}}],[\"qq\",{\"1\":{\"4\":2,\"5\":2,\"6\":1,\"11\":2,\"12\":2,\"18\":2,\"19\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"62\":2,\"63\":2,\"227\":2}}],[\">监控详情图标\",{\"1\":{\"117\":1}}],[\">\",{\"1\":{\"4\":4,\"11\":4,\"24\":4,\"30\":4,\"36\":4,\"42\":4,\"49\":4,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"117\":3,\"118\":12,\"240\":2,\"247\":2}}],[\"guide\",{\"0\":{\"262\":1}}],[\"guozi\",{\"1\":{\"162\":1}}],[\"g=\",{\"1\":{\"231\":1}}],[\"gson\",{\"1\":{\"179\":1}}],[\"gitee\",{\"1\":{\"152\":1,\"154\":1,\"157\":1,\"158\":1,\"217\":1,\"221\":1,\"253\":1}}],[\"github\",{\"1\":{\"70\":1,\"120\":4,\"150\":1,\"151\":5,\"152\":2,\"157\":4,\"158\":6,\"217\":1,\"221\":1,\"253\":1}}],[\"gb\",{\"1\":{\"116\":2}}],[\"gettaskcount\",{\"1\":{\"256\":1}}],[\"gettraceinfo\",{\"1\":{\"231\":2}}],[\"getlargestpoolsize\",{\"1\":{\"256\":1}}],[\"getpoolsize\",{\"1\":{\"256\":1}}],[\"getexecutor\",{\"1\":{\"252\":1}}],[\"getextinfo\",{\"1\":{\"231\":3}}],[\"getmemorymetrics\",{\"1\":{\"231\":2}}],[\"getmaximumpoolsize\",{\"1\":{\"98\":1,\"256\":1}}],[\"getkibanaurl\",{\"1\":{\"231\":2}}],[\"getkeepalivetime\",{\"1\":{\"98\":1}}],[\"getcompletedtaskcount\",{\"1\":{\"256\":1}}],[\"getcolors\",{\"1\":{\"225\":2,\"231\":1}}],[\"getcorepoolsize\",{\"1\":{\"98\":1,\"256\":1}}],[\"getactivecount\",{\"1\":{\"256\":1}}],[\"getalarmtemplate\",{\"1\":{\"225\":2,\"231\":1}}],[\"getasyncsenderexecutor\",{\"1\":{\"158\":1}}],[\"getnoticetemplate\",{\"1\":{\"225\":2,\"231\":1}}],[\"getname\",{\"1\":{\"151\":1,\"239\":3}}],[\"getsecret\",{\"1\":{\"225\":1}}],[\"getreceivers\",{\"1\":{\"225\":1}}],[\"getrejectedexecutionhandler\",{\"1\":{\"98\":1}}],[\"getqueue\",{\"1\":{\"98\":1}}],[\"get\",{\"1\":{\"98\":1,\"152\":1,\"218\":1,\"231\":2}}],[\"getdtpexecutor\",{\"1\":{\"94\":1,\"240\":1}}],[\"grafana\",{\"1\":{\"94\":2,\"103\":1,\"122\":1,\"171\":1}}],[\"grpctp\",{\"1\":{\"70\":2}}],[\"grpc<\",{\"1\":{\"70\":2}}],[\"grpc\",{\"0\":{\"69\":1},\"1\":{\"51\":1,\"70\":7,\"94\":1,\"95\":1,\"103\":1,\"151\":2,\"191\":1}}],[\"groupid\",{\"1\":{\"178\":1}}],[\"groupid>\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"122\":1,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"groups\",{\"1\":{\"51\":1}}],[\"group\",{\"1\":{\"32\":2,\"38\":2,\"51\":1,\"64\":1,\"84\":4}}],[\"galaxyconfigevent\",{\"1\":{\"14\":2}}],[\"galaxyrefresher\",{\"1\":{\"14\":3}}],[\"globalexecutorprops\",{\"1\":{\"4\":1,\"5\":26,\"11\":1,\"12\":26,\"18\":26,\"19\":1,\"24\":1,\"25\":26,\"30\":1,\"31\":26,\"36\":1,\"37\":26,\"42\":1,\"43\":26,\"49\":1,\"50\":26,\"55\":26,\"61\":26,\"62\":1,\"157\":3,\"247\":2}}],[\"收件人邮箱\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"e\",{\"1\":{\"256\":11}}],[\"eg\",{\"1\":{\"227\":1}}],[\"elk\",{\"1\":{\"177\":1}}],[\"eureka\",{\"1\":{\"122\":1}}],[\"esclient\",{\"1\":{\"111\":7}}],[\"escollector\",{\"1\":{\"111\":5}}],[\"es\",{\"1\":{\"111\":3}}],[\"etcd<\",{\"1\":{\"16\":2}}],[\"etcd\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"20\":1,\"94\":1,\"103\":1,\"152\":1,\"196\":1}}],[\"encoding\",{\"1\":{\"227\":1}}],[\"env\",{\"1\":{\"161\":1}}],[\"environmentchangeevent\",{\"1\":{\"169\":1}}],[\"environment\",{\"1\":{\"14\":3}}],[\"enhanced\",{\"1\":{\"141\":1}}],[\"enhancedqueueexecutor\",{\"1\":{\"140\":4}}],[\"entity\",{\"1\":{\"111\":1}}],[\"end\",{\"1\":{\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2}}],[\"endpoint\",{\"0\":{\"108\":1},\"1\":{\"26\":1,\"94\":1,\"103\":1,\"105\":2,\"116\":1,\"199\":1}}],[\"endpoints\",{\"1\":{\"20\":1,\"116\":1,\"122\":1}}],[\"enable\",{\"1\":{\"20\":1,\"38\":2,\"227\":1}}],[\"enabledynamictp\",{\"1\":{\"252\":1}}],[\"enabledynamictp决定是否使用dtp\",{\"1\":{\"185\":1}}],[\"enabled=true\",{\"1\":{\"5\":7,\"12\":7,\"18\":7,\"25\":7,\"31\":7,\"37\":7,\"43\":7,\"50\":7,\"55\":7,\"56\":7,\"61\":7,\"63\":7,\"66\":3,\"68\":3,\"70\":6,\"72\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3}}],[\"enabledcollect=true\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"168\":1}}],[\"enabledcollect\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1,\"122\":1}}],[\"enabled\",{\"1\":{\"4\":7,\"6\":1,\"11\":7,\"13\":1,\"19\":7,\"24\":7,\"30\":7,\"32\":1,\"36\":7,\"42\":7,\"49\":7,\"51\":2,\"57\":1,\"62\":7,\"66\":6,\"68\":6,\"70\":6,\"72\":6,\"74\":6,\"76\":6,\"78\":6,\"80\":6,\"82\":6,\"84\":6,\"86\":6,\"88\":6,\"90\":6,\"92\":6,\"122\":1,\"233\":1}}],[\"event\",{\"1\":{\"14\":2}}],[\"eventtype\",{\"1\":{\"14\":2}}],[\"exhausted\",{\"1\":{\"256\":1}}],[\"exec\",{\"1\":{\"240\":1}}],[\"execute方法\",{\"1\":{\"154\":1}}],[\"execute\",{\"1\":{\"141\":2,\"223\":1,\"240\":2}}],[\"executoradapter\",{\"1\":{\"179\":1}}],[\"executorbenchmark\",{\"1\":{\"101\":1}}],[\"executor=com\",{\"1\":{\"78\":1}}],[\"executor=java\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"executorwrapper\",{\"1\":{\"72\":1,\"167\":1}}],[\"executor\",{\"1\":{\"72\":1,\"74\":2,\"90\":2,\"92\":2,\"151\":2,\"167\":1,\"253\":1,\"256\":1}}],[\"executortype=common\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"executortype\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"157\":2,\"247\":1,\"250\":2}}],[\"executorserviceornull\",{\"1\":{\"151\":1}}],[\"executorservice\",{\"1\":{\"151\":1}}],[\"executors\",{\"1\":{\"4\":1,\"5\":19,\"11\":1,\"12\":19,\"18\":19,\"19\":1,\"24\":1,\"25\":19,\"30\":1,\"31\":19,\"36\":1,\"37\":19,\"42\":1,\"43\":19,\"49\":1,\"50\":19,\"55\":19,\"56\":40,\"61\":19,\"62\":1,\"63\":40,\"66\":2,\"68\":2,\"70\":2,\"76\":1,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"156\":1,\"157\":4,\"233\":1,\"239\":1,\"247\":1,\"250\":1,\"253\":2,\"259\":1}}],[\"extern\",{\"1\":{\"259\":1}}],[\"extension\",{\"1\":{\"32\":3,\"95\":1,\"141\":1,\"157\":1,\"196\":1,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"259\":6}}],[\"extends\",{\"1\":{\"14\":2,\"111\":1,\"225\":2,\"231\":1,\"256\":1}}],[\"extinfo\",{\"1\":{\"231\":3}}],[\"export\",{\"1\":{\"122\":1}}],[\"exposure\",{\"1\":{\"116\":1,\"122\":1}}],[\"example\",{\"1\":{\"95\":1,\"111\":2,\"163\":1,\"168\":1,\"199\":1,\"225\":3,\"231\":1,\"240\":1,\"259\":2}}],[\"eagerdtpexecutor\",{\"1\":{\"103\":1,\"212\":1,\"239\":2,\"249\":1}}],[\"eager\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"157\":1,\"172\":1,\"239\":3,\"247\":1,\"249\":2,\"250\":1}}],[\"email<\",{\"1\":{\"227\":2}}],[\"email\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"72\":3,\"227\":3}}],[\"428\",{\"1\":{\"158\":1}}],[\"420\",{\"1\":{\"158\":1}}],[\"439\",{\"1\":{\"158\":1}}],[\"437\",{\"1\":{\"158\":1}}],[\"431\",{\"1\":{\"157\":1}}],[\"417\",{\"1\":{\"158\":1}}],[\"41844\",{\"1\":{\"101\":1}}],[\"443\",{\"1\":{\"157\":1}}],[\"444\",{\"1\":{\"116\":1}}],[\"493\",{\"1\":{\"154\":1}}],[\"498\",{\"1\":{\"152\":1}}],[\"495\",{\"1\":{\"151\":1}}],[\"465\",{\"1\":{\"227\":1}}],[\"46\",{\"1\":{\"101\":1}}],[\"481\",{\"1\":{\"158\":1}}],[\"485\",{\"1\":{\"154\":1}}],[\"48\",{\"1\":{\"101\":1}}],[\"474\",{\"1\":{\"157\":1}}],[\"472\",{\"1\":{\"157\":1}}],[\"47\",{\"1\":{\"51\":1}}],[\"4\",{\"0\":{\"174\":1,\"209\":1},\"1\":{\"4\":1,\"5\":3,\"11\":1,\"12\":3,\"18\":3,\"19\":1,\"24\":1,\"25\":3,\"30\":1,\"31\":3,\"33\":1,\"36\":1,\"37\":3,\"42\":1,\"43\":3,\"49\":1,\"50\":3,\"55\":3,\"56\":3,\"61\":3,\"62\":1,\"63\":3,\"94\":1,\"103\":1,\"107\":2,\"116\":1,\"239\":4,\"244\":1,\"252\":1}}],[\"404\",{\"1\":{\"260\":1}}],[\"400\",{\"1\":{\"107\":1}}],[\"4000\",{\"1\":{\"101\":1,\"250\":1}}],[\"40681\",{\"1\":{\"101\":1}}],[\"40\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1,\"157\":2,\"239\":1,\"247\":2}}],[\"4bd\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1,\"225\":1,\"235\":1}}],[\"base\",{\"1\":{\"243\":1}}],[\"bantanger\",{\"1\":{\"169\":1}}],[\"buildpriority\",{\"1\":{\"239\":1}}],[\"buildscheduled\",{\"1\":{\"239\":1}}],[\"buildordered\",{\"1\":{\"239\":1}}],[\"builddynamic\",{\"1\":{\"239\":2}}],[\"bug\",{\"1\":{\"156\":1}}],[\"bugfix\",{\"0\":{\"151\":1,\"154\":1,\"158\":1,\"162\":1,\"167\":1,\"172\":1,\"176\":1,\"180\":1,\"184\":1,\"188\":1,\"192\":1,\"197\":1,\"202\":1,\"206\":1}}],[\"brendanv\",{\"1\":{\"179\":1}}],[\"brpcservertp\",{\"1\":{\"66\":1}}],[\"brpctp\",{\"1\":{\"66\":1}}],[\"brpc<\",{\"1\":{\"66\":2}}],[\"brpc\",{\"0\":{\"65\":1},\"1\":{\"66\":4,\"76\":1,\"94\":1,\"95\":1,\"103\":1,\"187\":1}}],[\"by\",{\"0\":{\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1}}],[\"b03\",{\"1\":{\"100\":1}}],[\"bit\",{\"1\":{\"100\":1}}],[\"biz\",{\"1\":{\"66\":2}}],[\"biz1\",{\"1\":{\"66\":1}}],[\"blocking\",{\"1\":{\"239\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"98\":1}}],[\"blog\",{\"1\":{\"6\":1}}],[\"b\",{\"1\":{\"94\":6}}],[\"been\",{\"1\":{\"253\":1}}],[\"before\",{\"1\":{\"259\":1}}],[\"beforereject\",{\"1\":{\"223\":2}}],[\"beforeexecute\",{\"1\":{\"98\":1,\"223\":3}}],[\"beanpostprocessor\",{\"1\":{\"253\":1}}],[\"bean声明\",{\"1\":{\"239\":6}}],[\"bean\",{\"1\":{\"103\":1,\"139\":1,\"176\":1,\"239\":9,\"254\":2}}],[\"beanname\",{\"1\":{\"80\":1,\"82\":1}}],[\"beta\",{\"1\":{\"33\":1}}],[\"boolean\",{\"1\":{\"14\":1,\"98\":2}}],[\"bootstrap\",{\"0\":{\"13\":1,\"26\":1,\"32\":1,\"51\":1,\"57\":1},\"1\":{\"6\":1,\"38\":1}}],[\"boot\",{\"1\":{\"2\":2,\"16\":2,\"33\":1,\"34\":2,\"40\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":3,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"140\":2,\"157\":1,\"227\":2,\"233\":2,\"235\":2}}],[\"b24a\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"34\",{\"1\":{\"116\":1}}],[\"35\",{\"1\":{\"107\":4}}],[\"35530042\",{\"1\":{\"6\":1}}],[\"33\",{\"1\":{\"101\":1}}],[\"30110\",{\"1\":{\"26\":1}}],[\"300\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"247\":6}}],[\"3a7500\",{\"1\":{\"225\":1,\"235\":1}}],[\"3a750012874bdac5c3d8b69c\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"3a700\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"3\",{\"0\":{\"178\":1,\"211\":1},\"1\":{\"4\":2,\"5\":6,\"11\":2,\"12\":6,\"18\":6,\"19\":2,\"24\":2,\"25\":6,\"30\":2,\"31\":6,\"33\":1,\"36\":2,\"37\":6,\"42\":2,\"43\":6,\"49\":2,\"50\":6,\"55\":6,\"56\":6,\"61\":6,\"62\":2,\"63\":6,\"94\":1,\"103\":1,\"116\":1,\"137\":1,\"151\":2,\"194\":1,\"245\":1,\"247\":1}}],[\"lang=all\",{\"1\":{\"243\":1}}],[\"language\",{\"1\":{\"231\":1}}],[\"lang3\",{\"1\":{\"225\":1,\"231\":2}}],[\"largest\",{\"1\":{\"108\":1,\"256\":1}}],[\"largestpoolsize\",{\"1\":{\"107\":4,\"116\":1}}],[\"lark\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"72\":3}}],[\"lucene\",{\"1\":{\"231\":1}}],[\"lu\",{\"1\":{\"175\":1}}],[\"linked\",{\"1\":{\"239\":1}}],[\"linkedblockingqueue\",{\"1\":{\"107\":1,\"116\":1,\"175\":1,\"254\":1}}],[\"link\",{\"1\":{\"239\":8}}],[\"limiter\",{\"1\":{\"196\":1,\"233\":2}}],[\"liu\",{\"1\":{\"196\":1,\"218\":1}}],[\"liteflowdefaultwhenexecutorbuilder=executorwrapper\",{\"1\":{\"76\":1}}],[\"liteflowdefaultwhenexecutorbuilder\",{\"1\":{\"76\":3,\"157\":1}}],[\"liteflowtp\",{\"1\":{\"76\":6,\"157\":2}}],[\"liteflow<\",{\"1\":{\"76\":2,\"157\":1}}],[\"liteflow\",{\"0\":{\"75\":1},\"1\":{\"76\":1,\"103\":1,\"157\":1}}],[\"liveness\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"247\":1}}],[\"lombok\",{\"1\":{\"259\":1}}],[\"local\",{\"1\":{\"253\":1}}],[\"local升级到2\",{\"1\":{\"208\":1}}],[\"localhost\",{\"1\":{\"6\":2,\"7\":1,\"32\":1,\"38\":1,\"119\":1}}],[\"long\",{\"1\":{\"98\":2}}],[\"log\",{\"1\":{\"38\":1,\"107\":1,\"256\":1,\"259\":2}}],[\"logstash\",{\"1\":{\"231\":1}}],[\"logs\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"19\":1,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":1,\"61\":2,\"62\":1,\"63\":1}}],[\"logpath=\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"logpath\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"107\":1}}],[\"logging模块添加log4j2支持\",{\"1\":{\"205\":1}}],[\"logging\",{\"0\":{\"107\":1},\"1\":{\"4\":3,\"5\":3,\"11\":3,\"12\":3,\"18\":3,\"19\":1,\"24\":3,\"25\":3,\"30\":3,\"31\":3,\"36\":3,\"37\":3,\"42\":3,\"43\":3,\"49\":3,\"50\":3,\"55\":3,\"56\":1,\"61\":3,\"62\":1,\"63\":1,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"95\":1,\"105\":2,\"111\":2,\"198\":1}}],[\"uid\",{\"1\":{\"249\":1}}],[\"utf\",{\"1\":{\"227\":1}}],[\"util\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"111\":1,\"256\":1}}],[\"uce\",{\"1\":{\"218\":1}}],[\"uv\",{\"1\":{\"217\":1}}],[\"use\",{\"0\":{\"268\":1}}],[\"username\",{\"1\":{\"158\":1,\"227\":1}}],[\"user\",{\"1\":{\"1\":1,\"4\":2,\"5\":2,\"6\":3,\"8\":1,\"11\":2,\"12\":2,\"13\":2,\"18\":2,\"19\":1,\"20\":2,\"21\":1,\"24\":2,\"25\":2,\"26\":1,\"27\":1,\"30\":2,\"31\":2,\"32\":1,\"33\":1,\"36\":2,\"37\":2,\"38\":2,\"42\":2,\"43\":2,\"45\":1,\"49\":2,\"50\":2,\"51\":2,\"55\":2,\"56\":63,\"57\":1,\"61\":2,\"62\":1,\"63\":63,\"64\":2}}],[\"usablememory\",{\"1\":{\"116\":1}}],[\"unnamed\",{\"1\":{\"243\":1}}],[\"unknown\",{\"1\":{\"231\":2}}],[\"unit\",{\"1\":{\"98\":2}}],[\"undertow线程池参数篇\",{\"1\":{\"124\":1}}],[\"undertowtp\",{\"1\":{\"92\":3,\"247\":1}}],[\"undertow\",{\"0\":{\"91\":1,\"140\":1},\"1\":{\"92\":5,\"94\":1,\"95\":1,\"103\":1,\"140\":2,\"159\":1,\"175\":1,\"179\":1,\"181\":1,\"184\":1,\"199\":1,\"201\":1,\"214\":1}}],[\"url\",{\"1\":{\"78\":1}}],[\"urlkey=0d944ae7\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"urlkey=f80dad441fcd655438f4a08dcd6a\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"urlkey=3a700\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"urlkey\",{\"1\":{\"4\":3,\"11\":3,\"19\":3,\"24\":3,\"30\":3,\"36\":3,\"42\":3,\"49\":3,\"62\":3,\"235\":1}}],[\"14\",{\"1\":{\"218\":1}}],[\"1500+\",{\"1\":{\"132\":1,\"217\":1}}],[\"15\",{\"1\":{\"107\":4,\"218\":1,\"239\":1}}],[\"192\",{\"1\":{\"122\":1}}],[\"19\",{\"1\":{\"101\":1}}],[\"19f57a1\",{\"1\":{\"72\":1}}],[\"1acd1f1\",{\"1\":{\"84\":1}}],[\"1666666666\",{\"1\":{\"225\":1}}],[\"168\",{\"1\":{\"122\":1}}],[\"16521\",{\"1\":{\"101\":1}}],[\"16477\",{\"1\":{\"101\":1}}],[\"16\",{\"1\":{\"74\":1}}],[\"162475a\",{\"1\":{\"66\":1,\"76\":1}}],[\"1eaa16d\",{\"1\":{\"74\":1}}],[\"1b3960b\",{\"1\":{\"68\":1}}],[\"177\",{\"1\":{\"107\":2}}],[\"17ce31c\",{\"1\":{\"92\":1}}],[\"174b233\",{\"1\":{\"78\":1}}],[\"176b7d8\",{\"1\":{\"70\":2}}],[\"17\",{\"1\":{\"66\":1,\"76\":1,\"107\":4,\"119\":1,\"218\":1}}],[\"188888888\",{\"1\":{\"225\":1}}],[\"18888888888\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"183\",{\"1\":{\"51\":1}}],[\"1157\",{\"1\":{\"120\":2}}],[\"114579e\",{\"1\":{\"90\":1}}],[\"111\",{\"1\":{\"51\":1}}],[\"11\",{\"1\":{\"33\":1,\"107\":4}}],[\"113985623\",{\"1\":{\"6\":1}}],[\"1024\",{\"1\":{\"231\":2}}],[\"102962\",{\"1\":{\"101\":1}}],[\"104\",{\"1\":{\"122\":1}}],[\"10w\",{\"1\":{\"101\":1,\"144\":1}}],[\"10\",{\"1\":{\"33\":1,\"74\":1,\"76\":1,\"90\":1,\"92\":1,\"157\":4,\"239\":1,\"247\":2,\"250\":1}}],[\"1000\",{\"1\":{\"157\":2,\"217\":1,\"231\":1,\"247\":2}}],[\"100w+\",{\"1\":{\"101\":1,\"144\":1}}],[\"100\",{\"1\":{\"4\":4,\"11\":4,\"19\":4,\"24\":4,\"30\":4,\"36\":4,\"42\":4,\"49\":4,\"62\":4,\"66\":6,\"68\":6,\"70\":6,\"72\":6,\"74\":6,\"76\":5,\"78\":6,\"80\":6,\"82\":6,\"84\":4,\"86\":6,\"88\":6,\"90\":6,\"92\":6,\"101\":1,\"107\":3,\"223\":2,\"247\":2}}],[\"1287\",{\"1\":{\"225\":1,\"235\":1}}],[\"124662\",{\"1\":{\"108\":1}}],[\"12e242d\",{\"1\":{\"74\":1}}],[\"12\",{\"1\":{\"33\":1,\"108\":2,\"185\":1,\"208\":1,\"218\":3}}],[\"120\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"233\":1}}],[\"123456\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"227\":1}}],[\"127\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"13\":1,\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1}}],[\"1\",{\"0\":{\"153\":2,\"156\":1,\"160\":1,\"165\":2,\"170\":1,\"174\":1,\"178\":1,\"182\":1,\"186\":1},\"1\":{\"4\":2,\"5\":10,\"11\":2,\"12\":10,\"13\":1,\"18\":10,\"19\":2,\"20\":1,\"24\":2,\"25\":10,\"26\":1,\"30\":2,\"31\":10,\"36\":2,\"37\":10,\"42\":2,\"43\":10,\"49\":2,\"50\":10,\"55\":10,\"56\":12,\"57\":1,\"61\":10,\"62\":2,\"63\":12,\"64\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":2,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"100\":1,\"101\":1,\"107\":2,\"111\":2,\"116\":2,\"137\":1,\"138\":1,\"149\":1,\"151\":1,\"156\":10,\"157\":4,\"166\":3,\"175\":1,\"200\":1,\"217\":2,\"225\":4,\"231\":2,\"233\":2,\"239\":1,\"242\":1,\"245\":1,\"247\":2,\"253\":1,\"259\":2}}],[\"5发布已经有差不多2个月时间\",{\"1\":{\"200\":1}}],[\"518\",{\"1\":{\"152\":1}}],[\"516\",{\"1\":{\"151\":1}}],[\"521\",{\"1\":{\"231\":1}}],[\"525\",{\"1\":{\"151\":1}}],[\"520\",{\"1\":{\"151\":1}}],[\"527\",{\"1\":{\"150\":1}}],[\"50\",{\"1\":{\"217\":1}}],[\"502\",{\"1\":{\"151\":1}}],[\"500\",{\"1\":{\"66\":1,\"76\":1,\"217\":1}}],[\"5分钟搞定监控\",{\"0\":{\"114\":1}}],[\"58\",{\"1\":{\"101\":1}}],[\"59\",{\"1\":{\"101\":1}}],[\"5\",{\"0\":{\"170\":1,\"204\":1},\"1\":{\"4\":2,\"5\":3,\"11\":2,\"12\":3,\"18\":3,\"19\":2,\"24\":2,\"25\":3,\"30\":2,\"31\":3,\"36\":2,\"37\":3,\"42\":2,\"43\":3,\"49\":2,\"50\":3,\"55\":3,\"56\":3,\"61\":3,\"62\":2,\"63\":3,\"66\":1,\"68\":1,\"70\":1,\"72\":3,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"94\":1,\"111\":1,\"134\":1,\"157\":1,\"162\":1,\"166\":2,\"194\":1,\"208\":1,\"244\":2,\"249\":1}}],[\"$\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":1,\"31\":1,\"32\":4,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"51\":1,\"55\":1,\"61\":1,\"107\":2}}],[\"默认通知告警是基于单机模式的\",{\"1\":{\"233\":1}}],[\"默认为1\",{\"1\":{\"233\":1}}],[\"默认为\",{\"1\":{\"157\":1}}],[\"默认8080\",{\"1\":{\"117\":1}}],[\"默认0\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2}}],[\"默认3\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"默认false\",{\"1\":{\"4\":3,\"5\":2,\"11\":3,\"12\":2,\"18\":2,\"24\":3,\"25\":2,\"30\":3,\"31\":2,\"36\":3,\"37\":2,\"42\":3,\"43\":2,\"49\":3,\"50\":2,\"55\":2,\"61\":2,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"默认dtp\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认60\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认abortpolicy\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认variablelinkedblockingqueue\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"默认cpu核数\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认1024\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认1\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"250\":1}}],[\"默认120\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"默认阈值10\",{\"1\":{\"4\":3,\"11\":3,\"24\":3,\"30\":3,\"36\":3,\"42\":3,\"49\":3,\"66\":3,\"68\":3,\"70\":3,\"72\":3,\"74\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3,\"90\":3,\"92\":3}}],[\"默认70\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"默认5s\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"默认\",{\"1\":{\"4\":3,\"5\":2,\"11\":3,\"12\":2,\"18\":2,\"24\":3,\"25\":2,\"30\":3,\"31\":2,\"36\":3,\"37\":2,\"42\":3,\"43\":2,\"49\":3,\"50\":2,\"55\":2,\"61\":2,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"105\":1,\"250\":1}}],[\"默认micrometer\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"默认true\",{\"1\":{\"4\":4,\"5\":4,\"11\":4,\"12\":4,\"18\":4,\"24\":4,\"25\":4,\"30\":4,\"31\":4,\"36\":4,\"37\":4,\"42\":4,\"43\":4,\"49\":4,\"50\":4,\"55\":4,\"61\":4}}],[\"ien\",{\"1\":{\"218\":1}}],[\"i54b4r\",{\"1\":{\"206\":1}}],[\"i9d31h\",{\"1\":{\"158\":1}}],[\"iapne8\",{\"1\":{\"157\":1}}],[\"iax904\",{\"1\":{\"154\":1}}],[\"ip\",{\"1\":{\"116\":1}}],[\"iointensiveexecutor\",{\"1\":{\"253\":1}}],[\"io\",{\"1\":{\"98\":1,\"103\":1,\"249\":1}}],[\"i=0\",{\"1\":{\"74\":1}}],[\"index\",{\"1\":{\"231\":1}}],[\"ing\",{\"1\":{\"218\":1}}],[\"instancealreadyexistsexception\",{\"1\":{\"158\":1}}],[\"instanceof\",{\"1\":{\"14\":1}}],[\"inherit\",{\"0\":{\"140\":1}}],[\"include\",{\"1\":{\"116\":1,\"122\":1}}],[\"info\",{\"1\":{\"259\":2}}],[\"inf\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"influxdb\",{\"1\":{\"105\":1}}],[\"introduction\",{\"0\":{\"264\":1}}],[\"int\",{\"1\":{\"98\":4,\"231\":4}}],[\"interval=1\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"interval=120\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":2,\"68\":2,\"70\":4,\"72\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2}}],[\"interval\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"231\":1,\"233\":1,\"247\":6}}],[\"internal\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"105\":1,\"111\":1,\"151\":1}}],[\"inprocesstp\",{\"1\":{\"70\":1}}],[\"inprocesstp=executorwrapper\",{\"1\":{\"70\":1}}],[\"inprocessgrpcserverlifecycle\",{\"1\":{\"70\":1}}],[\"initialized\",{\"1\":{\"253\":1}}],[\"init\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"if\",{\"1\":{\"14\":1,\"231\":2}}],[\"isterminating\",{\"1\":{\"256\":2}}],[\"isterminated\",{\"1\":{\"256\":2}}],[\"isshutdown\",{\"1\":{\"256\":2}}],[\"issue\",{\"1\":{\"135\":1,\"142\":1}}],[\"issues\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1,\"150\":1,\"154\":1,\"157\":5,\"158\":7}}],[\"isblank\",{\"1\":{\"231\":2}}],[\"is\",{\"1\":{\"119\":1,\"256\":1}}],[\"isassignablefrom\",{\"1\":{\"14\":1}}],[\"import\",{\"1\":{\"111\":3,\"225\":2,\"231\":6,\"259\":2}}],[\"implements\",{\"1\":{\"14\":1,\"259\":2}}],[\"image\",{\"1\":{\"7\":6,\"122\":1}}],[\"ids\",{\"1\":{\"38\":1}}],[\"id\",{\"1\":{\"6\":1,\"7\":1,\"169\":1,\"231\":3}}],[\"|\",{\"1\":{\"4\":3,\"5\":3,\"11\":3,\"12\":3,\"18\":3,\"24\":3,\"25\":3,\"30\":3,\"31\":3,\"36\":3,\"37\":3,\"42\":3,\"43\":3,\"49\":3,\"50\":3,\"55\":3,\"61\":3,\"66\":3,\"68\":3,\"70\":3,\"72\":3,\"74\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3,\"90\":3,\"92\":3,\"111\":3,\"253\":63}}],[\"myrunnable\",{\"1\":{\"259\":3}}],[\"mq\",{\"1\":{\"200\":2}}],[\"memory\",{\"1\":{\"239\":1}}],[\"memorymetrics\",{\"1\":{\"231\":4}}],[\"memorysafelinkedblockingqueue\",{\"1\":{\"194\":1,\"196\":1}}],[\"metricscollector\",{\"1\":{\"111\":1}}],[\"metrics\",{\"0\":{\"116\":1},\"1\":{\"107\":4,\"122\":2}}],[\"metadata\",{\"1\":{\"163\":1}}],[\"meta\",{\"1\":{\"6\":1,\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"middleware\",{\"0\":{\"263\":1}}],[\"micormeter以及endpoint三种方式\",{\"1\":{\"214\":1}}],[\"micrometer升级到1\",{\"1\":{\"208\":1}}],[\"micrometer<\",{\"1\":{\"122\":1}}],[\"micrometer\",{\"0\":{\"106\":1},\"1\":{\"4\":2,\"5\":1,\"11\":2,\"12\":1,\"18\":1,\"19\":1,\"24\":2,\"25\":1,\"30\":2,\"31\":1,\"36\":2,\"37\":1,\"42\":2,\"43\":1,\"49\":2,\"50\":1,\"55\":1,\"61\":1,\"62\":1,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"94\":2,\"103\":1,\"105\":3,\"111\":2,\"122\":3}}],[\"mieapp\",{\"1\":{\"187\":1}}],[\"missing\",{\"1\":{\"158\":1}}],[\"mryan\",{\"0\":{\"130\":1}}],[\"mb\",{\"1\":{\"116\":2}}],[\"monitor\",{\"0\":{\"265\":1},\"1\":{\"107\":1,\"111\":2}}],[\"monitorinterval=5\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"monitorinterval\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"111\":1}}],[\"module\",{\"1\":{\"95\":1,\"138\":2,\"149\":1}}],[\"motantp\",{\"1\":{\"78\":6}}],[\"motan<\",{\"1\":{\"78\":2}}],[\"motan\",{\"0\":{\"77\":1},\"1\":{\"78\":5,\"94\":1,\"95\":1,\"103\":1,\"172\":1,\"187\":1}}],[\"msg\",{\"1\":{\"256\":3}}],[\"ms\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2}}],[\"main\",{\"1\":{\"240\":1}}],[\"mail\",{\"1\":{\"227\":3}}],[\"map\",{\"1\":{\"141\":1,\"154\":1,\"237\":1}}],[\"map<object\",{\"1\":{\"14\":1}}],[\"management\",{\"1\":{\"116\":1,\"122\":1}}],[\"maxmemory\",{\"1\":{\"116\":1}}],[\"maximum\",{\"1\":{\"108\":1}}],[\"maximumpoolsize=8\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"maximumpoolsize\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"98\":1,\"107\":4,\"116\":1,\"157\":5,\"223\":1,\"239\":4,\"247\":4,\"250\":1}}],[\"max\",{\"1\":{\"101\":1,\"256\":1}}],[\"maxpoolsize=10\",{\"1\":{\"253\":1}}],[\"maxpoolsize\",{\"1\":{\"66\":2,\"68\":1,\"70\":2,\"72\":2,\"74\":1,\"76\":2,\"78\":1,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":1,\"92\":1}}],[\"maven\",{\"0\":{\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1},\"1\":{\"252\":1}}],[\"maven依赖\",{\"0\":{\"2\":1}}],[\"mdcrunnable\",{\"1\":{\"176\":1}}],[\"mdctaskwrapper\",{\"1\":{\"103\":1,\"196\":1,\"258\":1,\"259\":1}}],[\"mdc\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"19\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2,\"62\":2,\"157\":3,\"176\":1,\"196\":1,\"231\":3,\"233\":1,\"247\":1,\"258\":2,\"259\":1}}],[\"custom\",{\"1\":{\"259\":2}}],[\"customtaskwrapper\",{\"1\":{\"259\":3}}],[\"customlabelvalue\",{\"1\":{\"26\":1}}],[\"customlabel\",{\"1\":{\"26\":1}}],[\"createdynamicfast\",{\"1\":{\"239\":1}}],[\"c5c3d8b69c\",{\"1\":{\"225\":1,\"235\":1}}],[\"c53d8b69c\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"cn\",{\"1\":{\"200\":1,\"253\":1}}],[\"chunhui\",{\"1\":{\"175\":1}}],[\"chenan\",{\"1\":{\"176\":1}}],[\"chenkangning\",{\"1\":{\"173\":1}}],[\"checkstyle\",{\"1\":{\"135\":1,\"189\":1}}],[\"channel\",{\"1\":{\"151\":1}}],[\"changed\",{\"1\":{\"51\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"change\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"247\":1}}],[\"cpu\",{\"1\":{\"98\":1,\"101\":1,\"171\":2,\"249\":1}}],[\"cc\",{\"1\":{\"26\":1}}],[\"cse\",{\"1\":{\"26\":1}}],[\"csdn\",{\"1\":{\"6\":1}}],[\"clusterlimit\",{\"1\":{\"233\":2,\"247\":1}}],[\"clusterlimit=1\",{\"1\":{\"66\":3,\"68\":3,\"70\":6,\"72\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3}}],[\"cluster\",{\"1\":{\"151\":1}}],[\"client\",{\"1\":{\"66\":3,\"151\":1}}],[\"classpath\",{\"1\":{\"44\":1}}],[\"class<\",{\"1\":{\"14\":1}}],[\"class\",{\"0\":{\"140\":1},\"1\":{\"14\":2,\"44\":1,\"76\":1,\"111\":1,\"151\":1,\"225\":3,\"231\":1,\"239\":1,\"256\":1,\"259\":2}}],[\"cloud\",{\"0\":{\"8\":1,\"21\":1,\"27\":1,\"45\":1,\"52\":1},\"1\":{\"9\":2,\"13\":1,\"22\":2,\"26\":1,\"27\":2,\"28\":2,\"32\":3,\"33\":2,\"46\":2,\"51\":1,\"52\":1,\"53\":2,\"57\":1,\"107\":4,\"142\":1,\"169\":1,\"183\":2}}],[\"cancel\",{\"1\":{\"151\":1}}],[\"cannot\",{\"0\":{\"140\":1}}],[\"caller\",{\"1\":{\"239\":2}}],[\"callerrunspolicy\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"107\":2,\"108\":1,\"157\":1,\"176\":1,\"247\":1,\"250\":1}}],[\"call\",{\"1\":{\"108\":1}}],[\"cachingconnectionfactorytp\",{\"1\":{\"82\":1}}],[\"cachingconnectionfactorytp=executorwrapper\",{\"1\":{\"82\":1}}],[\"capacity\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"108\":2,\"143\":1,\"233\":1,\"247\":1,\"254\":2}}],[\"columns\",{\"1\":{\"231\":1}}],[\"collections\",{\"1\":{\"189\":1}}],[\"collector\",{\"1\":{\"111\":4,\"196\":1}}],[\"collectortypes=micrometer\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"collectortypes\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"105\":1,\"111\":1,\"122\":1}}],[\"collect\",{\"1\":{\"111\":2}}],[\"code\",{\"1\":{\"227\":1}}],[\"count>1\",{\"1\":{\"118\":1}}],[\"count\",{\"1\":{\"108\":5,\"118\":1,\"119\":2}}],[\"core\",{\"1\":{\"95\":1,\"108\":1,\"111\":2,\"164\":2,\"193\":1,\"223\":1,\"225\":2,\"227\":1,\"231\":1,\"242\":1,\"256\":2,\"259\":3}}],[\"corepoolsize=2\",{\"1\":{\"253\":1}}],[\"corepoolsize=6\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"corepoolsize为0时\",{\"1\":{\"185\":1}}],[\"corepoolsize\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":3,\"68\":3,\"70\":3,\"72\":3,\"74\":2,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"84\":3,\"86\":3,\"88\":3,\"90\":2,\"92\":2,\"98\":1,\"107\":4,\"116\":1,\"154\":1,\"157\":6,\"239\":5,\"247\":4,\"250\":1}}],[\"constant\",{\"1\":{\"231\":2}}],[\"consumer\",{\"1\":{\"84\":6}}],[\"consul<\",{\"1\":{\"9\":2}}],[\"consul\",{\"0\":{\"8\":1},\"1\":{\"8\":1,\"13\":1,\"94\":1,\"103\":1,\"122\":1}}],[\"contact\",{\"1\":{\"132\":1}}],[\"context\",{\"1\":{\"51\":2}}],[\"content\",{\"1\":{\"14\":1,\"225\":2}}],[\"concurrently\",{\"1\":{\"84\":5}}],[\"concurrent\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"256\":1}}],[\"connect\",{\"1\":{\"57\":1,\"64\":1}}],[\"configcenter\",{\"0\":{\"261\":1}}],[\"configfilechangelistener\",{\"1\":{\"192\":1}}],[\"configfiletypeenum\",{\"1\":{\"14\":1}}],[\"configuration\",{\"1\":{\"138\":1,\"163\":1,\"227\":1,\"239\":1}}],[\"configserver\",{\"1\":{\"56\":62,\"57\":1,\"63\":62,\"64\":1}}],[\"configs\",{\"1\":{\"32\":1,\"122\":2}}],[\"config\",{\"1\":{\"6\":1,\"13\":2,\"20\":2,\"26\":1,\"32\":2,\"33\":1,\"38\":1,\"51\":3,\"57\":1,\"64\":2}}],[\"committer\",{\"0\":{\"134\":1}}],[\"commons\",{\"1\":{\"189\":1,\"225\":1,\"231\":2}}],[\"commonexecutor\",{\"1\":{\"107\":1,\"116\":1,\"253\":1}}],[\"common<\",{\"1\":{\"40\":2}}],[\"common\",{\"1\":{\"4\":3,\"5\":2,\"11\":3,\"12\":2,\"18\":2,\"19\":1,\"24\":3,\"25\":2,\"30\":3,\"31\":2,\"36\":3,\"37\":2,\"42\":3,\"43\":2,\"49\":3,\"50\":2,\"55\":2,\"61\":2,\"62\":1,\"95\":1,\"111\":2,\"164\":2,\"193\":1,\"231\":2,\"239\":1,\"249\":2,\"250\":3}}],[\"completedtaskcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"completed\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"108\":1,\"256\":1}}],[\"com\",{\"1\":{\"4\":2,\"5\":2,\"6\":1,\"11\":2,\"12\":2,\"18\":2,\"19\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"62\":2,\"63\":2,\"70\":1,\"117\":1,\"118\":1,\"120\":2,\"150\":1,\"151\":5,\"152\":3,\"154\":1,\"157\":5,\"158\":7,\"227\":2,\"231\":1,\"253\":2}}],[\"center=dynamictp\",{\"1\":{\"63\":62}}],[\"center\",{\"1\":{\"1\":1,\"4\":1,\"5\":1,\"6\":3,\"8\":1,\"11\":1,\"12\":1,\"13\":2,\"18\":1,\"19\":1,\"20\":2,\"21\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"36\":1,\"37\":1,\"38\":2,\"42\":1,\"43\":1,\"45\":1,\"49\":1,\"50\":1,\"51\":2,\"55\":1,\"56\":63,\"57\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":2}}],[\"tuple\",{\"1\":{\"225\":1,\"231\":1}}],[\"tips\",{\"1\":{\"239\":6}}],[\"title\",{\"1\":{\"227\":1}}],[\"tid\",{\"1\":{\"162\":1,\"196\":1,\"258\":1}}],[\"timestamp\",{\"1\":{\"231\":1}}],[\"timertask\",{\"1\":{\"223\":4}}],[\"timeunit\",{\"1\":{\"98\":2,\"239\":2}}],[\"time\",{\"1\":{\"98\":1}}],[\"timeout\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"19\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"62\":2,\"63\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"118\":2,\"119\":2,\"175\":2,\"247\":2}}],[\"template\",{\"1\":{\"225\":4,\"231\":2}}],[\"tencent配置中心polaris的支持\",{\"1\":{\"183\":1}}],[\"telegram\",{\"1\":{\"113\":1}}],[\"test=executorwrapper\",{\"1\":{\"86\":1,\"88\":1}}],[\"testthreadpoolkey\",{\"1\":{\"72\":2}}],[\"test\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"82\":1,\"86\":2,\"88\":2,\"95\":1,\"157\":3,\"239\":5,\"240\":2,\"247\":1,\"250\":1}}],[\"test2\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"19\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"62\":2,\"63\":2,\"157\":2,\"235\":1}}],[\"test1\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"235\":1}}],[\"this\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"throw\",{\"1\":{\"256\":1}}],[\"throwable\",{\"1\":{\"98\":1}}],[\"threadlocal\",{\"1\":{\"258\":1}}],[\"threadname\",{\"1\":{\"256\":5}}],[\"threadnameprefix=test\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"threadnameprefix\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"157\":5,\"247\":2,\"250\":1}}],[\"threadfactory\",{\"1\":{\"98\":2,\"239\":5}}],[\"threads\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":2}}],[\"thread\",{\"1\":{\"66\":2,\"98\":1,\"107\":4,\"119\":2,\"208\":1,\"253\":1,\"256\":2}}],[\"threadpoolconfiguration\",{\"1\":{\"239\":1}}],[\"threadpoolcreator\",{\"1\":{\"168\":1,\"196\":1,\"239\":2}}],[\"threadpool\",{\"1\":{\"227\":2}}],[\"threadpoolbuilder\",{\"1\":{\"168\":1,\"239\":10}}],[\"threadpoolstatprovider\",{\"1\":{\"167\":1}}],[\"threadpoolstats\",{\"1\":{\"111\":2}}],[\"threadpooltaskexecutor\",{\"1\":{\"103\":1,\"157\":1,\"158\":2,\"196\":1,\"239\":4}}],[\"threadpoolexecutor\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":2,\"98\":3,\"103\":1,\"223\":2,\"239\":3,\"240\":1,\"256\":2}}],[\"threadpoolaliasname=null\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"threadpoolaliasname=测试线程池\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"threadpoolaliasname\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"68\":1,\"90\":1}}],[\"threadpoolname=test\",{\"1\":{\"86\":1,\"88\":1}}],[\"threadpoolname=testthreadpoolkey\",{\"1\":{\"72\":1}}],[\"threadpoolname=rocketmqtp\",{\"1\":{\"84\":1}}],[\"threadpoolname=rpc\",{\"1\":{\"66\":1}}],[\"threadpoolname=cachingconnectionfactorytp\",{\"1\":{\"82\":1}}],[\"threadpoolname=okhttpclienttp\",{\"1\":{\"80\":1}}],[\"threadpoolname=motantp\",{\"1\":{\"78\":1}}],[\"threadpoolname=liteflowtp\",{\"1\":{\"76\":1}}],[\"threadpoolname=inprocesstp\",{\"1\":{\"70\":1}}],[\"threadpoolname=shadednettytp\",{\"1\":{\"70\":1}}],[\"threadpoolname=dubbotp\",{\"1\":{\"68\":1}}],[\"threadpoolname=dtpexecutor1\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"253\":1}}],[\"threadpoolname\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"157\":6,\"233\":1,\"239\":5,\"247\":3,\"250\":1,\"259\":1}}],[\"threshold=0\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"threshold=70\",{\"1\":{\"66\":2,\"68\":2,\"70\":4,\"72\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2}}],[\"threshold=100\",{\"1\":{\"5\":3,\"12\":3,\"18\":3,\"25\":3,\"31\":3,\"37\":3,\"43\":3,\"50\":3,\"55\":3,\"56\":3,\"61\":3,\"63\":3}}],[\"threshold=80\",{\"1\":{\"5\":2,\"12\":2,\"18\":2,\"25\":2,\"31\":2,\"37\":2,\"43\":2,\"50\":2,\"55\":2,\"56\":2,\"61\":2,\"63\":2}}],[\"threshold\",{\"1\":{\"4\":5,\"11\":5,\"19\":5,\"24\":5,\"30\":5,\"36\":5,\"42\":5,\"49\":5,\"62\":5,\"66\":5,\"68\":5,\"70\":5,\"72\":5,\"74\":5,\"76\":5,\"78\":5,\"80\":5,\"82\":5,\"84\":5,\"86\":5,\"88\":5,\"90\":5,\"92\":5,\"223\":4,\"233\":1,\"247\":5}}],[\"t\",{\"1\":{\"98\":2}}],[\"targets\",{\"1\":{\"122\":1}}],[\"tarstp\",{\"1\":{\"88\":1}}],[\"tars<\",{\"1\":{\"88\":2}}],[\"tars\",{\"0\":{\"87\":1},\"1\":{\"88\":5,\"94\":1,\"95\":1,\"103\":1,\"187\":1}}],[\"tancloud\",{\"1\":{\"120\":1}}],[\"taskname\",{\"1\":{\"158\":1}}],[\"taskenhanceaware\",{\"1\":{\"158\":1}}],[\"task\",{\"1\":{\"108\":3,\"256\":1,\"259\":2}}],[\"taskqueue\",{\"1\":{\"107\":2}}],[\"taskcount\",{\"1\":{\"107\":4,\"116\":1}}],[\"taskwrappers\",{\"1\":{\"158\":1}}],[\"taskwrapper\",{\"1\":{\"103\":1,\"157\":1,\"179\":1,\"258\":1,\"259\":5}}],[\"taskwrappernames=ttl\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"taskwrappernames=swtrace\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"taskwrappernames\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"56\":2,\"62\":2,\"63\":2,\"157\":3,\"233\":1,\"247\":1,\"259\":1}}],[\"tasks\",{\"1\":{\"66\":2,\"68\":2,\"70\":4,\"72\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2}}],[\"topsuder\",{\"1\":{\"179\":1}}],[\"topic=executorwrapper\",{\"1\":{\"84\":1}}],[\"totalmemory\",{\"1\":{\"116\":1}}],[\"tojson\",{\"1\":{\"111\":1}}],[\"tomcatwebservertp\",{\"1\":{\"107\":1}}],[\"tomcattp\",{\"1\":{\"90\":3}}],[\"tomcat\",{\"0\":{\"89\":1},\"1\":{\"90\":7,\"94\":1,\"95\":1,\"103\":1,\"175\":1,\"176\":1,\"179\":1,\"201\":1,\"214\":1,\"249\":1}}],[\"token值\",{\"1\":{\"118\":1}}],[\"token\",{\"1\":{\"4\":2,\"5\":2,\"11\":2,\"12\":2,\"18\":2,\"24\":2,\"25\":2,\"30\":2,\"31\":2,\"36\":2,\"37\":2,\"42\":2,\"43\":2,\"49\":2,\"50\":2,\"55\":2,\"61\":2,\"118\":1}}],[\"transmittable\",{\"1\":{\"208\":1}}],[\"transport\",{\"1\":{\"78\":1}}],[\"trace\",{\"1\":{\"177\":1,\"225\":1,\"231\":3}}],[\"traceid\",{\"1\":{\"162\":1,\"167\":2,\"231\":3}}],[\"trevzhang\",{\"1\":{\"162\":1}}],[\"tryinterrupt\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"161\":1}}],[\"true\",{\"1\":{\"4\":11,\"6\":1,\"11\":11,\"13\":1,\"19\":11,\"24\":11,\"30\":11,\"32\":2,\"36\":11,\"38\":3,\"42\":11,\"49\":11,\"51\":3,\"57\":1,\"62\":11,\"66\":7,\"68\":7,\"70\":7,\"72\":7,\"74\":7,\"76\":7,\"78\":7,\"80\":7,\"82\":7,\"84\":7,\"86\":7,\"88\":7,\"90\":7,\"92\":7,\"107\":2,\"111\":1,\"122\":2,\"157\":1,\"167\":1,\"227\":1,\"233\":1,\"239\":1,\"247\":1}}],[\"type=queue\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"type=run\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"type=reject\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"type=liveness\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"type=capacity\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"type=change\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1}}],[\"type\",{\"1\":{\"4\":6,\"11\":6,\"19\":6,\"20\":1,\"24\":6,\"30\":6,\"36\":6,\"38\":1,\"42\":6,\"49\":6,\"51\":1,\"62\":6,\"64\":1,\"66\":6,\"68\":6,\"70\":6,\"72\":6,\"74\":6,\"76\":6,\"78\":6,\"80\":6,\"82\":6,\"84\":6,\"86\":6,\"88\":6,\"90\":6,\"92\":6,\"108\":1,\"111\":2,\"233\":1,\"247\":6}}],[\"ttltaskwrapper\",{\"1\":{\"103\":1,\"258\":1,\"259\":1}}],[\"ttl\",{\"1\":{\"4\":2,\"5\":1,\"11\":2,\"12\":1,\"18\":1,\"19\":2,\"24\":2,\"25\":1,\"30\":2,\"31\":1,\"36\":2,\"37\":1,\"42\":2,\"43\":1,\"49\":2,\"50\":1,\"55\":1,\"61\":1,\"62\":2,\"157\":3,\"233\":1,\"237\":1,\"247\":1,\"254\":1,\"258\":1,\"259\":1}}],[\"tpmainfields\",{\"1\":{\"253\":1}}],[\"tp50\",{\"1\":{\"171\":1}}],[\"tp95\",{\"1\":{\"171\":1}}],[\"tp99\",{\"1\":{\"168\":1,\"171\":1}}],[\"tp核心流程源码解读篇\",{\"1\":{\"130\":1}}],[\"tp实践与源码原理分析\",{\"1\":{\"127\":1}}],[\"tp快速接入\",{\"1\":{\"125\":1}}],[\"tp支持zookeeper配置中心\",{\"1\":{\"125\":1}}],[\"tp接入consul配置中心\",{\"1\":{\"125\":1}}],[\"tpxx\",{\"1\":{\"103\":1,\"157\":1}}],[\"tps\",{\"1\":{\"103\":1,\"157\":1,\"168\":1,\"171\":1}}],[\"tp\",{\"1\":{\"2\":2,\"7\":1,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"64\":1,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":3,\"82\":3,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"94\":1,\"107\":4,\"108\":1,\"116\":1,\"117\":2,\"119\":1,\"120\":1,\"132\":1,\"138\":1,\"140\":1,\"141\":1,\"150\":1,\"151\":5,\"152\":3,\"154\":1,\"157\":7,\"158\":7,\"217\":1,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"253\":2,\"259\":4}}],[\"08\",{\"1\":{\"218\":3}}],[\"07\",{\"1\":{\"218\":2}}],[\"09\",{\"1\":{\"218\":3}}],[\"03\",{\"1\":{\"218\":2}}],[\"06\",{\"1\":{\"119\":1,\"218\":2}}],[\"02\",{\"1\":{\"119\":2,\"218\":1}}],[\"04\",{\"1\":{\"101\":1,\"107\":4,\"218\":2}}],[\"05\",{\"1\":{\"101\":1}}],[\"0d944ae7\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"0\",{\"0\":{\"149\":1,\"186\":1,\"190\":1,\"195\":1,\"200\":1,\"204\":1,\"209\":1,\"211\":1,\"213\":1},\"1\":{\"2\":1,\"5\":25,\"9\":1,\"12\":25,\"13\":2,\"16\":1,\"18\":25,\"20\":2,\"22\":1,\"25\":25,\"26\":2,\"28\":1,\"31\":25,\"33\":3,\"34\":1,\"37\":25,\"40\":1,\"43\":25,\"46\":1,\"50\":25,\"53\":1,\"55\":25,\"56\":49,\"57\":2,\"59\":1,\"61\":25,\"63\":49,\"64\":2,\"66\":5,\"68\":6,\"70\":10,\"72\":5,\"74\":1,\"76\":5,\"78\":4,\"80\":6,\"82\":6,\"84\":5,\"86\":6,\"88\":6,\"90\":5,\"92\":1,\"100\":1,\"101\":1,\"103\":1,\"107\":36,\"108\":5,\"111\":1,\"116\":10,\"138\":1,\"141\":1,\"149\":1,\"151\":1,\"166\":3,\"195\":1,\"200\":1,\"223\":3,\"225\":2,\"227\":1,\"231\":1,\"233\":2,\"235\":1,\"237\":2,\"242\":1,\"244\":1,\"253\":1,\"259\":3}}],[\"0<\",{\"1\":{\"2\":1,\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"138\":1,\"157\":2,\"227\":1,\"233\":1,\"235\":1,\"237\":1,\"244\":1,\"259\":2}}],[\"29\",{\"1\":{\"218\":2}}],[\"2w\",{\"1\":{\"217\":1}}],[\"22\",{\"1\":{\"119\":1}}],[\"24\",{\"1\":{\"101\":1,\"218\":3}}],[\"24421\",{\"1\":{\"101\":1}}],[\"24098\",{\"1\":{\"101\":1}}],[\"27\",{\"1\":{\"101\":2}}],[\"250\",{\"1\":{\"116\":1}}],[\"25\",{\"1\":{\"100\":1}}],[\"21760\",{\"1\":{\"108\":2}}],[\"212\",{\"1\":{\"100\":2}}],[\"2147483647\",{\"1\":{\"70\":1,\"80\":1,\"82\":1,\"86\":1,\"88\":1,\"107\":4,\"116\":2}}],[\"2181\",{\"1\":{\"57\":1,\"64\":1}}],[\"28082\",{\"1\":{\"51\":1}}],[\"2379\",{\"1\":{\"20\":1}}],[\"205540620349493\",{\"1\":{\"119\":1}}],[\"209\",{\"1\":{\"107\":3}}],[\"208\",{\"1\":{\"107\":1}}],[\"20880=executorwrapper\",{\"1\":{\"68\":1}}],[\"20880\",{\"1\":{\"68\":3}}],[\"2024\",{\"1\":{\"218\":4}}],[\"2024530\",{\"1\":{\"101\":1}}],[\"2023\",{\"1\":{\"119\":1,\"218\":9}}],[\"20231206102730485\",{\"1\":{\"7\":1}}],[\"20231205193214034\",{\"1\":{\"7\":1}}],[\"20231205192944618\",{\"1\":{\"7\":1}}],[\"20231205192713419\",{\"1\":{\"7\":1}}],[\"20231205192141255\",{\"1\":{\"7\":1}}],[\"20231205191955993\",{\"1\":{\"7\":1}}],[\"2022\",{\"1\":{\"107\":4}}],[\"20\",{\"1\":{\"76\":1,\"78\":2,\"84\":2,\"103\":1,\"157\":5,\"247\":3,\"250\":1}}],[\"200\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"66\":3,\"68\":5,\"70\":3,\"72\":3,\"74\":4,\"76\":2,\"78\":4,\"80\":3,\"82\":3,\"84\":5,\"86\":3,\"88\":3,\"90\":4,\"92\":4,\"132\":1,\"247\":1}}],[\"2000\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"101\":1,\"107\":4,\"157\":2,\"239\":3,\"247\":1}}],[\"2\",{\"0\":{\"149\":1,\"182\":1,\"213\":1},\"1\":{\"2\":2,\"4\":3,\"5\":9,\"9\":2,\"11\":3,\"12\":9,\"16\":2,\"18\":9,\"19\":3,\"22\":2,\"24\":3,\"25\":9,\"28\":2,\"30\":3,\"31\":9,\"33\":4,\"34\":2,\"36\":3,\"37\":9,\"40\":2,\"42\":3,\"43\":9,\"46\":2,\"49\":3,\"50\":9,\"53\":2,\"55\":9,\"56\":8,\"59\":2,\"61\":9,\"62\":3,\"63\":8,\"66\":4,\"68\":4,\"70\":4,\"72\":4,\"74\":4,\"76\":3,\"78\":4,\"80\":4,\"82\":4,\"84\":4,\"86\":4,\"88\":4,\"90\":4,\"92\":4,\"94\":1,\"101\":1,\"103\":1,\"107\":1,\"119\":1,\"122\":1,\"137\":1,\"138\":2,\"149\":1,\"157\":2,\"162\":1,\"166\":1,\"194\":2,\"195\":1,\"200\":1,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"239\":3,\"242\":1,\"244\":2,\"245\":1,\"247\":1,\"253\":1,\"259\":4}}],[\"2x\",{\"1\":{\"2\":1,\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"227\":1,\"233\":1,\"235\":1,\"237\":1,\"259\":2}}],[\"args\",{\"1\":{\"240\":1}}],[\"article\",{\"1\":{\"6\":1}}],[\"artifactid>\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"122\":1,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"a=\",{\"1\":{\"231\":1}}],[\"abortpolicy\",{\"1\":{\"256\":1}}],[\"abortpolicywithreport\",{\"1\":{\"256\":3}}],[\"abbottliu\",{\"1\":{\"196\":1}}],[\"abstractnotifier\",{\"1\":{\"225\":2}}],[\"abstractdtpnotifier\",{\"1\":{\"192\":1,\"225\":3,\"231\":3}}],[\"abstractcollector\",{\"1\":{\"111\":3}}],[\"abstractconnectionfactory\",{\"1\":{\"82\":1}}],[\"abstractrefresher\",{\"1\":{\"14\":3}}],[\"aware\",{\"1\":{\"175\":1}}],[\"awaitterminationseconds=5\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"awaitterminationseconds=3\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"61\":1,\"168\":1}}],[\"awaitterminationseconds\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"157\":1,\"247\":1}}],[\"androidcj\",{\"1\":{\"167\":1}}],[\"after\",{\"1\":{\"259\":1}}],[\"afterreject\",{\"1\":{\"162\":1}}],[\"afterinitialize\",{\"1\":{\"158\":1}}],[\"afterexecute\",{\"1\":{\"98\":1,\"223\":1}}],[\"agent<\",{\"1\":{\"157\":1,\"237\":2}}],[\"agentaware\",{\"1\":{\"154\":1,\"157\":1}}],[\"agent\",{\"0\":{\"236\":1},\"1\":{\"141\":2,\"157\":1,\"176\":1,\"237\":3,\"254\":2}}],[\"a\",{\"1\":{\"94\":6,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1}}],[\"add\",{\"1\":{\"243\":1}}],[\"address\",{\"1\":{\"51\":1,\"227\":1}}],[\"addr\",{\"1\":{\"32\":3,\"38\":1}}],[\"adapter\",{\"1\":{\"66\":4,\"68\":4,\"70\":4,\"72\":4,\"74\":4,\"76\":4,\"78\":4,\"80\":4,\"82\":4,\"84\":4,\"86\":4,\"88\":4,\"90\":4,\"92\":4,\"95\":1,\"140\":1,\"151\":1,\"157\":1,\"158\":1,\"187\":5,\"191\":1,\"193\":3,\"198\":1,\"203\":1,\"229\":1}}],[\"autowired\",{\"1\":{\"252\":1}}],[\"autocreate\",{\"1\":{\"139\":1,\"157\":2,\"247\":2,\"254\":1}}],[\"auto\",{\"1\":{\"38\":1,\"51\":2,\"231\":1}}],[\"authorization\",{\"1\":{\"227\":1}}],[\"author\",{\"1\":{\"111\":1,\"225\":2,\"231\":1,\"259\":1}}],[\"auth\",{\"1\":{\"20\":1}}],[\"alibab\",{\"1\":{\"201\":1}}],[\"alibaba\",{\"1\":{\"27\":1,\"33\":1,\"67\":1,\"167\":1,\"184\":1}}],[\"alarm\",{\"1\":{\"167\":1,\"180\":1,\"225\":2,\"231\":1}}],[\"alert\",{\"1\":{\"118\":1}}],[\"allowscorethreadtimeout\",{\"1\":{\"98\":1}}],[\"allowcorethreadtimeout=false\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1,\"253\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"98\":1,\"157\":1,\"167\":1}}],[\"actuator\",{\"1\":{\"116\":2,\"117\":1,\"122\":1}}],[\"activecount\",{\"1\":{\"107\":4,\"116\":1,\"223\":1}}],[\"active\",{\"1\":{\"13\":1,\"32\":2,\"57\":1,\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"108\":1,\"256\":1}}],[\"access\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1}}],[\"api\",{\"1\":{\"78\":1}}],[\"apachedubbo\",{\"1\":{\"188\":1}}],[\"apache\",{\"1\":{\"67\":1,\"68\":1,\"90\":1,\"163\":1,\"201\":1,\"225\":1,\"231\":2}}],[\"appname\",{\"1\":{\"107\":1}}],[\"appid\",{\"1\":{\"7\":1}}],[\"app\",{\"1\":{\"6\":1,\"7\":1,\"107\":4,\"231\":1}}],[\"applicationcontext\",{\"1\":{\"194\":1}}],[\"applicationcontextholder\",{\"1\":{\"176\":1}}],[\"applicationevent\",{\"1\":{\"14\":1}}],[\"applicationevent>\",{\"1\":{\"14\":1}}],[\"application\",{\"0\":{\"6\":1,\"20\":1,\"38\":1,\"64\":1},\"1\":{\"7\":2,\"13\":1,\"20\":1,\"26\":2,\"32\":2,\"51\":2,\"57\":1,\"64\":1}}],[\"apollorefresher\",{\"1\":{\"169\":1,\"192\":1}}],[\"apolloconfig\",{\"1\":{\"6\":1}}],[\"apollo<\",{\"1\":{\"2\":2}}],[\"apollo\",{\"0\":{\"1\":1,\"7\":1},\"1\":{\"1\":1,\"6\":2,\"7\":2,\"94\":1,\"103\":1,\"199\":1,\"214\":1}}],[\"a798\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1,\"225\":1,\"235\":1}}],[\"system\",{\"1\":{\"240\":2}}],[\"synchronousqueue\",{\"1\":{\"108\":1}}],[\"safe\",{\"1\":{\"239\":1}}],[\"save\",{\"1\":{\"111\":1}}],[\"slf4j\",{\"1\":{\"231\":1,\"256\":1,\"259\":3}}],[\"slack\",{\"1\":{\"113\":1}}],[\"subject\",{\"1\":{\"227\":1}}],[\"support\",{\"1\":{\"259\":2}}],[\"supportseventtype\",{\"1\":{\"14\":1}}],[\"super\",{\"1\":{\"14\":1,\"225\":1,\"231\":2}}],[\"sslsocketfactory\",{\"1\":{\"227\":1}}],[\"ssl\",{\"1\":{\"227\":2}}],[\"ss\",{\"1\":{\"225\":3}}],[\"ssh\",{\"1\":{\"113\":1}}],[\"sort\",{\"1\":{\"231\":1}}],[\"source\",{\"1\":{\"231\":1,\"253\":1}}],[\"socketfactoryclass\",{\"1\":{\"227\":1}}],[\"songxiaohua\",{\"1\":{\"194\":1}}],[\"sofa\",{\"1\":{\"86\":4,\"187\":1}}],[\"sofatp\",{\"1\":{\"86\":1}}],[\"sofa<\",{\"1\":{\"86\":2}}],[\"sofarpc\",{\"0\":{\"85\":1},\"1\":{\"86\":1,\"94\":1,\"95\":1,\"103\":1}}],[\"shutdown\",{\"1\":{\"172\":1}}],[\"shadednettygrpcserverlifecycle\",{\"1\":{\"70\":1}}],[\"shadednettytp=executorwrapper\",{\"1\":{\"70\":1}}],[\"shadednettytp\",{\"1\":{\"70\":3}}],[\"sb\",{\"1\":{\"137\":1,\"168\":1}}],[\"sb3\",{\"1\":{\"137\":1}}],[\"sb2\",{\"1\":{\"137\":5}}],[\"sb1\",{\"1\":{\"137\":2}}],[\"sca\",{\"1\":{\"168\":1}}],[\"sc\",{\"1\":{\"168\":1}}],[\"scl\",{\"0\":{\"127\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"239\":1}}],[\"scheduledthreadpoolexecutor会导致死循环问题\",{\"1\":{\"185\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"167\":1}}],[\"scheduledfuture\",{\"1\":{\"151\":1}}],[\"scheduleddtpexecutor\",{\"1\":{\"103\":1,\"154\":1,\"157\":1,\"167\":2,\"183\":1,\"239\":2,\"249\":1}}],[\"scheduled\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"157\":1,\"239\":2,\"249\":1,\"250\":1}}],[\"sd\",{\"1\":{\"122\":1}}],[\"snmp\",{\"1\":{\"113\":1}}],[\"simpletpproperties\",{\"1\":{\"188\":1}}],[\"simpleito\",{\"1\":{\"162\":1}}],[\"since\",{\"1\":{\"111\":1,\"225\":2,\"231\":1,\"259\":1}}],[\"size\",{\"1\":{\"66\":1,\"68\":1,\"70\":2,\"72\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"108\":5,\"256\":1}}],[\"skywalking<\",{\"1\":{\"259\":2}}],[\"skywalking\",{\"1\":{\"95\":1,\"141\":1,\"166\":2,\"196\":1,\"237\":2,\"254\":1,\"258\":1}}],[\"split\",{\"1\":{\"225\":1}}],[\"spi\",{\"1\":{\"94\":4,\"103\":4,\"111\":2,\"155\":2,\"166\":1,\"177\":1,\"192\":1,\"225\":2,\"256\":2,\"258\":1,\"259\":1}}],[\"spring5x\",{\"1\":{\"237\":1,\"259\":2}}],[\"springexecutor\",{\"1\":{\"187\":1}}],[\"spring6x\",{\"1\":{\"237\":1,\"259\":2}}],[\"spring6\",{\"1\":{\"166\":1}}],[\"springtaskexecutor\",{\"1\":{\"157\":1,\"247\":1}}],[\"spring<\",{\"1\":{\"138\":1,\"244\":2}}],[\"springboot3\",{\"1\":{\"166\":1}}],[\"springboot3x\",{\"1\":{\"2\":1,\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"227\":1,\"233\":1,\"235\":1,\"237\":1,\"259\":2}}],[\"springboot\",{\"0\":{\"137\":1,\"138\":1,\"245\":1},\"1\":{\"33\":2,\"70\":2,\"94\":1,\"95\":1,\"103\":1,\"116\":1,\"137\":1,\"138\":1,\"142\":1,\"166\":2,\"175\":2,\"201\":1,\"245\":2}}],[\"springboot1x\",{\"1\":{\"2\":1,\"9\":1,\"16\":1,\"22\":1,\"28\":1,\"34\":1,\"40\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"227\":1,\"233\":1,\"235\":1,\"237\":1,\"259\":2}}],[\"spring\",{\"0\":{\"139\":1,\"244\":1},\"1\":{\"2\":2,\"9\":2,\"13\":1,\"16\":2,\"22\":2,\"26\":1,\"27\":1,\"28\":2,\"32\":5,\"33\":2,\"34\":2,\"40\":2,\"46\":2,\"51\":2,\"53\":2,\"57\":1,\"59\":2,\"64\":1,\"66\":2,\"68\":2,\"70\":3,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":4,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"94\":2,\"103\":6,\"138\":4,\"139\":2,\"140\":2,\"142\":1,\"149\":6,\"150\":2,\"157\":4,\"158\":2,\"159\":1,\"163\":1,\"166\":1,\"175\":1,\"187\":1,\"194\":1,\"196\":1,\"227\":3,\"233\":2,\"235\":2,\"239\":1,\"242\":2,\"244\":1,\"254\":2}}],[\"smtp\",{\"1\":{\"227\":2}}],[\"sms1\",{\"1\":{\"225\":1}}],[\"smsnotifyconst\",{\"1\":{\"225\":5,\"231\":2}}],[\"smsnotifier\",{\"1\":{\"225\":4,\"231\":3}}],[\"smsdtpnotifier\",{\"1\":{\"225\":5,\"231\":3}}],[\"smsclient\",{\"1\":{\"225\":8}}],[\"sms\",{\"1\":{\"84\":2,\"225\":7,\"231\":3}}],[\"smartapplicationlistener\",{\"1\":{\"14\":1}}],[\"step\",{\"1\":{\"158\":1}}],[\"stream\",{\"1\":{\"187\":1}}],[\"streamrocketmqdtpadapter\",{\"1\":{\"183\":1,\"187\":1}}],[\"str\",{\"1\":{\"64\":1}}],[\"stringutils\",{\"1\":{\"231\":3}}],[\"string>\",{\"1\":{\"225\":1,\"231\":1}}],[\"string\",{\"1\":{\"14\":1,\"57\":1,\"111\":1,\"225\":8,\"231\":10,\"240\":1,\"256\":4,\"259\":1}}],[\"stackoverflowerror\",{\"1\":{\"180\":1}}],[\"standard\",{\"1\":{\"101\":1}}],[\"standardthreadexecutor\",{\"1\":{\"78\":1}}],[\"starlight\",{\"1\":{\"187\":1}}],[\"star\",{\"1\":{\"70\":1,\"216\":1}}],[\"started\",{\"1\":{\"74\":1}}],[\"starter\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"33\":1,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":5,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"95\":1,\"138\":2,\"140\":2,\"152\":1,\"157\":1,\"175\":1,\"196\":1,\"203\":1,\"227\":2,\"233\":2,\"235\":2}}],[\"start\",{\"1\":{\"6\":1}}],[\"status\",{\"1\":{\"256\":1}}],[\"static\",{\"1\":{\"122\":2,\"225\":2,\"231\":2,\"240\":1,\"259\":1}}],[\"stat\",{\"1\":{\"51\":1}}],[\"send\",{\"1\":{\"225\":1,\"227\":1}}],[\"send0\",{\"1\":{\"225\":2}}],[\"setrejectedexecutionhandler\",{\"1\":{\"98\":1}}],[\"setthreadfactory\",{\"1\":{\"98\":1}}],[\"setkeepalivetime\",{\"1\":{\"98\":1}}],[\"setmaximumpoolsize\",{\"1\":{\"98\":1}}],[\"setcorepoolsize\",{\"1\":{\"98\":1}}],[\"set\",{\"1\":{\"98\":1}}],[\"server=executorwrapper\",{\"1\":{\"66\":1}}],[\"server\",{\"1\":{\"32\":3,\"38\":1,\"66\":7,\"70\":2,\"74\":1,\"78\":2,\"90\":1,\"92\":1,\"100\":1}}],[\"servertype\",{\"1\":{\"26\":1}}],[\"serveraddr\",{\"1\":{\"26\":1}}],[\"services\",{\"1\":{\"111\":1,\"225\":1,\"256\":1,\"259\":1}}],[\"servicecomb\",{\"1\":{\"21\":1,\"26\":1,\"94\":1,\"103\":1}}],[\"service\",{\"1\":{\"6\":1,\"122\":1,\"151\":1,\"227\":1}}],[\"seconds\",{\"1\":{\"239\":1}}],[\"secb5441fa6f375d5b9d21\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1}}],[\"secret=3a750012874bdac5c3d8b69c\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"secret=secb5441fa6f375d5b9d21\",{\"1\":{\"5\":1,\"12\":1,\"18\":1,\"25\":1,\"31\":1,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"63\":1}}],[\"secret\",{\"1\":{\"4\":2,\"11\":2,\"19\":2,\"24\":2,\"30\":2,\"36\":2,\"42\":2,\"49\":2,\"62\":2,\"225\":1}}],[\"s\",{\"1\":{\"4\":2,\"5\":1,\"11\":2,\"12\":1,\"18\":1,\"24\":2,\"25\":1,\"30\":2,\"31\":1,\"36\":2,\"37\":1,\"42\":2,\"43\":1,\"49\":2,\"50\":1,\"55\":1,\"61\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1,\"101\":1,\"225\":44,\"233\":1,\"256\":4}}],[\"swtracetaskwrapper\",{\"1\":{\"103\":1,\"196\":1,\"258\":1,\"259\":1}}],[\"swtrace\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"233\":1,\"247\":1,\"258\":1,\"259\":1}}],[\"<artifactid>micrometer\",{\"1\":{\"122\":1}}],[\"<artifactid>dynamic\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"<groupid>io\",{\"1\":{\"122\":1}}],[\"<groupid>org\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"<\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"122\":1,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"<version>1\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"<dependency>\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"122\":1,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"警告\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"给出的是全配置项\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"可能有不兼容的地方\",{\"1\":{\"245\":1}}],[\"可能会导致内存泄露问题\",{\"1\":{\"237\":1}}],[\"可能会有版本兼容性问题\",{\"1\":{\"145\":1}}],[\"可能会有部分不兼容的地方\",{\"1\":{\"137\":1}}],[\"可能会造成\",{\"1\":{\"141\":1,\"254\":1}}],[\"可直接使用\",{\"1\":{\"227\":1}}],[\"可配置\",{\"1\":{\"223\":1}}],[\"可靠性\",{\"1\":{\"103\":1}}],[\"可通过内部提供的\",{\"1\":{\"94\":3}}],[\"可以继承\",{\"1\":{\"258\":1}}],[\"可以实现特定的功能\",{\"1\":{\"258\":1}}],[\"可以修改\",{\"1\":{\"254\":1}}],[\"可以\",{\"1\":{\"254\":1}}],[\"可以先用\",{\"1\":{\"239\":1}}],[\"可以先自己调试排查\",{\"1\":{\"145\":1}}],[\"可以全局控制通知功能开启与否\",{\"1\":{\"187\":1}}],[\"可以配置多个通知平台\",{\"1\":{\"183\":1}}],[\"可以扩展自定义线程池执行过程\",{\"1\":{\"175\":1}}],[\"可以提\",{\"1\":{\"142\":1}}],[\"可以引入下面依赖\",{\"1\":{\"138\":1}}],[\"可以关注我个人微信公众号\",{\"1\":{\"132\":1}}],[\"可以加入社群\",{\"1\":{\"132\":1}}],[\"可以重新编辑下每个\",{\"1\":{\"122\":1}}],[\"可以去官网查看\",{\"1\":{\"122\":1}}],[\"可以发现集\",{\"1\":{\"120\":1}}],[\"可以做到优雅关闭线程池\",{\"1\":{\"103\":1}}],[\"可以根据业务场景选择合适的线程池模式\",{\"1\":{\"249\":1}}],[\"可以根据业务场景选择合适的线程池\",{\"1\":{\"103\":1}}],[\"可以支持线程池上下文信息传递\",{\"1\":{\"103\":1}}],[\"可以看到在单机\",{\"1\":{\"101\":1}}],[\"可以总结出以下的背景\",{\"1\":{\"98\":1}}],[\"可以在框架启动前做一些自定义初始化操作\",{\"1\":{\"166\":1}}],[\"可以在运行时动态修改\",{\"1\":{\"98\":1}}],[\"可以在启动日志找输出的线程池名称\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1}}],[\"可以自己采集解析日志存储\",{\"1\":{\"94\":1}}],[\"可以通过如下方式支持我们\",{\"1\":{\"216\":1}}],[\"可以通过依赖注入方式使用\",{\"1\":{\"212\":1}}],[\"可以通过\",{\"1\":{\"52\":1,\"58\":1,\"105\":1,\"108\":1,\"231\":1}}],[\"可选\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"49\":1,\"50\":1,\"55\":1,\"61\":1,\"90\":1}}],[\"可选配置\",{\"1\":{\"4\":1,\"11\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"可操作性更友好\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"可读性\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"建议不要用\",{\"1\":{\"254\":1}}],[\"建议使用这两版本\",{\"1\":{\"245\":1}}],[\"建议直接在配置中心配置就行\",{\"1\":{\"239\":6}}],[\"建议直接配置在配置中心\",{\"1\":{\"239\":1}}],[\"建议\",{\"1\":{\"141\":1}}],[\"建议单独开一个配置文件\",{\"1\":{\"39\":1}}],[\"建议单独开一个文件放在\",{\"1\":{\"33\":1}}],[\"建议单独开一个文件放到配置中心\",{\"1\":{\"15\":1}}],[\"建议单独开一个文件放到\",{\"1\":{\"1\":1,\"8\":1,\"21\":1,\"27\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"建议保留这种配置方式\",{\"1\":{\"26\":1}}],[\"建议最好使用\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"39\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"格式输出到项目日志文件里\",{\"1\":{\"105\":1}}],[\"格式输出到指定的日志文件里\",{\"1\":{\"105\":1}}],[\"格式会用到\",{\"1\":{\"64\":1}}],[\"格式\",{\"0\":{\"4\":1,\"5\":1,\"11\":1,\"12\":1,\"18\":1,\"19\":1,\"24\":1,\"25\":1,\"30\":1,\"31\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"48\":1,\"49\":1,\"50\":1,\"55\":1,\"56\":1,\"61\":1,\"62\":1,\"63\":1},\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"dailingx的贡献\",{\"1\":{\"185\":1}}],[\"datetime\",{\"1\":{\"107\":4}}],[\"databind版本升级\",{\"1\":{\"185\":1}}],[\"dataid\",{\"1\":{\"32\":1}}],[\"data\",{\"1\":{\"13\":1,\"38\":1,\"169\":1}}],[\"dragon\",{\"1\":{\"166\":1,\"168\":1,\"175\":2,\"177\":1,\"179\":2,\"181\":1,\"196\":1}}],[\"dromara\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"111\":6,\"120\":2,\"138\":1,\"150\":1,\"151\":5,\"152\":3,\"154\":1,\"157\":7,\"158\":7,\"178\":1,\"225\":5,\"227\":2,\"231\":4,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"253\":2,\"256\":1,\"259\":8}}],[\"d\",{\"1\":{\"120\":1,\"256\":7}}],[\"done\",{\"1\":{\"117\":1}}],[\"docs\",{\"1\":{\"117\":1,\"118\":1}}],[\"docker\",{\"1\":{\"6\":3,\"7\":1,\"120\":1,\"122\":1}}],[\"dubbotp\",{\"1\":{\"68\":7}}],[\"dubbo<\",{\"1\":{\"68\":2}}],[\"dubbox\",{\"1\":{\"67\":1,\"196\":1}}],[\"dubbo\",{\"0\":{\"67\":1},\"1\":{\"67\":4,\"68\":4,\"94\":1,\"95\":1,\"103\":1,\"151\":1,\"158\":1,\"162\":1,\"163\":1,\"167\":1,\"172\":1,\"175\":1,\"184\":1,\"194\":1,\"200\":4,\"201\":2,\"249\":1}}],[\"dispatcher\",{\"1\":{\"151\":1}}],[\"discover\",{\"1\":{\"231\":1}}],[\"discovery\",{\"1\":{\"32\":2,\"51\":1,\"122\":1}}],[\"discord\",{\"1\":{\"113\":1}}],[\"dingtalk\",{\"1\":{\"118\":1}}],[\"ding\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"72\":3}}],[\"dynamic\",{\"1\":{\"7\":1,\"64\":1,\"94\":1,\"107\":8,\"108\":1,\"116\":2,\"117\":2,\"119\":1,\"120\":1,\"130\":1,\"132\":1,\"140\":1,\"141\":1,\"150\":1,\"151\":5,\"152\":3,\"154\":1,\"157\":5,\"158\":7,\"217\":1,\"253\":3}}],[\"dynamictpconst\",{\"1\":{\"231\":2}}],[\"dynamictp注解支持监控juc原生线程池\",{\"1\":{\"212\":1}}],[\"dynamictp线程池\",{\"0\":{\"118\":1},\"1\":{\"117\":3,\"120\":2}}],[\"dynamictp监控主要是一些线程池相关指标\",{\"1\":{\"118\":1}}],[\"dynamictp监控\",{\"1\":{\"117\":1}}],[\"dynamictp\",{\"0\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"137\":1,\"141\":1,\"144\":1},\"1\":{\"4\":3,\"5\":69,\"11\":3,\"12\":69,\"18\":69,\"19\":2,\"20\":1,\"24\":3,\"25\":69,\"30\":3,\"31\":69,\"36\":3,\"37\":69,\"42\":3,\"43\":69,\"49\":3,\"50\":69,\"55\":69,\"56\":1,\"61\":69,\"62\":2,\"63\":1,\"66\":3,\"67\":1,\"68\":3,\"70\":3,\"72\":3,\"74\":3,\"76\":3,\"78\":3,\"80\":3,\"82\":3,\"83\":1,\"84\":3,\"86\":3,\"88\":3,\"90\":3,\"92\":3,\"98\":1,\"103\":1,\"107\":1,\"111\":7,\"115\":1,\"117\":7,\"119\":2,\"120\":1,\"124\":3,\"137\":1,\"138\":1,\"139\":2,\"141\":4,\"144\":3,\"149\":1,\"156\":1,\"157\":4,\"162\":1,\"166\":1,\"178\":1,\"200\":1,\"217\":3,\"225\":6,\"231\":4,\"233\":1,\"235\":1,\"237\":2,\"239\":4,\"242\":1,\"247\":1,\"250\":1,\"253\":2,\"254\":1,\"256\":1,\"259\":5}}],[\"dynamictp<\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"desc\",{\"1\":{\"231\":1}}],[\"debug\",{\"1\":{\"227\":1}}],[\"demo\",{\"1\":{\"44\":1,\"107\":4}}],[\"default\",{\"1\":{\"26\":1,\"32\":1,\"38\":1,\"51\":1,\"227\":2}}],[\"dependency\",{\"0\":{\"208\":1}}],[\"dependency>\",{\"1\":{\"2\":2,\"9\":2,\"16\":2,\"22\":2,\"28\":2,\"34\":2,\"40\":2,\"46\":2,\"53\":2,\"59\":2,\"66\":2,\"68\":2,\"70\":2,\"72\":2,\"74\":2,\"76\":2,\"78\":2,\"80\":2,\"82\":2,\"84\":2,\"86\":2,\"88\":2,\"90\":2,\"92\":2,\"122\":1,\"138\":1,\"157\":2,\"227\":2,\"233\":2,\"235\":2,\"237\":2,\"244\":2,\"259\":4}}],[\"dependencies\",{\"1\":{\"179\":1}}],[\"deployment\",{\"1\":{\"6\":1}}],[\"details\",{\"1\":{\"6\":1}}],[\"dev=dynamictp\",{\"1\":{\"56\":62}}],[\"dev\",{\"1\":{\"1\":1,\"6\":2,\"13\":1,\"21\":1,\"27\":1,\"32\":1,\"33\":1,\"38\":2,\"44\":1,\"45\":1,\"51\":1,\"56\":62,\"57\":2,\"63\":62,\"64\":1,\"135\":2}}],[\"dtpnotifier\",{\"1\":{\"225\":1}}],[\"dtppostprocessor\",{\"1\":{\"172\":1,\"180\":1}}],[\"dtpproperties\",{\"1\":{\"14\":3,\"166\":1,\"168\":1}}],[\"dtpinitizlizer\",{\"1\":{\"166\":1}}],[\"dtpmonitor\",{\"1\":{\"162\":1}}],[\"dtprunnable\",{\"1\":{\"157\":1,\"176\":1}}],[\"dtpregistry\",{\"1\":{\"94\":1,\"240\":3,\"252\":1,\"253\":1}}],[\"dtpexecutor0\",{\"1\":{\"239\":2}}],[\"dtpexecutor2\",{\"1\":{\"107\":1,\"157\":2,\"253\":1}}],[\"dtpexecutor\",{\"1\":{\"103\":1,\"139\":1,\"157\":2,\"223\":1,\"239\":2,\"240\":3,\"249\":2}}],[\"dtpexecutor1\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"24\":1,\"30\":1,\"36\":1,\"42\":1,\"49\":1,\"62\":1,\"107\":1,\"157\":2,\"233\":1,\"239\":2,\"240\":3,\"247\":1,\"250\":1,\"253\":1,\"259\":1}}],[\"dtp\",{\"1\":{\"1\":1,\"6\":1,\"8\":1,\"13\":1,\"20\":1,\"21\":1,\"27\":1,\"32\":1,\"33\":1,\"38\":1,\"44\":1,\"45\":1,\"51\":1,\"64\":2,\"101\":5,\"139\":1,\"141\":1,\"177\":1,\"180\":1,\"181\":1,\"239\":1,\"254\":1}}],[\"如有问题需自行排查\",{\"1\":{\"245\":1}}],[\"如下通过\",{\"1\":{\"231\":1}}],[\"如下示例定义了一个短信通知渠道\",{\"1\":{\"225\":1}}],[\"如下示例定义了一个\",{\"1\":{\"111\":1}}],[\"如计算质数\",{\"1\":{\"101\":1}}],[\"如果项目中没有引入\",{\"1\":{\"233\":1}}],[\"如果项目中大量使用了\",{\"1\":{\"157\":1}}],[\"如果接入了\",{\"1\":{\"229\":1}}],[\"如果感觉该项目对您有点帮助\",{\"1\":{\"216\":1}}],[\"如果线程池某一配置项没配置\",{\"1\":{\"157\":1,\"247\":1}}],[\"如果确实是版本兼容问题\",{\"1\":{\"145\":1}}],[\"如果用的版本跟我们用的基准版本差异较大\",{\"1\":{\"145\":1}}],[\"如果还有问题\",{\"1\":{\"142\":1}}],[\"如果这些\",{\"1\":{\"141\":1,\"237\":1}}],[\"如果你在使用\",{\"1\":{\"200\":1}}],[\"如果你有下述痛点\",{\"1\":{\"200\":1}}],[\"如果你执意要使用\",{\"1\":{\"139\":1}}],[\"如果你没使用上述任何一种配置中心\",{\"1\":{\"14\":1}}],[\"如果有不兼容地方\",{\"1\":{\"137\":1}}],[\"如果有以上痛点\",{\"1\":{\"98\":1}}],[\"如果没显示监控数据\",{\"1\":{\"122\":1}}],[\"如果看过\",{\"1\":{\"98\":1}}],[\"如果开启了通知\",{\"1\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"90\":1,\"92\":1}}],[\"如果\",{\"1\":{\"6\":1}}],[\"如果配置中心支持\",{\"1\":{\"1\":1,\"8\":1,\"15\":1,\"21\":1,\"27\":1,\"33\":1,\"45\":1,\"52\":1,\"58\":1}}],[\"如\",{\"1\":{\"1\":1,\"8\":1,\"21\":1,\"27\":1,\"33\":1,\"45\":1,\"94\":1,\"103\":1,\"105\":1,\"172\":1}}],[\"中根据线程池名称获取\",{\"1\":{\"240\":1}}],[\"中定义的线程池装饰器失效问题\",{\"1\":{\"158\":1}}],[\"中线程池字段为\",{\"1\":{\"151\":1}}],[\"中间件监控\",{\"1\":{\"117\":1}}],[\"中间件\",{\"1\":{\"113\":1}}],[\"中间件线程池管理\",{\"1\":{\"103\":1}}],[\"中的一些方法来扩展告警信息\",{\"1\":{\"231\":1}}],[\"中的\",{\"1\":{\"4\":3,\"5\":3,\"11\":3,\"12\":3,\"18\":3,\"24\":3,\"25\":3,\"30\":3,\"31\":3,\"36\":3,\"37\":3,\"42\":3,\"43\":3,\"49\":3,\"50\":3,\"55\":3,\"61\":3,\"103\":1,\"196\":1}}],[\"中\",{\"1\":{\"1\":1,\"8\":1,\"21\":1,\"27\":1,\"33\":1,\"45\":1,\"52\":1,\"58\":1,\"94\":1,\"138\":2}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,tt(t,r,n)]):e==="search"?self.postMessage([e,o,Z(t,r,n)]):self.postMessage({suggestions:[e,o,tt(t,r,n)],results:[e,o,Z(t,r,n)]})};
//# sourceMappingURL=index.js.map
